{
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src/reactNativeTransformer.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src/reactNativeTransformer.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src/reactNativeTransformer.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src/reactNativeTransformer.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src",
        "sourceFileName": "reactNativeTransformer.js"
      }
    },
    "ast": null,
    "code": "/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Note: This is a fork of the fb-specific transform.js\n *\n * \n * @format\n */\n'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};\n\nconst crypto = require('crypto');\nconst externalHelpersPlugin = require('babel-plugin-external-helpers');\nconst fs = require('fs');\nconst inlineRequiresPlugin = require('babel-preset-fbjs/plugins/inline-requires');\nconst json5 = require('json5');\nconst makeHMRConfig = require('./hmrConfig');\nconst path = require('path');var _require =\n\nrequire('@babel/core');const transformSync = _require.transformSync;\n\n\n\n\n\n\nconst cacheKeyParts = [\nfs.readFileSync(__filename),\nrequire('babel-plugin-external-helpers/package.json').version,\nrequire('babel-preset-fbjs/package.json').version,\nrequire('babel-preset-react-native/package.json').version];\n\n\n/**\n                                                                                                                         * Return a memoized function that checks for the existence of a\n                                                                                                                         * project level .babelrc file, and if it doesn't exist, reads the\n                                                                                                                         * default RN babelrc file and uses that.\n                                                                                                                         */\nconst getBabelRC = function () {\n  let babelRC = null;\n\n  return function _getBabelRC(projectRoot) {\n    if (babelRC != null) {\n      return babelRC;\n    }\n\n    babelRC = { plugins: [] };\n\n    // Let's look for the .babelrc in the project root.\n    // In the future let's look into adding a command line option to specify\n    // this location.\n    let projectBabelRCPath;\n    if (projectRoot) {\n      projectBabelRCPath = path.resolve(projectRoot, '.babelrc');\n    }\n\n    // If a .babelrc file doesn't exist in the project,\n    // use the Babel config provided with react-native.\n    if (!projectBabelRCPath || !fs.existsSync(projectBabelRCPath)) {\n      babelRC = json5.parse(\n      fs.readFileSync(require.resolve('metro/rn-babelrc.json')));\n\n\n      // Require the babel-preset's listed in the default babel config\n      babelRC.presets = babelRC.presets.map(name => {\n        if (!/^(?:@babel\\/|babel-)preset-/.test(name)) {\n          try {\n            name = require.resolve(`babel-preset-${name}`);\n          } catch (error) {\n            if (error && error.conde === 'MODULE_NOT_FOUND') {\n              name = require.resolve(`@babel/preset-${name}`);\n            } else {\n              throw new Error(error);\n            }\n          }\n        }\n        return require(name);\n      });\n      babelRC.plugins = babelRC.plugins.map(plugin => {\n        // Manually resolve all default Babel plugins.\n        // `babel.transform` will attempt to resolve all base plugins relative to\n        // the file it's compiling. This makes sure that we're using the plugins\n        // installed in the react-native package.\n\n        // Normalise plugin to an array.\n        plugin = Array.isArray(plugin) ? plugin : [plugin];\n        // Only resolve the plugin if it's a string reference.\n        if (typeof plugin[0] === 'string') {\n          // $FlowFixMe TODO t26372934 plugin require\n          const required = require('@babel/plugin-' +\n          plugin[0]);\n          // es6 import default?\n          // $FlowFixMe should properly type this plugin structure\n          plugin[0] = required.__esModule ? required.default : required;\n        }\n      });\n    } else {\n      // if we find a .babelrc file we tell babel to use it\n      babelRC.extends = projectBabelRCPath;\n    }\n\n    return babelRC;\n  };\n}();\n\n/**\n           * Given a filename and options, build a Babel\n           * config object with the appropriate plugins.\n           */\nfunction buildBabelConfig(filename, options) {let plugins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const babelRC = getBabelRC(options.projectRoot);\n\n  const extraConfig = {\n    babelrc:\n    typeof options.enableBabelRCLookup === 'boolean' ?\n    options.enableBabelRCLookup :\n    true,\n    code: false,\n    filename,\n    highlightCode: true };\n\n\n  let config = Object.assign({}, babelRC, extraConfig);\n\n  // Add extra plugins\n  const extraPlugins = [externalHelpersPlugin];\n\n  if (options.inlineRequires) {\n    extraPlugins.push(inlineRequiresPlugin);\n  }\n\n  config.plugins = extraPlugins.concat(config.plugins, plugins);\n\n  /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an error\n                                                                                                                                 * found when Flow v0.68 was deployed. To see the error delete this comment\n                                                                                                                                 * and run Flow. */\n  if (options.dev && options.hot) {\n    const hmrConfig = makeHMRConfig(options, filename);\n    config = Object.assign({}, config, hmrConfig);\n  }\n\n  return Object.assign({}, babelRC, config);\n}\n\n\n\n\n\n\n\n\nfunction transform(_ref) {let filename = _ref.filename,options = _ref.options,src = _ref.src,plugins = _ref.plugins;\n  const OLD_BABEL_ENV = process.env.BABEL_ENV;\n  /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an error\n                                                                                             * found when Flow v0.68 was deployed. To see the error delete this comment\n                                                                                             * and run Flow. */\n  process.env.BABEL_ENV = options.dev ? 'development' : 'production';\n\n  try {\n    const babelConfig = buildBabelConfig(filename, options, plugins);var _transformSync =\n    transformSync(src, _extends({\n      // ES modules require sourceType='module' but OSS may not always want that\n      sourceType: 'unambiguous' },\n    babelConfig, {\n      ast: true }));const ast = _transformSync.ast;\n\n\n    return { ast };\n  } finally {\n    process.env.BABEL_ENV = OLD_BABEL_ENV;\n  }\n}\n\nfunction getCacheKey() {\n  var key = crypto.createHash('md5');\n  cacheKeyParts.forEach(part => key.update(part));\n  return key.digest('hex');\n}\n\nmodule.exports = {\n  transform,\n  getCacheKey };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528220043
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/json5/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/json5/lib/json5.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/json5/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/json5/lib/json5.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/json5/lib/json5.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/json5/lib/json5.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/json5/lib",
        "sourceFileName": "json5.js"
      }
    },
    "ast": null,
    "code": "\"use strict\"; // json5.js\n// Modern JSON. See README.md for details.\n//\n// This file is based directly off of Douglas Crockford's json_parse.js:\n// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js\n\nvar JSON5 = typeof exports === 'object' ? exports : {};\n\nJSON5.parse = function () {\n  \"use strict\";\n\n  // This is a function that can parse a JSON5 text, producing a JavaScript\n  // data structure. It is a simple, recursive descent parser. It does not use\n  // eval or regular expressions, so it can be used as a model for implementing\n  // a JSON5 parser in other languages.\n\n  // We are defining the function inside of another function to avoid creating\n  // global variables.\n\n  var at, // The index of the current character\n  ch, // The current character\n  escapee = {\n    \"'\": \"'\",\n    '\"': '\"',\n    '\\\\': '\\\\',\n    '/': '/',\n    '\\n': '', // Replace escaped newlines in strings w/ empty string\n    b: '\\b',\n    f: '\\f',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t' },\n\n  ws = [\n  ' ',\n  '\\t',\n  '\\r',\n  '\\n',\n  '\\v',\n  '\\f',\n  '\\xA0',\n  '\\uFEFF'],\n\n  text,\n\n  error = function (m) {\n\n    // Call error when something is wrong.\n\n    var error = new SyntaxError();\n    error.message = m;\n    error.at = at;\n    error.text = text;\n    throw error;\n  },\n\n  next = function (c) {\n\n    // If a c parameter is provided, verify that it matches the current character.\n\n    if (c && c !== ch) {\n      error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n    }\n\n    // Get the next character. When there are no more characters,\n    // return the empty string.\n\n    ch = text.charAt(at);\n    at += 1;\n    return ch;\n  },\n\n  peek = function () {\n\n    // Get the next character without consuming it or\n    // assigning it to the ch varaible.\n\n    return text.charAt(at);\n  },\n\n  identifier = function () {\n\n    // Parse an identifier. Normally, reserved words are disallowed here, but we\n    // only use this for unquoted object keys, where reserved words are allowed,\n    // so we don't check for those here. References:\n    // - http://es5.github.com/#x7.6\n    // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables\n    // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm\n    // TODO Identifiers can have Unicode \"letters\" in them; add support for those.\n\n    var key = ch;\n\n    // Identifiers must start with a letter, _ or $.\n    if (ch !== '_' && ch !== '$' && (\n    ch < 'a' || ch > 'z') && (\n    ch < 'A' || ch > 'Z')) {\n      error(\"Bad identifier\");\n    }\n\n    // Subsequent characters can contain digits.\n    while (next() && (\n    ch === '_' || ch === '$' ||\n    ch >= 'a' && ch <= 'z' ||\n    ch >= 'A' && ch <= 'Z' ||\n    ch >= '0' && ch <= '9')) {\n      key += ch;\n    }\n\n    return key;\n  },\n\n  number = function () {\n\n    // Parse a number value.\n\n    var number,\n    sign = '',\n    string = '',\n    base = 10;\n\n    if (ch === '-' || ch === '+') {\n      sign = ch;\n      next(ch);\n    }\n\n    // support for Infinity (could tweak to allow other words):\n    if (ch === 'I') {\n      number = word();\n      if (typeof number !== 'number' || isNaN(number)) {\n        error('Unexpected word for number');\n      }\n      return sign === '-' ? -number : number;\n    }\n\n    // support for NaN\n    if (ch === 'N') {\n      number = word();\n      if (!isNaN(number)) {\n        error('expected word to be NaN');\n      }\n      // ignore sign as -NaN also is NaN\n      return number;\n    }\n\n    if (ch === '0') {\n      string += ch;\n      next();\n      if (ch === 'x' || ch === 'X') {\n        string += ch;\n        next();\n        base = 16;\n      } else if (ch >= '0' && ch <= '9') {\n        error('Octal literal');\n      }\n    }\n\n    switch (base) {\n      case 10:\n        while (ch >= '0' && ch <= '9') {\n          string += ch;\n          next();\n        }\n        if (ch === '.') {\n          string += '.';\n          while (next() && ch >= '0' && ch <= '9') {\n            string += ch;\n          }\n        }\n        if (ch === 'e' || ch === 'E') {\n          string += ch;\n          next();\n          if (ch === '-' || ch === '+') {\n            string += ch;\n            next();\n          }\n          while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n          }\n        }\n        break;\n      case 16:\n        while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {\n          string += ch;\n          next();\n        }\n        break;}\n\n\n    if (sign === '-') {\n      number = -string;\n    } else {\n      number = +string;\n    }\n\n    if (!isFinite(number)) {\n      error(\"Bad number\");\n    } else {\n      return number;\n    }\n  },\n\n  string = function () {\n\n    // Parse a string value.\n\n    var hex,\n    i,\n    string = '',\n    delim, // double quote or single quote\n    uffff;\n\n    // When parsing for string values, we must look for ' or \" and \\ characters.\n\n    if (ch === '\"' || ch === \"'\") {\n      delim = ch;\n      while (next()) {\n        if (ch === delim) {\n          next();\n          return string;\n        } else if (ch === '\\\\') {\n          next();\n          if (ch === 'u') {\n            uffff = 0;\n            for (i = 0; i < 4; i += 1) {\n              hex = parseInt(next(), 16);\n              if (!isFinite(hex)) {\n                break;\n              }\n              uffff = uffff * 16 + hex;\n            }\n            string += String.fromCharCode(uffff);\n          } else if (ch === '\\r') {\n            if (peek() === '\\n') {\n              next();\n            }\n          } else if (typeof escapee[ch] === 'string') {\n            string += escapee[ch];\n          } else {\n            break;\n          }\n        } else if (ch === '\\n') {\n          // unescaped newlines are invalid; see:\n          // https://github.com/aseemk/json5/issues/24\n          // TODO this feels special-cased; are there other\n          // invalid unescaped chars?\n          break;\n        } else {\n          string += ch;\n        }\n      }\n    }\n    error(\"Bad string\");\n  },\n\n  inlineComment = function () {\n\n    // Skip an inline comment, assuming this is one. The current character should\n    // be the second / character in the // pair that begins this inline comment.\n    // To finish the inline comment, we look for a newline or the end of the text.\n\n    if (ch !== '/') {\n      error(\"Not an inline comment\");\n    }\n\n    do {\n      next();\n      if (ch === '\\n' || ch === '\\r') {\n        next();\n        return;\n      }\n    } while (ch);\n  },\n\n  blockComment = function () {\n\n    // Skip a block comment, assuming this is one. The current character should be\n    // the * character in the /* pair that begins this block comment.\n    // To finish the block comment, we look for an ending */ pair of characters,\n    // but we also watch for the end of text before the comment is terminated.\n\n    if (ch !== '*') {\n      error(\"Not a block comment\");\n    }\n\n    do {\n      next();\n      while (ch === '*') {\n        next('*');\n        if (ch === '/') {\n          next('/');\n          return;\n        }\n      }\n    } while (ch);\n\n    error(\"Unterminated block comment\");\n  },\n\n  comment = function () {\n\n    // Skip a comment, whether inline or block-level, assuming this is one.\n    // Comments always begin with a / character.\n\n    if (ch !== '/') {\n      error(\"Not a comment\");\n    }\n\n    next('/');\n\n    if (ch === '/') {\n      inlineComment();\n    } else if (ch === '*') {\n      blockComment();\n    } else {\n      error(\"Unrecognized comment\");\n    }\n  },\n\n  white = function () {\n\n    // Skip whitespace and comments.\n    // Note that we're detecting comments by only a single / character.\n    // This works since regular expressions are not valid JSON(5), but this will\n    // break if there are other valid values that begin with a / character!\n\n    while (ch) {\n      if (ch === '/') {\n        comment();\n      } else if (ws.indexOf(ch) >= 0) {\n        next();\n      } else {\n        return;\n      }\n    }\n  },\n\n  word = function () {\n\n    // true, false, or null.\n\n    switch (ch) {\n      case 't':\n        next('t');\n        next('r');\n        next('u');\n        next('e');\n        return true;\n      case 'f':\n        next('f');\n        next('a');\n        next('l');\n        next('s');\n        next('e');\n        return false;\n      case 'n':\n        next('n');\n        next('u');\n        next('l');\n        next('l');\n        return null;\n      case 'I':\n        next('I');\n        next('n');\n        next('f');\n        next('i');\n        next('n');\n        next('i');\n        next('t');\n        next('y');\n        return Infinity;\n      case 'N':\n        next('N');\n        next('a');\n        next('N');\n        return NaN;}\n\n    error(\"Unexpected '\" + ch + \"'\");\n  },\n\n  value, // Place holder for the value function.\n\n  array = function () {\n\n    // Parse an array value.\n\n    var array = [];\n\n    if (ch === '[') {\n      next('[');\n      white();\n      while (ch) {\n        if (ch === ']') {\n          next(']');\n          return array; // Potentially empty array\n        }\n        // ES5 allows omitting elements in arrays, e.g. [,] and\n        // [,null]. We don't allow this in JSON5.\n        if (ch === ',') {\n          error(\"Missing array element\");\n        } else {\n          array.push(value());\n        }\n        white();\n        // If there's no comma after this value, this needs to\n        // be the end of the array.\n        if (ch !== ',') {\n          next(']');\n          return array;\n        }\n        next(',');\n        white();\n      }\n    }\n    error(\"Bad array\");\n  },\n\n  object = function () {\n\n    // Parse an object value.\n\n    var key,\n    object = {};\n\n    if (ch === '{') {\n      next('{');\n      white();\n      while (ch) {\n        if (ch === '}') {\n          next('}');\n          return object; // Potentially empty object\n        }\n\n        // Keys can be unquoted. If they are, they need to be\n        // valid JS identifiers.\n        if (ch === '\"' || ch === \"'\") {\n          key = string();\n        } else {\n          key = identifier();\n        }\n\n        white();\n        next(':');\n        object[key] = value();\n        white();\n        // If there's no comma after this pair, this needs to be\n        // the end of the object.\n        if (ch !== ',') {\n          next('}');\n          return object;\n        }\n        next(',');\n        white();\n      }\n    }\n    error(\"Bad object\");\n  };\n\n  value = function () {\n\n    // Parse a JSON value. It could be an object, an array, a string, a number,\n    // or a word.\n\n    white();\n    switch (ch) {\n      case '{':\n        return object();\n      case '[':\n        return array();\n      case '\"':\n      case \"'\":\n        return string();\n      case '-':\n      case '+':\n      case '.':\n        return number();\n      default:\n        return ch >= '0' && ch <= '9' ? number() : word();}\n\n  };\n\n  // Return the json_parse function. It will have access to all of the above\n  // functions and variables.\n\n  return function (source, reviver) {\n    var result;\n\n    text = String(source);\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n      error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? function walk(holder, key) {\n      var k,v,value = holder[key];\n      if (value && typeof value === 'object') {\n        for (k in value) {\n          if (Object.prototype.hasOwnProperty.call(value, k)) {\n            v = walk(value, k);\n            if (v !== undefined) {\n              value[k] = v;\n            } else {\n              delete value[k];\n            }\n          }\n        }\n      }\n      return reviver.call(holder, key, value);\n    }({ '': result }, '') : result;\n  };\n}();\n\n// JSON5 stringify will not quote keys where appropriate\nJSON5.stringify = function (obj, replacer, space) {\n  if (replacer && typeof replacer !== \"function\" && !isArray(replacer)) {\n    throw new Error('Replacer must be a function or an array');\n  }\n  var getReplacedValueOrUndefined = function (holder, key, isTopLevel) {\n    var value = holder[key];\n\n    // Replace the value with its toJSON value first, if possible\n    if (value && value.toJSON && typeof value.toJSON === \"function\") {\n      value = value.toJSON();\n    }\n\n    // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for\n    // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).\n    if (typeof replacer === \"function\") {\n      return replacer.call(holder, key, value);\n    } else if (replacer) {\n      if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {\n        return value;\n      } else {\n        return undefined;\n      }\n    } else {\n      return value;\n    }\n  };\n\n  function isWordChar(char) {\n    return char >= 'a' && char <= 'z' ||\n    char >= 'A' && char <= 'Z' ||\n    char >= '0' && char <= '9' ||\n    char === '_' || char === '$';\n  }\n\n  function isWordStart(char) {\n    return char >= 'a' && char <= 'z' ||\n    char >= 'A' && char <= 'Z' ||\n    char === '_' || char === '$';\n  }\n\n  function isWord(key) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n    if (!isWordStart(key[0])) {\n      return false;\n    }\n    var i = 1,length = key.length;\n    while (i < length) {\n      if (!isWordChar(key[i])) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  }\n\n  // export for use in tests\n  JSON5.isWord = isWord;\n\n  // polyfills\n  function isArray(obj) {\n    if (Array.isArray) {\n      return Array.isArray(obj);\n    } else {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    }\n  }\n\n  function isDate(obj) {\n    return Object.prototype.toString.call(obj) === '[object Date]';\n  }\n\n  isNaN = isNaN || function (val) {\n    return typeof val === 'number' && val !== val;\n  };\n\n  var objStack = [];\n  function checkForCircular(obj) {\n    for (var i = 0; i < objStack.length; i++) {\n      if (objStack[i] === obj) {\n        throw new TypeError(\"Converting circular structure to JSON\");\n      }\n    }\n  }\n\n  function makeIndent(str, num, noNewLine) {\n    if (!str) {\n      return \"\";\n    }\n    // indentation no more than 10 chars\n    if (str.length > 10) {\n      str = str.substring(0, 10);\n    }\n\n    var indent = noNewLine ? \"\" : \"\\n\";\n    for (var i = 0; i < num; i++) {\n      indent += str;\n    }\n\n    return indent;\n  }\n\n  var indentStr;\n  if (space) {\n    if (typeof space === \"string\") {\n      indentStr = space;\n    } else if (typeof space === \"number\" && space >= 0) {\n      indentStr = makeIndent(\" \", space, true);\n    } else {\n      // ignore space parameter\n    }\n  }\n\n  // Copied from Crokford's implementation of JSON\n  // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195\n  // Begin\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n  escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n  meta = { // table of character substitutions\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\' };\n\n  function escapeString(string) {\n\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n      var c = meta[a];\n      return typeof c === 'string' ?\n      c :\n      '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n  }\n  // End\n\n  function internalStringify(holder, key, isTopLevel) {\n    var buffer, res;\n\n    // Replace the value, if necessary\n    var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);\n\n    if (obj_part && !isDate(obj_part)) {\n      // unbox objects\n      // don't unbox dates, since will turn it into number\n      obj_part = obj_part.valueOf();\n    }\n    switch (typeof obj_part) {\n      case \"boolean\":\n        return obj_part.toString();\n\n      case \"number\":\n        if (isNaN(obj_part) || !isFinite(obj_part)) {\n          return \"null\";\n        }\n        return obj_part.toString();\n\n      case \"string\":\n        return escapeString(obj_part.toString());\n\n      case \"object\":\n        if (obj_part === null) {\n          return \"null\";\n        } else if (isArray(obj_part)) {\n          checkForCircular(obj_part);\n          buffer = \"[\";\n          objStack.push(obj_part);\n\n          for (var i = 0; i < obj_part.length; i++) {\n            res = internalStringify(obj_part, i, false);\n            buffer += makeIndent(indentStr, objStack.length);\n            if (res === null || typeof res === \"undefined\") {\n              buffer += \"null\";\n            } else {\n              buffer += res;\n            }\n            if (i < obj_part.length - 1) {\n              buffer += \",\";\n            } else if (indentStr) {\n              buffer += \"\\n\";\n            }\n          }\n          objStack.pop();\n          buffer += makeIndent(indentStr, objStack.length, true) + \"]\";\n        } else {\n          checkForCircular(obj_part);\n          buffer = \"{\";\n          var nonEmpty = false;\n          objStack.push(obj_part);\n          for (var prop in obj_part) {\n            if (obj_part.hasOwnProperty(prop)) {\n              var value = internalStringify(obj_part, prop, false);\n              isTopLevel = false;\n              if (typeof value !== \"undefined\" && value !== null) {\n                buffer += makeIndent(indentStr, objStack.length);\n                nonEmpty = true;\n                var key = isWord(prop) ? prop : escapeString(prop);\n                buffer += key + \":\" + (indentStr ? ' ' : '') + value + \",\";\n              }\n            }\n          }\n          objStack.pop();\n          if (nonEmpty) {\n            buffer = buffer.substring(0, buffer.length - 1) + makeIndent(indentStr, objStack.length) + \"}\";\n          } else {\n            buffer = '{}';\n          }\n        }\n        return buffer;\n      default:\n        // functions and undefined should be ignored\n        return undefined;}\n\n  }\n\n  // special case...when undefined is used inside of\n  // a compound object/array, return null.\n  // but when top-level, return undefined\n  var topLevelHolder = { \"\": obj };\n  if (obj === undefined) {\n    return getReplacedValueOrUndefined(topLevelHolder, '', true);\n  }\n  return internalStringify(topLevelHolder, '', true);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528222203
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src/hmrConfig.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src/hmrConfig.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src/hmrConfig.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src/hmrConfig.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/src",
        "sourceFileName": "hmrConfig.js"
      }
    },
    "ast": null,
    "code": "/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+javascript_foundation\n * \n * @format\n */\n\n'use strict';\n\n// imported from: babel-preset-react-native/configs/hmr\n\nconst path = require('path');\nconst hmrTransform = 'react-transform-hmr/lib/index.js';\nconst transformPath = require.resolve(hmrTransform);\n\nfunction makeHMRConfig(options, filename) {\n  // We need to get a _path_ to transform relative to/from.\n  // Either take the filename that is passed on or use the transform as base.\n  let relativePath = filename ?\n  // packager can't handle absolute paths\n  './' + path.relative(path.dirname(filename), transformPath) :\n  hmrTransform;\n\n  // Fix the module path to use '/' on Windows.\n  if (path.sep === '\\\\') {\n    relativePath = relativePath.replace(/\\\\/g, '/');\n  }\n\n  return {\n    plugins: [\n    [\n    // This is a Babel 7 compatible fork\n    // of https://github.com/gaearon/babel-plugin-react-transform\n    require('metro-babel7-plugin-react-transform'),\n    {\n      transforms: [\n      {\n        transform: relativePath,\n        imports: ['react'],\n        locals: ['module'] }] }]] };\n\n\n\n\n\n\n}\n\nmodule.exports = makeHMRConfig;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhtckNvbmZpZy5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImhtclRyYW5zZm9ybSIsInRyYW5zZm9ybVBhdGgiLCJyZXNvbHZlIiwibWFrZUhNUkNvbmZpZyIsIm9wdGlvbnMiLCJmaWxlbmFtZSIsInJlbGF0aXZlUGF0aCIsInJlbGF0aXZlIiwiZGlybmFtZSIsInNlcCIsInJlcGxhY2UiLCJwbHVnaW5zIiwidHJhbnNmb3JtcyIsInRyYW5zZm9ybSIsImltcG9ydHMiLCJsb2NhbHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUFXQTs7QUFFQTs7QUFFQSxNQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU1DLGVBQWUsa0NBQXJCO0FBQ0EsTUFBTUMsZ0JBQWdCRixRQUFRRyxPQUFSLENBQWdCRixZQUFoQixDQUF0Qjs7QUFFQSxTQUFTRyxhQUFULENBQXVCQyxPQUF2QixFQUFnQ0MsUUFBaEMsRUFBMEM7QUFDeEM7QUFDQTtBQUNBLE1BQUlDLGVBQWVEO0FBQ25CO0FBQ0EsU0FBT1AsS0FBS1MsUUFBTCxDQUFjVCxLQUFLVSxPQUFMLENBQWFILFFBQWIsQ0FBZCxFQUFzQ0osYUFBdEMsQ0FGWTtBQUduQkQsY0FIQTs7QUFLQTtBQUNBLE1BQUlGLEtBQUtXLEdBQUwsS0FBYSxJQUFqQixFQUF1QjtBQUNyQkgsbUJBQWVBLGFBQWFJLE9BQWIsQ0FBcUIsS0FBckIsRUFBNEIsR0FBNUIsQ0FBZjtBQUNEOztBQUVELFNBQU87QUFDTEMsYUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBWixZQUFRLHFDQUFSLENBSEE7QUFJQTtBQUNFYSxrQkFBWTtBQUNaO0FBQ0VDLG1CQUFXUCxZQURiO0FBRUVRLGlCQUFTLENBQUMsT0FBRCxDQUZYO0FBR0VDLGdCQUFRLENBQUMsUUFBRCxDQUhWLEVBRFksQ0FEZCxFQUpBLENBRFMsQ0FESixFQUFQOzs7Ozs7O0FBa0JEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCZCxhQUFqQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK2phdmFzY3JpcHRfZm91bmRhdGlvblxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBpbXBvcnRlZCBmcm9tOiBiYWJlbC1wcmVzZXQtcmVhY3QtbmF0aXZlL2NvbmZpZ3MvaG1yXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBobXJUcmFuc2Zvcm0gPSAncmVhY3QtdHJhbnNmb3JtLWhtci9saWIvaW5kZXguanMnO1xuY29uc3QgdHJhbnNmb3JtUGF0aCA9IHJlcXVpcmUucmVzb2x2ZShobXJUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBtYWtlSE1SQ29uZmlnKG9wdGlvbnMsIGZpbGVuYW1lKSB7XG4gIC8vIFdlIG5lZWQgdG8gZ2V0IGEgX3BhdGhfIHRvIHRyYW5zZm9ybSByZWxhdGl2ZSB0by9mcm9tLlxuICAvLyBFaXRoZXIgdGFrZSB0aGUgZmlsZW5hbWUgdGhhdCBpcyBwYXNzZWQgb24gb3IgdXNlIHRoZSB0cmFuc2Zvcm0gYXMgYmFzZS5cbiAgbGV0IHJlbGF0aXZlUGF0aCA9IGZpbGVuYW1lID9cbiAgLy8gcGFja2FnZXIgY2FuJ3QgaGFuZGxlIGFic29sdXRlIHBhdGhzXG4gICcuLycgKyBwYXRoLnJlbGF0aXZlKHBhdGguZGlybmFtZShmaWxlbmFtZSksIHRyYW5zZm9ybVBhdGgpIDpcbiAgaG1yVHJhbnNmb3JtO1xuXG4gIC8vIEZpeCB0aGUgbW9kdWxlIHBhdGggdG8gdXNlICcvJyBvbiBXaW5kb3dzLlxuICBpZiAocGF0aC5zZXAgPT09ICdcXFxcJykge1xuICAgIHJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlUGF0aC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtcbiAgICBbXG4gICAgLy8gVGhpcyBpcyBhIEJhYmVsIDcgY29tcGF0aWJsZSBmb3JrXG4gICAgLy8gb2YgaHR0cHM6Ly9naXRodWIuY29tL2dhZWFyb24vYmFiZWwtcGx1Z2luLXJlYWN0LXRyYW5zZm9ybVxuICAgIHJlcXVpcmUoJ21ldHJvLWJhYmVsNy1wbHVnaW4tcmVhY3QtdHJhbnNmb3JtJyksXG4gICAge1xuICAgICAgdHJhbnNmb3JtczogW1xuICAgICAge1xuICAgICAgICB0cmFuc2Zvcm06IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgaW1wb3J0czogWydyZWFjdCddLFxuICAgICAgICBsb2NhbHM6IFsnbW9kdWxlJ10gfV0gfV1dIH07XG5cblxuXG5cblxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFrZUhNUkNvbmZpZzsiXX0=",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528220043
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/index.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/index.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/index.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/index.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.Plugin = Plugin;\nObject.defineProperty(exports, \"File\", {\n  enumerable: true,\n  get: function get() {\n    return _file.default;\n  } });\n\nObject.defineProperty(exports, \"buildExternalHelpers\", {\n  enumerable: true,\n  get: function get() {\n    return _buildExternalHelpers.default;\n  } });\n\nObject.defineProperty(exports, \"resolvePlugin\", {\n  enumerable: true,\n  get: function get() {\n    return _files.resolvePlugin;\n  } });\n\nObject.defineProperty(exports, \"resolvePreset\", {\n  enumerable: true,\n  get: function get() {\n    return _files.resolvePreset;\n  } });\n\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function get() {\n    return _package.version;\n  } });\n\nObject.defineProperty(exports, \"getEnv\", {\n  enumerable: true,\n  get: function get() {\n    return _environment.getEnv;\n  } });\n\nObject.defineProperty(exports, \"traverse\", {\n  enumerable: true,\n  get: function get() {\n    return _traverse().default;\n  } });\n\nObject.defineProperty(exports, \"template\", {\n  enumerable: true,\n  get: function get() {\n    return _template().default;\n  } });\n\nObject.defineProperty(exports, \"loadPartialConfig\", {\n  enumerable: true,\n  get: function get() {\n    return _config.loadPartialConfig;\n  } });\n\nObject.defineProperty(exports, \"loadOptions\", {\n  enumerable: true,\n  get: function get() {\n    return _config.loadOptions;\n  } });\n\nObject.defineProperty(exports, \"OptionManager\", {\n  enumerable: true,\n  get: function get() {\n    return _config.OptionManager;\n  } });\n\nObject.defineProperty(exports, \"createConfigItem\", {\n  enumerable: true,\n  get: function get() {\n    return _item.createConfigItem;\n  } });\n\nObject.defineProperty(exports, \"transform\", {\n  enumerable: true,\n  get: function get() {\n    return _transform.default;\n  } });\n\nObject.defineProperty(exports, \"transformSync\", {\n  enumerable: true,\n  get: function get() {\n    return _transformSync.default;\n  } });\n\nObject.defineProperty(exports, \"transformFile\", {\n  enumerable: true,\n  get: function get() {\n    return _transformFile.default;\n  } });\n\nObject.defineProperty(exports, \"transformFileSync\", {\n  enumerable: true,\n  get: function get() {\n    return _transformFileSync.default;\n  } });\n\nObject.defineProperty(exports, \"transformFromAst\", {\n  enumerable: true,\n  get: function get() {\n    return _transformAst.default;\n  } });\n\nObject.defineProperty(exports, \"transformFromAstSync\", {\n  enumerable: true,\n  get: function get() {\n    return _transformAstSync.default;\n  } });\n\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function get() {\n    return _parse.default;\n  } });\n\nexports.types = exports.DEFAULT_EXTENSIONS = void 0;\n\nvar _file = _interopRequireDefault(require(\"./transformation/file/file\"));\n\nvar _buildExternalHelpers = _interopRequireDefault(require(\"./tools/build-external-helpers\"));\n\nvar _files = require(\"./config/files\");\n\nvar _package = require(\"../package.json\");\n\nvar _environment = require(\"./config/helpers/environment\");\n\nfunction _types() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  _types = function _types() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"types\", {\n  enumerable: true,\n  get: function get() {\n    return _types();\n  } });\n\n\nfunction _traverse() {\n  const data = _interopRequireDefault(require(\"@babel/traverse\"));\n\n  _traverse = function _traverse() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  const data = _interopRequireDefault(require(\"@babel/template\"));\n\n  _template = function _template() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _config = require(\"./config\");\n\nvar _item = require(\"./config/item\");\n\nvar _transform = _interopRequireDefault(require(\"./transform\"));\n\nvar _transformSync = _interopRequireDefault(require(\"./transform-sync\"));\n\nvar _transformFile = _interopRequireDefault(require(\"./transform-file\"));\n\nvar _transformFileSync = _interopRequireDefault(require(\"./transform-file-sync\"));\n\nvar _transformAst = _interopRequireDefault(require(\"./transform-ast\"));\n\nvar _transformAstSync = _interopRequireDefault(require(\"./transform-ast-sync\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nfunction _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction Plugin(alias) {\n  throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);\n}\n\nconst DEFAULT_EXTENSIONS = Object.freeze([\".js\", \".jsx\", \".es6\", \".es\", \".mjs\"]);\nexports.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/file.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/file.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/file.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/file.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file",
        "sourceFileName": "file.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = void 0;\n\nfunction helpers() {\n  const data = _interopRequireWildcard(require(\"@babel/helpers\"));\n\n  helpers = function helpers() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _traverse() {\n  const data = _interopRequireWildcard(require(\"@babel/traverse\"));\n\n  _traverse = function _traverse() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n\n  _codeFrame = function _codeFrame() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function t() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}\n\nconst errorVisitor = {\n  enter(path, state) {\n    const loc = path.node.loc;\n\n    if (loc) {\n      state.loc = loc;\n      path.stop();\n    }\n  } };\n\n\n\nclass File {\n  constructor(options, {\n    code,\n    ast,\n    shebang,\n    inputMap })\n  {\n    this._map = new Map();\n    this.declarations = {};\n    this.path = null;\n    this.ast = {};\n    this.metadata = {};\n    this.hub = new (_traverse().Hub)(this);\n    this.code = \"\";\n    this.shebang = \"\";\n    this.inputMap = null;\n    this.opts = options;\n    this.code = code;\n    this.ast = ast;\n    this.shebang = shebang;\n    this.inputMap = inputMap;\n    this.path = _traverse().NodePath.get({\n      hub: this.hub,\n      parentPath: null,\n      parent: this.ast,\n      container: this.ast,\n      key: \"program\" }).\n    setContext();\n    this.scope = this.path.scope;\n  }\n\n  set(key, val) {\n    this._map.set(key, val);\n  }\n\n  get(key) {\n    return this._map.get(key);\n  }\n\n  has(key) {\n    return this._map.has(key);\n  }\n\n  getModuleName() {\n    const _this$opts = this.opts,\n    filename = _this$opts.filename,\n    _this$opts$filenameRe = _this$opts.filenameRelative,\n    filenameRelative = _this$opts$filenameRe === void 0 ? filename : _this$opts$filenameRe,\n    moduleId = _this$opts.moduleId,\n    _this$opts$moduleIds = _this$opts.moduleIds,\n    moduleIds = _this$opts$moduleIds === void 0 ? !!moduleId : _this$opts$moduleIds,\n    getModuleId = _this$opts.getModuleId,\n    sourceRootTmp = _this$opts.sourceRoot,\n    _this$opts$moduleRoot = _this$opts.moduleRoot,\n    moduleRoot = _this$opts$moduleRoot === void 0 ? sourceRootTmp : _this$opts$moduleRoot,\n    _this$opts$sourceRoot = _this$opts.sourceRoot,\n    sourceRoot = _this$opts$sourceRoot === void 0 ? moduleRoot : _this$opts$sourceRoot;\n    if (!moduleIds) return null;\n\n    if (moduleId != null && !getModuleId) {\n      return moduleId;\n    }\n\n    let moduleName = moduleRoot != null ? moduleRoot + \"/\" : \"\";\n\n    if (filenameRelative) {\n      const sourceRootReplacer = sourceRoot != null ? new RegExp(\"^\" + sourceRoot + \"/?\") : \"\";\n      moduleName += filenameRelative.replace(sourceRootReplacer, \"\").replace(/\\.(\\w*?)$/, \"\");\n    }\n\n    moduleName = moduleName.replace(/\\\\/g, \"/\");\n\n    if (getModuleId) {\n      return getModuleId(moduleName) || moduleName;\n    } else {\n      return moduleName;\n    }\n  }\n\n  resolveModuleSource(source) {\n    return source;\n  }\n\n  addImport() {\n    throw new Error(\"This API has been removed. If you're looking for this \" + \"functionality in Babel 7, you should import the \" + \"'@babel/helper-module-imports' module and use the functions exposed \" + \" from that module, such as 'addNamed' or 'addDefault'.\");\n  }\n\n  addHelper(name) {\n    const declar = this.declarations[name];\n    if (declar) return t().cloneNode(declar);\n    const generator = this.get(\"helperGenerator\");\n    const runtime = this.get(\"helpersNamespace\");\n\n    if (generator) {\n      const res = generator(name);\n      if (res) return res;\n    } else if (runtime) {\n      return t().memberExpression(t().cloneNode(runtime), t().identifier(name));\n    }\n\n    const uid = this.declarations[name] = this.scope.generateUidIdentifier(name);\n    const dependencies = {};\n\n    for (var _iterator = helpers().getDependencies(name), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      const dep = _ref;\n      dependencies[dep] = this.addHelper(dep);\n    }\n\n    const _helpers$get = helpers().get(name, dep => dependencies[dep], uid, Object.keys(this.scope.getAllBindings())),\n    nodes = _helpers$get.nodes,\n    globals = _helpers$get.globals;\n\n    globals.forEach(name => {\n      if (this.path.scope.hasBinding(name, true)) {\n        this.path.scope.rename(name);\n      }\n    });\n    nodes.forEach(node => {\n      node._compact = true;\n    });\n    this.path.unshiftContainer(\"body\", nodes);\n    this.path.get(\"body\").forEach(path => {\n      if (nodes.indexOf(path.node) === -1) return;\n      if (path.isVariableDeclaration()) this.scope.registerDeclaration(path);\n    });\n    return uid;\n  }\n\n  addTemplateObject() {\n    throw new Error(\"This function has been moved into the template literal transform itself.\");\n  }\n\n  buildCodeFrameError(node, msg, Error = SyntaxError) {\n    let loc = node && (node.loc || node._loc);\n    msg = `${this.opts.filename}: ${msg}`;\n\n    if (!loc && node) {\n      const state = {\n        loc: null };\n\n      (0, _traverse().default)(node, errorVisitor, this.scope, state);\n      loc = state.loc;\n      let txt = \"This is an error on an internal node. Probably an internal error.\";\n      if (loc) txt += \" Location has been estimated.\";\n      msg += ` (${txt})`;\n    }\n\n    if (loc) {\n      const _this$opts$highlightC = this.opts.highlightCode,\n      highlightCode = _this$opts$highlightC === void 0 ? true : _this$opts$highlightC;\n      msg += \"\\n\" + (0, _codeFrame().codeFrameColumns)(this.code, {\n        start: {\n          line: loc.start.line,\n          column: loc.start.column + 1 } },\n\n      {\n        highlightCode });\n\n    }\n\n    return new Error(msg);\n  }}\n\n\n\nexports.default = File;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGUuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiaGVscGVycyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfdHJhdmVyc2UiLCJfY29kZUZyYW1lIiwidCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJuZXdPYmoiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0Iiwic2V0IiwiZXJyb3JWaXNpdG9yIiwiZW50ZXIiLCJwYXRoIiwic3RhdGUiLCJsb2MiLCJub2RlIiwic3RvcCIsIkZpbGUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJjb2RlIiwiYXN0Iiwic2hlYmFuZyIsImlucHV0TWFwIiwiX21hcCIsIk1hcCIsImRlY2xhcmF0aW9ucyIsIm1ldGFkYXRhIiwiaHViIiwiSHViIiwib3B0cyIsIk5vZGVQYXRoIiwicGFyZW50UGF0aCIsInBhcmVudCIsImNvbnRhaW5lciIsInNldENvbnRleHQiLCJzY29wZSIsInZhbCIsImhhcyIsImdldE1vZHVsZU5hbWUiLCJfdGhpcyRvcHRzIiwiZmlsZW5hbWUiLCJfdGhpcyRvcHRzJGZpbGVuYW1lUmUiLCJmaWxlbmFtZVJlbGF0aXZlIiwibW9kdWxlSWQiLCJfdGhpcyRvcHRzJG1vZHVsZUlkcyIsIm1vZHVsZUlkcyIsImdldE1vZHVsZUlkIiwic291cmNlUm9vdFRtcCIsInNvdXJjZVJvb3QiLCJfdGhpcyRvcHRzJG1vZHVsZVJvb3QiLCJtb2R1bGVSb290IiwiX3RoaXMkb3B0cyRzb3VyY2VSb290IiwibW9kdWxlTmFtZSIsInNvdXJjZVJvb3RSZXBsYWNlciIsIlJlZ0V4cCIsInJlcGxhY2UiLCJyZXNvbHZlTW9kdWxlU291cmNlIiwic291cmNlIiwiYWRkSW1wb3J0IiwiRXJyb3IiLCJhZGRIZWxwZXIiLCJuYW1lIiwiZGVjbGFyIiwiY2xvbmVOb2RlIiwiZ2VuZXJhdG9yIiwicnVudGltZSIsInJlcyIsIm1lbWJlckV4cHJlc3Npb24iLCJpZGVudGlmaWVyIiwidWlkIiwiZ2VuZXJhdGVVaWRJZGVudGlmaWVyIiwiZGVwZW5kZW5jaWVzIiwiX2l0ZXJhdG9yIiwiZ2V0RGVwZW5kZW5jaWVzIiwiX2lzQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3JlZiIsImxlbmd0aCIsIm5leHQiLCJkb25lIiwiZGVwIiwiX2hlbHBlcnMkZ2V0Iiwia2V5cyIsImdldEFsbEJpbmRpbmdzIiwibm9kZXMiLCJnbG9iYWxzIiwiZm9yRWFjaCIsImhhc0JpbmRpbmciLCJyZW5hbWUiLCJfY29tcGFjdCIsInVuc2hpZnRDb250YWluZXIiLCJpbmRleE9mIiwiaXNWYXJpYWJsZURlY2xhcmF0aW9uIiwicmVnaXN0ZXJEZWNsYXJhdGlvbiIsImFkZFRlbXBsYXRlT2JqZWN0IiwiYnVpbGRDb2RlRnJhbWVFcnJvciIsIm1zZyIsIlN5bnRheEVycm9yIiwiX2xvYyIsInR4dCIsIl90aGlzJG9wdHMkaGlnaGxpZ2h0QyIsImhpZ2hsaWdodENvZGUiLCJjb2RlRnJhbWVDb2x1bW5zIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU8sSUFEb0MsRUFBN0M7O0FBR0FELFFBQVFFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxTQUFTQyxPQUFULEdBQW1CO0FBQ2pCLFFBQU1DLE9BQU9DLHdCQUF3QkMsUUFBUSxnQkFBUixDQUF4QixDQUFiOztBQUVBSCxZQUFVLFNBQVNBLE9BQVQsR0FBbUI7QUFDM0IsV0FBT0MsSUFBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT0EsSUFBUDtBQUNEOztBQUVELFNBQVNHLFNBQVQsR0FBcUI7QUFDbkIsUUFBTUgsT0FBT0Msd0JBQXdCQyxRQUFRLGlCQUFSLENBQXhCLENBQWI7O0FBRUFDLGNBQVksU0FBU0EsU0FBVCxHQUFxQjtBQUMvQixXQUFPSCxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksVUFBVCxHQUFzQjtBQUNwQixRQUFNSixPQUFPRSxRQUFRLG1CQUFSLENBQWI7O0FBRUFFLGVBQWEsU0FBU0EsVUFBVCxHQUFzQjtBQUNqQyxXQUFPSixJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssQ0FBVCxHQUFhO0FBQ1gsUUFBTUwsT0FBT0Msd0JBQXdCQyxRQUFRLGNBQVIsQ0FBeEIsQ0FBYjs7QUFFQUcsTUFBSSxTQUFTQSxDQUFULEdBQWE7QUFDZixXQUFPTCxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsdUJBQVQsQ0FBaUNLLEdBQWpDLEVBQXNDLENBQUUsSUFBSUEsT0FBT0EsSUFBSUMsVUFBZixFQUEyQixDQUFFLE9BQU9ELEdBQVAsQ0FBYSxDQUExQyxNQUFnRCxDQUFFLElBQUlFLFNBQVMsRUFBYixDQUFpQixJQUFJRixPQUFPLElBQVgsRUFBaUIsQ0FBRSxLQUFLLElBQUlHLEdBQVQsSUFBZ0JILEdBQWhCLEVBQXFCLENBQUUsSUFBSVosT0FBT2dCLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ04sR0FBckMsRUFBMENHLEdBQTFDLENBQUosRUFBb0QsQ0FBRSxJQUFJSSxPQUFPbkIsT0FBT0MsY0FBUCxJQUF5QkQsT0FBT29CLHdCQUFoQyxHQUEyRHBCLE9BQU9vQix3QkFBUCxDQUFnQ1IsR0FBaEMsRUFBcUNHLEdBQXJDLENBQTNELEdBQXVHLEVBQWxILENBQXNILElBQUlJLEtBQUtFLEdBQUwsSUFBWUYsS0FBS0csR0FBckIsRUFBMEIsQ0FBRXRCLE9BQU9DLGNBQVAsQ0FBc0JhLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0ksSUFBbkMsRUFBMkMsQ0FBdkUsTUFBNkUsQ0FBRUwsT0FBT0MsR0FBUCxJQUFjSCxJQUFJRyxHQUFKLENBQWQsQ0FBeUIsQ0FBRSxDQUFFLENBQUUsQ0FBQ0QsT0FBT1YsT0FBUCxHQUFpQlEsR0FBakIsQ0FBc0IsT0FBT0UsTUFBUCxDQUFnQixDQUFFOztBQUV4ZCxNQUFNUyxlQUFlO0FBQ25CQyxRQUFNQyxJQUFOLEVBQVlDLEtBQVosRUFBbUI7QUFDakIsVUFBTUMsTUFBTUYsS0FBS0csSUFBTCxDQUFVRCxHQUF0Qjs7QUFFQSxRQUFJQSxHQUFKLEVBQVM7QUFDUEQsWUFBTUMsR0FBTixHQUFZQSxHQUFaO0FBQ0FGLFdBQUtJLElBQUw7QUFDRDtBQUNGLEdBUmtCLEVBQXJCOzs7O0FBWUEsTUFBTUMsSUFBTixDQUFXO0FBQ1RDLGNBQVlDLE9BQVosRUFBcUI7QUFDbkJDLFFBRG1CO0FBRW5CQyxPQUZtQjtBQUduQkMsV0FIbUI7QUFJbkJDLFlBSm1CLEVBQXJCO0FBS0c7QUFDRCxTQUFLQyxJQUFMLEdBQVksSUFBSUMsR0FBSixFQUFaO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQixFQUFwQjtBQUNBLFNBQUtkLElBQUwsR0FBWSxJQUFaO0FBQ0EsU0FBS1MsR0FBTCxHQUFXLEVBQVg7QUFDQSxTQUFLTSxRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsU0FBS0MsR0FBTCxHQUFXLEtBQUtoQyxZQUFZaUMsR0FBakIsRUFBc0IsSUFBdEIsQ0FBWDtBQUNBLFNBQUtULElBQUwsR0FBWSxFQUFaO0FBQ0EsU0FBS0UsT0FBTCxHQUFlLEVBQWY7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsU0FBS08sSUFBTCxHQUFZWCxPQUFaO0FBQ0EsU0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0MsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLWCxJQUFMLEdBQVloQixZQUFZbUMsUUFBWixDQUFxQnZCLEdBQXJCLENBQXlCO0FBQ25Db0IsV0FBSyxLQUFLQSxHQUR5QjtBQUVuQ0ksa0JBQVksSUFGdUI7QUFHbkNDLGNBQVEsS0FBS1osR0FIc0I7QUFJbkNhLGlCQUFXLEtBQUtiLEdBSm1CO0FBS25DbkIsV0FBSyxTQUw4QixFQUF6QjtBQU1UaUMsY0FOUyxFQUFaO0FBT0EsU0FBS0MsS0FBTCxHQUFhLEtBQUt4QixJQUFMLENBQVV3QixLQUF2QjtBQUNEOztBQUVEM0IsTUFBSVAsR0FBSixFQUFTbUMsR0FBVCxFQUFjO0FBQ1osU0FBS2IsSUFBTCxDQUFVZixHQUFWLENBQWNQLEdBQWQsRUFBbUJtQyxHQUFuQjtBQUNEOztBQUVEN0IsTUFBSU4sR0FBSixFQUFTO0FBQ1AsV0FBTyxLQUFLc0IsSUFBTCxDQUFVaEIsR0FBVixDQUFjTixHQUFkLENBQVA7QUFDRDs7QUFFRG9DLE1BQUlwQyxHQUFKLEVBQVM7QUFDUCxXQUFPLEtBQUtzQixJQUFMLENBQVVjLEdBQVYsQ0FBY3BDLEdBQWQsQ0FBUDtBQUNEOztBQUVEcUMsa0JBQWdCO0FBQ2QsVUFBTUMsYUFBYSxLQUFLVixJQUF4QjtBQUNNVyxlQUFXRCxXQUFXQyxRQUQ1QjtBQUVNQyw0QkFBd0JGLFdBQVdHLGdCQUZ6QztBQUdNQSx1QkFBbUJELDBCQUEwQixLQUFLLENBQS9CLEdBQW1DRCxRQUFuQyxHQUE4Q0MscUJBSHZFO0FBSU1FLGVBQVdKLFdBQVdJLFFBSjVCO0FBS01DLDJCQUF1QkwsV0FBV00sU0FMeEM7QUFNTUEsZ0JBQVlELHlCQUF5QixLQUFLLENBQTlCLEdBQWtDLENBQUMsQ0FBQ0QsUUFBcEMsR0FBK0NDLG9CQU5qRTtBQU9NRSxrQkFBY1AsV0FBV08sV0FQL0I7QUFRTUMsb0JBQWdCUixXQUFXUyxVQVJqQztBQVNNQyw0QkFBd0JWLFdBQVdXLFVBVHpDO0FBVU1BLGlCQUFhRCwwQkFBMEIsS0FBSyxDQUEvQixHQUFtQ0YsYUFBbkMsR0FBbURFLHFCQVZ0RTtBQVdNRSw0QkFBd0JaLFdBQVdTLFVBWHpDO0FBWU1BLGlCQUFhRywwQkFBMEIsS0FBSyxDQUEvQixHQUFtQ0QsVUFBbkMsR0FBZ0RDLHFCQVpuRTtBQWFBLFFBQUksQ0FBQ04sU0FBTCxFQUFnQixPQUFPLElBQVA7O0FBRWhCLFFBQUlGLFlBQVksSUFBWixJQUFvQixDQUFDRyxXQUF6QixFQUFzQztBQUNwQyxhQUFPSCxRQUFQO0FBQ0Q7O0FBRUQsUUFBSVMsYUFBYUYsY0FBYyxJQUFkLEdBQXFCQSxhQUFhLEdBQWxDLEdBQXdDLEVBQXpEOztBQUVBLFFBQUlSLGdCQUFKLEVBQXNCO0FBQ3BCLFlBQU1XLHFCQUFxQkwsY0FBYyxJQUFkLEdBQXFCLElBQUlNLE1BQUosQ0FBVyxNQUFNTixVQUFOLEdBQW1CLElBQTlCLENBQXJCLEdBQTJELEVBQXRGO0FBQ0FJLG9CQUFjVixpQkFBaUJhLE9BQWpCLENBQXlCRixrQkFBekIsRUFBNkMsRUFBN0MsRUFBaURFLE9BQWpELENBQXlELFdBQXpELEVBQXNFLEVBQXRFLENBQWQ7QUFDRDs7QUFFREgsaUJBQWFBLFdBQVdHLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsR0FBMUIsQ0FBYjs7QUFFQSxRQUFJVCxXQUFKLEVBQWlCO0FBQ2YsYUFBT0EsWUFBWU0sVUFBWixLQUEyQkEsVUFBbEM7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPQSxVQUFQO0FBQ0Q7QUFDRjs7QUFFREksc0JBQW9CQyxNQUFwQixFQUE0QjtBQUMxQixXQUFPQSxNQUFQO0FBQ0Q7O0FBRURDLGNBQVk7QUFDVixVQUFNLElBQUlDLEtBQUosQ0FBVSwyREFBMkQsa0RBQTNELEdBQWdILHNFQUFoSCxHQUF5TCx3REFBbk0sQ0FBTjtBQUNEOztBQUVEQyxZQUFVQyxJQUFWLEVBQWdCO0FBQ2QsVUFBTUMsU0FBUyxLQUFLckMsWUFBTCxDQUFrQm9DLElBQWxCLENBQWY7QUFDQSxRQUFJQyxNQUFKLEVBQVksT0FBT2pFLElBQUlrRSxTQUFKLENBQWNELE1BQWQsQ0FBUDtBQUNaLFVBQU1FLFlBQVksS0FBS3pELEdBQUwsQ0FBUyxpQkFBVCxDQUFsQjtBQUNBLFVBQU0wRCxVQUFVLEtBQUsxRCxHQUFMLENBQVMsa0JBQVQsQ0FBaEI7O0FBRUEsUUFBSXlELFNBQUosRUFBZTtBQUNiLFlBQU1FLE1BQU1GLFVBQVVILElBQVYsQ0FBWjtBQUNBLFVBQUlLLEdBQUosRUFBUyxPQUFPQSxHQUFQO0FBQ1YsS0FIRCxNQUdPLElBQUlELE9BQUosRUFBYTtBQUNsQixhQUFPcEUsSUFBSXNFLGdCQUFKLENBQXFCdEUsSUFBSWtFLFNBQUosQ0FBY0UsT0FBZCxDQUFyQixFQUE2Q3BFLElBQUl1RSxVQUFKLENBQWVQLElBQWYsQ0FBN0MsQ0FBUDtBQUNEOztBQUVELFVBQU1RLE1BQU0sS0FBSzVDLFlBQUwsQ0FBa0JvQyxJQUFsQixJQUEwQixLQUFLMUIsS0FBTCxDQUFXbUMscUJBQVgsQ0FBaUNULElBQWpDLENBQXRDO0FBQ0EsVUFBTVUsZUFBZSxFQUFyQjs7QUFFQSxTQUFLLElBQUlDLFlBQVlqRixVQUFVa0YsZUFBVixDQUEwQlosSUFBMUIsQ0FBaEIsRUFBaURhLFdBQVdDLE1BQU1DLE9BQU4sQ0FBY0osU0FBZCxDQUE1RCxFQUFzRkssS0FBSyxDQUEzRixFQUE4RkwsWUFBWUUsV0FBV0YsU0FBWCxHQUF1QkEsVUFBVU0sT0FBT0MsUUFBakIsR0FBdEksSUFBc0s7QUFDcEssVUFBSUMsSUFBSjs7QUFFQSxVQUFJTixRQUFKLEVBQWM7QUFDWixZQUFJRyxNQUFNTCxVQUFVUyxNQUFwQixFQUE0QjtBQUM1QkQsZUFBT1IsVUFBVUssSUFBVixDQUFQO0FBQ0QsT0FIRCxNQUdPO0FBQ0xBLGFBQUtMLFVBQVVVLElBQVYsRUFBTDtBQUNBLFlBQUlMLEdBQUdNLElBQVAsRUFBYTtBQUNiSCxlQUFPSCxHQUFHeEYsS0FBVjtBQUNEOztBQUVELFlBQU0rRixNQUFNSixJQUFaO0FBQ0FULG1CQUFhYSxHQUFiLElBQW9CLEtBQUt4QixTQUFMLENBQWV3QixHQUFmLENBQXBCO0FBQ0Q7O0FBRUQsVUFBTUMsZUFBZTlGLFVBQVVnQixHQUFWLENBQWNzRCxJQUFkLEVBQW9CdUIsT0FBT2IsYUFBYWEsR0FBYixDQUEzQixFQUE4Q2YsR0FBOUMsRUFBbURuRixPQUFPb0csSUFBUCxDQUFZLEtBQUtuRCxLQUFMLENBQVdvRCxjQUFYLEVBQVosQ0FBbkQsQ0FBckI7QUFDTUMsWUFBUUgsYUFBYUcsS0FEM0I7QUFFTUMsY0FBVUosYUFBYUksT0FGN0I7O0FBSUFBLFlBQVFDLE9BQVIsQ0FBZ0I3QixRQUFRO0FBQ3RCLFVBQUksS0FBS2xELElBQUwsQ0FBVXdCLEtBQVYsQ0FBZ0J3RCxVQUFoQixDQUEyQjlCLElBQTNCLEVBQWlDLElBQWpDLENBQUosRUFBNEM7QUFDMUMsYUFBS2xELElBQUwsQ0FBVXdCLEtBQVYsQ0FBZ0J5RCxNQUFoQixDQUF1Qi9CLElBQXZCO0FBQ0Q7QUFDRixLQUpEO0FBS0EyQixVQUFNRSxPQUFOLENBQWM1RSxRQUFRO0FBQ3BCQSxXQUFLK0UsUUFBTCxHQUFnQixJQUFoQjtBQUNELEtBRkQ7QUFHQSxTQUFLbEYsSUFBTCxDQUFVbUYsZ0JBQVYsQ0FBMkIsTUFBM0IsRUFBbUNOLEtBQW5DO0FBQ0EsU0FBSzdFLElBQUwsQ0FBVUosR0FBVixDQUFjLE1BQWQsRUFBc0JtRixPQUF0QixDQUE4Qi9FLFFBQVE7QUFDcEMsVUFBSTZFLE1BQU1PLE9BQU4sQ0FBY3BGLEtBQUtHLElBQW5CLE1BQTZCLENBQUMsQ0FBbEMsRUFBcUM7QUFDckMsVUFBSUgsS0FBS3FGLHFCQUFMLEVBQUosRUFBa0MsS0FBSzdELEtBQUwsQ0FBVzhELG1CQUFYLENBQStCdEYsSUFBL0I7QUFDbkMsS0FIRDtBQUlBLFdBQU8wRCxHQUFQO0FBQ0Q7O0FBRUQ2QixzQkFBb0I7QUFDbEIsVUFBTSxJQUFJdkMsS0FBSixDQUFVLDBFQUFWLENBQU47QUFDRDs7QUFFRHdDLHNCQUFvQnJGLElBQXBCLEVBQTBCc0YsR0FBMUIsRUFBK0J6QyxRQUFRMEMsV0FBdkMsRUFBb0Q7QUFDbEQsUUFBSXhGLE1BQU1DLFNBQVNBLEtBQUtELEdBQUwsSUFBWUMsS0FBS3dGLElBQTFCLENBQVY7QUFDQUYsVUFBTyxHQUFFLEtBQUt2RSxJQUFMLENBQVVXLFFBQVMsS0FBSTRELEdBQUksRUFBcEM7O0FBRUEsUUFBSSxDQUFDdkYsR0FBRCxJQUFRQyxJQUFaLEVBQWtCO0FBQ2hCLFlBQU1GLFFBQVE7QUFDWkMsYUFBSyxJQURPLEVBQWQ7O0FBR0EsT0FBQyxHQUFHbEIsWUFBWUwsT0FBaEIsRUFBeUJ3QixJQUF6QixFQUErQkwsWUFBL0IsRUFBNkMsS0FBSzBCLEtBQWxELEVBQXlEdkIsS0FBekQ7QUFDQUMsWUFBTUQsTUFBTUMsR0FBWjtBQUNBLFVBQUkwRixNQUFNLG1FQUFWO0FBQ0EsVUFBSTFGLEdBQUosRUFBUzBGLE9BQU8sK0JBQVA7QUFDVEgsYUFBUSxLQUFJRyxHQUFJLEdBQWhCO0FBQ0Q7O0FBRUQsUUFBSTFGLEdBQUosRUFBUztBQUNQLFlBQU0yRix3QkFBd0IsS0FBSzNFLElBQUwsQ0FBVTRFLGFBQXhDO0FBQ01BLHNCQUFnQkQsMEJBQTBCLEtBQUssQ0FBL0IsR0FBbUMsSUFBbkMsR0FBMENBLHFCQURoRTtBQUVBSixhQUFPLE9BQU8sQ0FBQyxHQUFHeEcsYUFBYThHLGdCQUFqQixFQUFtQyxLQUFLdkYsSUFBeEMsRUFBOEM7QUFDMUR3RixlQUFPO0FBQ0xDLGdCQUFNL0YsSUFBSThGLEtBQUosQ0FBVUMsSUFEWDtBQUVMQyxrQkFBUWhHLElBQUk4RixLQUFKLENBQVVFLE1BQVYsR0FBbUIsQ0FGdEIsRUFEbUQsRUFBOUM7O0FBS1g7QUFDREoscUJBREMsRUFMVyxDQUFkOztBQVFEOztBQUVELFdBQU8sSUFBSTlDLEtBQUosQ0FBVXlDLEdBQVYsQ0FBUDtBQUNELEdBNUtROzs7O0FBZ0xYaEgsUUFBUUUsT0FBUixHQUFrQjBCLElBQWxCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvdHJhbnNmb3JtYXRpb24vZmlsZSIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBoZWxwZXJzKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIkBiYWJlbC9oZWxwZXJzXCIpKTtcblxuICBoZWxwZXJzID0gZnVuY3Rpb24gaGVscGVycygpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIkBiYWJlbC90cmF2ZXJzZVwiKSk7XG5cbiAgX3RyYXZlcnNlID0gZnVuY3Rpb24gX3RyYXZlcnNlKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfY29kZUZyYW1lKCkge1xuICBjb25zdCBkYXRhID0gcmVxdWlyZShcIkBiYWJlbC9jb2RlLWZyYW1lXCIpO1xuXG4gIF9jb2RlRnJhbWUgPSBmdW5jdGlvbiBfY29kZUZyYW1lKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiB0KCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIkBiYWJlbC90eXBlc1wiKSk7XG5cbiAgdCA9IGZ1bmN0aW9uIHQoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuY29uc3QgZXJyb3JWaXNpdG9yID0ge1xuICBlbnRlcihwYXRoLCBzdGF0ZSkge1xuICAgIGNvbnN0IGxvYyA9IHBhdGgubm9kZS5sb2M7XG5cbiAgICBpZiAobG9jKSB7XG4gICAgICBzdGF0ZS5sb2MgPSBsb2M7XG4gICAgICBwYXRoLnN0b3AoKTtcbiAgICB9XG4gIH1cblxufTtcblxuY2xhc3MgRmlsZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIHtcbiAgICBjb2RlLFxuICAgIGFzdCxcbiAgICBzaGViYW5nLFxuICAgIGlucHV0TWFwXG4gIH0pIHtcbiAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5kZWNsYXJhdGlvbnMgPSB7fTtcbiAgICB0aGlzLnBhdGggPSBudWxsO1xuICAgIHRoaXMuYXN0ID0ge307XG4gICAgdGhpcy5tZXRhZGF0YSA9IHt9O1xuICAgIHRoaXMuaHViID0gbmV3IChfdHJhdmVyc2UoKS5IdWIpKHRoaXMpO1xuICAgIHRoaXMuY29kZSA9IFwiXCI7XG4gICAgdGhpcy5zaGViYW5nID0gXCJcIjtcbiAgICB0aGlzLmlucHV0TWFwID0gbnVsbDtcbiAgICB0aGlzLm9wdHMgPSBvcHRpb25zO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgdGhpcy5zaGViYW5nID0gc2hlYmFuZztcbiAgICB0aGlzLmlucHV0TWFwID0gaW5wdXRNYXA7XG4gICAgdGhpcy5wYXRoID0gX3RyYXZlcnNlKCkuTm9kZVBhdGguZ2V0KHtcbiAgICAgIGh1YjogdGhpcy5odWIsXG4gICAgICBwYXJlbnRQYXRoOiBudWxsLFxuICAgICAgcGFyZW50OiB0aGlzLmFzdCxcbiAgICAgIGNvbnRhaW5lcjogdGhpcy5hc3QsXG4gICAgICBrZXk6IFwicHJvZ3JhbVwiXG4gICAgfSkuc2V0Q29udGV4dCgpO1xuICAgIHRoaXMuc2NvcGUgPSB0aGlzLnBhdGguc2NvcGU7XG4gIH1cblxuICBzZXQoa2V5LCB2YWwpIHtcbiAgICB0aGlzLl9tYXAuc2V0KGtleSwgdmFsKTtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmdldChrZXkpO1xuICB9XG5cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKGtleSk7XG4gIH1cblxuICBnZXRNb2R1bGVOYW1lKCkge1xuICAgIGNvbnN0IF90aGlzJG9wdHMgPSB0aGlzLm9wdHMsXG4gICAgICAgICAgZmlsZW5hbWUgPSBfdGhpcyRvcHRzLmZpbGVuYW1lLFxuICAgICAgICAgIF90aGlzJG9wdHMkZmlsZW5hbWVSZSA9IF90aGlzJG9wdHMuZmlsZW5hbWVSZWxhdGl2ZSxcbiAgICAgICAgICBmaWxlbmFtZVJlbGF0aXZlID0gX3RoaXMkb3B0cyRmaWxlbmFtZVJlID09PSB2b2lkIDAgPyBmaWxlbmFtZSA6IF90aGlzJG9wdHMkZmlsZW5hbWVSZSxcbiAgICAgICAgICBtb2R1bGVJZCA9IF90aGlzJG9wdHMubW9kdWxlSWQsXG4gICAgICAgICAgX3RoaXMkb3B0cyRtb2R1bGVJZHMgPSBfdGhpcyRvcHRzLm1vZHVsZUlkcyxcbiAgICAgICAgICBtb2R1bGVJZHMgPSBfdGhpcyRvcHRzJG1vZHVsZUlkcyA9PT0gdm9pZCAwID8gISFtb2R1bGVJZCA6IF90aGlzJG9wdHMkbW9kdWxlSWRzLFxuICAgICAgICAgIGdldE1vZHVsZUlkID0gX3RoaXMkb3B0cy5nZXRNb2R1bGVJZCxcbiAgICAgICAgICBzb3VyY2VSb290VG1wID0gX3RoaXMkb3B0cy5zb3VyY2VSb290LFxuICAgICAgICAgIF90aGlzJG9wdHMkbW9kdWxlUm9vdCA9IF90aGlzJG9wdHMubW9kdWxlUm9vdCxcbiAgICAgICAgICBtb2R1bGVSb290ID0gX3RoaXMkb3B0cyRtb2R1bGVSb290ID09PSB2b2lkIDAgPyBzb3VyY2VSb290VG1wIDogX3RoaXMkb3B0cyRtb2R1bGVSb290LFxuICAgICAgICAgIF90aGlzJG9wdHMkc291cmNlUm9vdCA9IF90aGlzJG9wdHMuc291cmNlUm9vdCxcbiAgICAgICAgICBzb3VyY2VSb290ID0gX3RoaXMkb3B0cyRzb3VyY2VSb290ID09PSB2b2lkIDAgPyBtb2R1bGVSb290IDogX3RoaXMkb3B0cyRzb3VyY2VSb290O1xuICAgIGlmICghbW9kdWxlSWRzKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChtb2R1bGVJZCAhPSBudWxsICYmICFnZXRNb2R1bGVJZCkge1xuICAgICAgcmV0dXJuIG1vZHVsZUlkO1xuICAgIH1cblxuICAgIGxldCBtb2R1bGVOYW1lID0gbW9kdWxlUm9vdCAhPSBudWxsID8gbW9kdWxlUm9vdCArIFwiL1wiIDogXCJcIjtcblxuICAgIGlmIChmaWxlbmFtZVJlbGF0aXZlKSB7XG4gICAgICBjb25zdCBzb3VyY2VSb290UmVwbGFjZXIgPSBzb3VyY2VSb290ICE9IG51bGwgPyBuZXcgUmVnRXhwKFwiXlwiICsgc291cmNlUm9vdCArIFwiLz9cIikgOiBcIlwiO1xuICAgICAgbW9kdWxlTmFtZSArPSBmaWxlbmFtZVJlbGF0aXZlLnJlcGxhY2Uoc291cmNlUm9vdFJlcGxhY2VyLCBcIlwiKS5yZXBsYWNlKC9cXC4oXFx3Kj8pJC8sIFwiXCIpO1xuICAgIH1cblxuICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVOYW1lLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpO1xuXG4gICAgaWYgKGdldE1vZHVsZUlkKSB7XG4gICAgICByZXR1cm4gZ2V0TW9kdWxlSWQobW9kdWxlTmFtZSkgfHwgbW9kdWxlTmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1vZHVsZU5hbWU7XG4gICAgfVxuICB9XG5cbiAgcmVzb2x2ZU1vZHVsZVNvdXJjZShzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgYWRkSW1wb3J0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgQVBJIGhhcyBiZWVuIHJlbW92ZWQuIElmIHlvdSdyZSBsb29raW5nIGZvciB0aGlzIFwiICsgXCJmdW5jdGlvbmFsaXR5IGluIEJhYmVsIDcsIHlvdSBzaG91bGQgaW1wb3J0IHRoZSBcIiArIFwiJ0BiYWJlbC9oZWxwZXItbW9kdWxlLWltcG9ydHMnIG1vZHVsZSBhbmQgdXNlIHRoZSBmdW5jdGlvbnMgZXhwb3NlZCBcIiArIFwiIGZyb20gdGhhdCBtb2R1bGUsIHN1Y2ggYXMgJ2FkZE5hbWVkJyBvciAnYWRkRGVmYXVsdCcuXCIpO1xuICB9XG5cbiAgYWRkSGVscGVyKG5hbWUpIHtcbiAgICBjb25zdCBkZWNsYXIgPSB0aGlzLmRlY2xhcmF0aW9uc1tuYW1lXTtcbiAgICBpZiAoZGVjbGFyKSByZXR1cm4gdCgpLmNsb25lTm9kZShkZWNsYXIpO1xuICAgIGNvbnN0IGdlbmVyYXRvciA9IHRoaXMuZ2V0KFwiaGVscGVyR2VuZXJhdG9yXCIpO1xuICAgIGNvbnN0IHJ1bnRpbWUgPSB0aGlzLmdldChcImhlbHBlcnNOYW1lc3BhY2VcIik7XG5cbiAgICBpZiAoZ2VuZXJhdG9yKSB7XG4gICAgICBjb25zdCByZXMgPSBnZW5lcmF0b3IobmFtZSk7XG4gICAgICBpZiAocmVzKSByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAocnVudGltZSkge1xuICAgICAgcmV0dXJuIHQoKS5tZW1iZXJFeHByZXNzaW9uKHQoKS5jbG9uZU5vZGUocnVudGltZSksIHQoKS5pZGVudGlmaWVyKG5hbWUpKTtcbiAgICB9XG5cbiAgICBjb25zdCB1aWQgPSB0aGlzLmRlY2xhcmF0aW9uc1tuYW1lXSA9IHRoaXMuc2NvcGUuZ2VuZXJhdGVVaWRJZGVudGlmaWVyKG5hbWUpO1xuICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gaGVscGVycygpLmdldERlcGVuZGVuY2llcyhuYW1lKSwgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVwID0gX3JlZjtcbiAgICAgIGRlcGVuZGVuY2llc1tkZXBdID0gdGhpcy5hZGRIZWxwZXIoZGVwKTtcbiAgICB9XG5cbiAgICBjb25zdCBfaGVscGVycyRnZXQgPSBoZWxwZXJzKCkuZ2V0KG5hbWUsIGRlcCA9PiBkZXBlbmRlbmNpZXNbZGVwXSwgdWlkLCBPYmplY3Qua2V5cyh0aGlzLnNjb3BlLmdldEFsbEJpbmRpbmdzKCkpKSxcbiAgICAgICAgICBub2RlcyA9IF9oZWxwZXJzJGdldC5ub2RlcyxcbiAgICAgICAgICBnbG9iYWxzID0gX2hlbHBlcnMkZ2V0Lmdsb2JhbHM7XG5cbiAgICBnbG9iYWxzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBpZiAodGhpcy5wYXRoLnNjb3BlLmhhc0JpbmRpbmcobmFtZSwgdHJ1ZSkpIHtcbiAgICAgICAgdGhpcy5wYXRoLnNjb3BlLnJlbmFtZShuYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgbm9kZS5fY29tcGFjdCA9IHRydWU7XG4gICAgfSk7XG4gICAgdGhpcy5wYXRoLnVuc2hpZnRDb250YWluZXIoXCJib2R5XCIsIG5vZGVzKTtcbiAgICB0aGlzLnBhdGguZ2V0KFwiYm9keVwiKS5mb3JFYWNoKHBhdGggPT4ge1xuICAgICAgaWYgKG5vZGVzLmluZGV4T2YocGF0aC5ub2RlKSA9PT0gLTEpIHJldHVybjtcbiAgICAgIGlmIChwYXRoLmlzVmFyaWFibGVEZWNsYXJhdGlvbigpKSB0aGlzLnNjb3BlLnJlZ2lzdGVyRGVjbGFyYXRpb24ocGF0aCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVpZDtcbiAgfVxuXG4gIGFkZFRlbXBsYXRlT2JqZWN0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgZnVuY3Rpb24gaGFzIGJlZW4gbW92ZWQgaW50byB0aGUgdGVtcGxhdGUgbGl0ZXJhbCB0cmFuc2Zvcm0gaXRzZWxmLlwiKTtcbiAgfVxuXG4gIGJ1aWxkQ29kZUZyYW1lRXJyb3Iobm9kZSwgbXNnLCBFcnJvciA9IFN5bnRheEVycm9yKSB7XG4gICAgbGV0IGxvYyA9IG5vZGUgJiYgKG5vZGUubG9jIHx8IG5vZGUuX2xvYyk7XG4gICAgbXNnID0gYCR7dGhpcy5vcHRzLmZpbGVuYW1lfTogJHttc2d9YDtcblxuICAgIGlmICghbG9jICYmIG5vZGUpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBsb2M6IG51bGxcbiAgICAgIH07XG4gICAgICAoMCwgX3RyYXZlcnNlKCkuZGVmYXVsdCkobm9kZSwgZXJyb3JWaXNpdG9yLCB0aGlzLnNjb3BlLCBzdGF0ZSk7XG4gICAgICBsb2MgPSBzdGF0ZS5sb2M7XG4gICAgICBsZXQgdHh0ID0gXCJUaGlzIGlzIGFuIGVycm9yIG9uIGFuIGludGVybmFsIG5vZGUuIFByb2JhYmx5IGFuIGludGVybmFsIGVycm9yLlwiO1xuICAgICAgaWYgKGxvYykgdHh0ICs9IFwiIExvY2F0aW9uIGhhcyBiZWVuIGVzdGltYXRlZC5cIjtcbiAgICAgIG1zZyArPSBgICgke3R4dH0pYDtcbiAgICB9XG5cbiAgICBpZiAobG9jKSB7XG4gICAgICBjb25zdCBfdGhpcyRvcHRzJGhpZ2hsaWdodEMgPSB0aGlzLm9wdHMuaGlnaGxpZ2h0Q29kZSxcbiAgICAgICAgICAgIGhpZ2hsaWdodENvZGUgPSBfdGhpcyRvcHRzJGhpZ2hsaWdodEMgPT09IHZvaWQgMCA/IHRydWUgOiBfdGhpcyRvcHRzJGhpZ2hsaWdodEM7XG4gICAgICBtc2cgKz0gXCJcXG5cIiArICgwLCBfY29kZUZyYW1lKCkuY29kZUZyYW1lQ29sdW1ucykodGhpcy5jb2RlLCB7XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgbGluZTogbG9jLnN0YXJ0LmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBsb2Muc3RhcnQuY29sdW1uICsgMVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGhpZ2hsaWdodENvZGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRXJyb3IobXNnKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZpbGU7Il19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/tools\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/tools/build-external-helpers.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/tools",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/tools/build-external-helpers.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/tools/build-external-helpers.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/tools/build-external-helpers.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/tools",
        "sourceFileName": "build-external-helpers.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = _default;\n\nfunction helpers() {\n  const data = _interopRequireWildcard(require(\"@babel/helpers\"));\n\n  helpers = function helpers() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  const data = _interopRequireDefault(require(\"@babel/generator\"));\n\n  _generator = function _generator() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  const data = _interopRequireDefault(require(\"@babel/template\"));\n\n  _template = function _template() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function t() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}\n\nconst buildUmdWrapper = replacements => _template().default`\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  `(replacements);\n\nfunction buildGlobal(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  const container = t().functionExpression(null, [t().identifier(\"global\")], t().blockStatement(body));\n  const tree = t().program([t().expressionStatement(t().callExpression(container, [t().conditionalExpression(t().binaryExpression(\"===\", t().unaryExpression(\"typeof\", t().identifier(\"global\")), t().stringLiteral(\"undefined\")), t().identifier(\"self\"), t().identifier(\"global\"))]))]);\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"global\"), namespace), t().objectExpression([])))]));\n  buildHelpers(body, namespace, whitelist);\n  return tree;\n}\n\nfunction buildModule(whitelist) {\n  const body = [];\n  const refs = buildHelpers(body, null, whitelist);\n  body.unshift(t().exportNamedDeclaration(null, Object.keys(refs).map(name => {\n    return t().exportSpecifier(t().cloneNode(refs[name]), t().identifier(name));\n  })));\n  return t().program(body, [], \"module\");\n}\n\nfunction buildUmd(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().identifier(\"global\"))]));\n  buildHelpers(body, namespace, whitelist);\n  return t().program([buildUmdWrapper({\n    FACTORY_PARAMETERS: t().identifier(\"global\"),\n    BROWSER_ARGUMENTS: t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"root\"), namespace), t().objectExpression([])),\n    COMMON_ARGUMENTS: t().identifier(\"exports\"),\n    AMD_ARGUMENTS: t().arrayExpression([t().stringLiteral(\"exports\")]),\n    FACTORY_BODY: body,\n    UMD_ROOT: t().identifier(\"this\") })]);\n\n}\n\nfunction buildVar(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().objectExpression([]))]));\n  const tree = t().program(body);\n  buildHelpers(body, namespace, whitelist);\n  body.push(t().expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(body, namespace, whitelist) {\n  const getHelperReference = name => {\n    return namespace ? t().memberExpression(namespace, t().identifier(name)) : t().identifier(`_${name}`);\n  };\n\n  const refs = {};\n  helpers().list.forEach(function (name) {\n    if (whitelist && whitelist.indexOf(name) < 0) return;\n    const ref = refs[name] = getHelperReference(name);\n\n    const _helpers$get = helpers().get(name, getHelperReference, ref),\n    nodes = _helpers$get.nodes;\n\n    body.push(...nodes);\n  });\n  return refs;\n}\n\nfunction _default(whitelist, outputType = \"global\") {\n  let tree;\n  const build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar }[\n  outputType];\n\n  if (build) {\n    tree = build(whitelist);\n  } else {\n    throw new Error(`Unsupported output type ${outputType}`);\n  }\n\n  return (0, _generator().default)(tree).code;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/index.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/index.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/index.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/index.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nObject.defineProperty(exports, \"findPackageData\", {\n  enumerable: true,\n  get: function get() {\n    return _package.findPackageData;\n  } });\n\nObject.defineProperty(exports, \"findRelativeConfig\", {\n  enumerable: true,\n  get: function get() {\n    return _configuration.findRelativeConfig;\n  } });\n\nObject.defineProperty(exports, \"findRootConfig\", {\n  enumerable: true,\n  get: function get() {\n    return _configuration.findRootConfig;\n  } });\n\nObject.defineProperty(exports, \"loadConfig\", {\n  enumerable: true,\n  get: function get() {\n    return _configuration.loadConfig;\n  } });\n\nObject.defineProperty(exports, \"resolvePlugin\", {\n  enumerable: true,\n  get: function get() {\n    return _plugins.resolvePlugin;\n  } });\n\nObject.defineProperty(exports, \"resolvePreset\", {\n  enumerable: true,\n  get: function get() {\n    return _plugins.resolvePreset;\n  } });\n\nObject.defineProperty(exports, \"loadPlugin\", {\n  enumerable: true,\n  get: function get() {\n    return _plugins.loadPlugin;\n  } });\n\nObject.defineProperty(exports, \"loadPreset\", {\n  enumerable: true,\n  get: function get() {\n    return _plugins.loadPreset;\n  } });\n\n\nvar _package = require(\"./package\");\n\nvar _configuration = require(\"./configuration\");\n\nvar _plugins = require(\"./plugins\");\n\n({});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl9wYWNrYWdlIiwiZmluZFBhY2thZ2VEYXRhIiwiX2NvbmZpZ3VyYXRpb24iLCJmaW5kUmVsYXRpdmVDb25maWciLCJmaW5kUm9vdENvbmZpZyIsImxvYWRDb25maWciLCJfcGx1Z2lucyIsInJlc29sdmVQbHVnaW4iLCJyZXNvbHZlUHJlc2V0IiwibG9hZFBsdWdpbiIsImxvYWRQcmVzZXQiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU8sSUFEb0MsRUFBN0M7O0FBR0FILE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLGlCQUEvQixFQUFrRDtBQUNoREUsY0FBWSxJQURvQztBQUVoREMsT0FBSyxTQUFTQSxHQUFULEdBQWU7QUFDbEIsV0FBT0MsU0FBU0MsZUFBaEI7QUFDRCxHQUorQyxFQUFsRDs7QUFNQVAsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0Isb0JBQS9CLEVBQXFEO0FBQ25ERSxjQUFZLElBRHVDO0FBRW5EQyxPQUFLLFNBQVNBLEdBQVQsR0FBZTtBQUNsQixXQUFPRyxlQUFlQyxrQkFBdEI7QUFDRCxHQUprRCxFQUFyRDs7QUFNQVQsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsZ0JBQS9CLEVBQWlEO0FBQy9DRSxjQUFZLElBRG1DO0FBRS9DQyxPQUFLLFNBQVNBLEdBQVQsR0FBZTtBQUNsQixXQUFPRyxlQUFlRSxjQUF0QjtBQUNELEdBSjhDLEVBQWpEOztBQU1BVixPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0UsY0FBWSxJQUQrQjtBQUUzQ0MsT0FBSyxTQUFTQSxHQUFULEdBQWU7QUFDbEIsV0FBT0csZUFBZUcsVUFBdEI7QUFDRCxHQUowQyxFQUE3Qzs7QUFNQVgsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsZUFBL0IsRUFBZ0Q7QUFDOUNFLGNBQVksSUFEa0M7QUFFOUNDLE9BQUssU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLFdBQU9PLFNBQVNDLGFBQWhCO0FBQ0QsR0FKNkMsRUFBaEQ7O0FBTUFiLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLGVBQS9CLEVBQWdEO0FBQzlDRSxjQUFZLElBRGtDO0FBRTlDQyxPQUFLLFNBQVNBLEdBQVQsR0FBZTtBQUNsQixXQUFPTyxTQUFTRSxhQUFoQjtBQUNELEdBSjZDLEVBQWhEOztBQU1BZCxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0UsY0FBWSxJQUQrQjtBQUUzQ0MsT0FBSyxTQUFTQSxHQUFULEdBQWU7QUFDbEIsV0FBT08sU0FBU0csVUFBaEI7QUFDRCxHQUowQyxFQUE3Qzs7QUFNQWYsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NFLGNBQVksSUFEK0I7QUFFM0NDLE9BQUssU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLFdBQU9PLFNBQVNJLFVBQWhCO0FBQ0QsR0FKMEMsRUFBN0M7OztBQU9BLElBQUlWLFdBQVdXLFFBQVEsV0FBUixDQUFmOztBQUVBLElBQUlULGlCQUFpQlMsUUFBUSxpQkFBUixDQUFyQjs7QUFFQSxJQUFJTCxXQUFXSyxRQUFRLFdBQVIsQ0FBZjs7QUFFQSxDQUFDLEVBQUQiLCJzb3VyY2VSb290IjoiL1VzZXJzL3N0ZXZlbnZhbmR1cm0vRGV2ZWxvcGVyL2VpZ2VuLXJlYWN0LW5hdGl2ZS1BcmR1aW5vL2FwcC9ub2RlX21vZHVsZXMvbWV0cm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9jb3JlL2xpYi9jb25maWcvZmlsZXMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZpbmRQYWNrYWdlRGF0YVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfcGFja2FnZS5maW5kUGFja2FnZURhdGE7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmluZFJlbGF0aXZlQ29uZmlnXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jb25maWd1cmF0aW9uLmZpbmRSZWxhdGl2ZUNvbmZpZztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaW5kUm9vdENvbmZpZ1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY29uZmlndXJhdGlvbi5maW5kUm9vdENvbmZpZztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsb2FkQ29uZmlnXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jb25maWd1cmF0aW9uLmxvYWRDb25maWc7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVzb2x2ZVBsdWdpblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfcGx1Z2lucy5yZXNvbHZlUGx1Z2luO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlc29sdmVQcmVzZXRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3BsdWdpbnMucmVzb2x2ZVByZXNldDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsb2FkUGx1Z2luXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9wbHVnaW5zLmxvYWRQbHVnaW47XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibG9hZFByZXNldFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfcGx1Z2lucy5sb2FkUHJlc2V0O1xuICB9XG59KTtcblxudmFyIF9wYWNrYWdlID0gcmVxdWlyZShcIi4vcGFja2FnZVwiKTtcblxudmFyIF9jb25maWd1cmF0aW9uID0gcmVxdWlyZShcIi4vY29uZmlndXJhdGlvblwiKTtcblxudmFyIF9wbHVnaW5zID0gcmVxdWlyZShcIi4vcGx1Z2luc1wiKTtcblxuKHt9KTsiXX0=",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/package.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/package.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/package.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/package.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
        "sourceFileName": "package.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.findPackageData = findPackageData;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nconst PACKAGE_FILENAME = \"package.json\";\n\nfunction findPackageData(filepath) {\n  let pkg = null;\n  const directories = [];\n  let isPackage = true;\n\n  let dirname = _path().default.dirname(filepath);\n\n  while (!pkg && _path().default.basename(dirname) !== \"node_modules\") {\n    directories.push(dirname);\n    pkg = readConfigPackage(_path().default.join(dirname, PACKAGE_FILENAME));\n\n    const nextLoc = _path().default.dirname(dirname);\n\n    if (dirname === nextLoc) {\n      isPackage = false;\n      break;\n    }\n\n    dirname = nextLoc;\n  }\n\n  return {\n    filepath,\n    directories,\n    pkg,\n    isPackage };\n\n}\n\nconst readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {\n  let options;\n\n  try {\n    options = JSON.parse(content);\n  } catch (err) {\n    err.message = `${filepath}: Error while parsing JSON - ${err.message}`;\n    throw err;\n  }\n\n  if (typeof options !== \"object\") {\n    throw new Error(`${filepath}: Config returned typeof ${typeof options}`);\n  }\n\n  if (Array.isArray(options)) {\n    throw new Error(`${filepath}: Expected config object but found array`);\n  }\n\n  return {\n    filepath,\n    dirname: _path().default.dirname(filepath),\n    options };\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2UuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmaW5kUGFja2FnZURhdGEiLCJfcGF0aCIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl91dGlscyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUEFDS0FHRV9GSUxFTkFNRSIsImZpbGVwYXRoIiwicGtnIiwiZGlyZWN0b3JpZXMiLCJpc1BhY2thZ2UiLCJkaXJuYW1lIiwiYmFzZW5hbWUiLCJwdXNoIiwicmVhZENvbmZpZ1BhY2thZ2UiLCJqb2luIiwibmV4dExvYyIsIm1ha2VTdGF0aWNGaWxlQ2FjaGUiLCJjb250ZW50Iiwib3B0aW9ucyIsIkpTT04iLCJwYXJzZSIsImVyciIsIm1lc3NhZ2UiLCJFcnJvciIsIkFycmF5IiwiaXNBcnJheSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxTQUFPLElBRG9DLEVBQTdDOztBQUdBRCxRQUFRRSxlQUFSLEdBQTBCQSxlQUExQjs7QUFFQSxTQUFTQyxLQUFULEdBQWlCO0FBQ2YsUUFBTUMsT0FBT0MsdUJBQXVCQyxRQUFRLE1BQVIsQ0FBdkIsQ0FBYjs7QUFFQUgsVUFBUSxTQUFTQSxLQUFULEdBQWlCO0FBQ3ZCLFdBQU9DLElBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9BLElBQVA7QUFDRDs7QUFFRCxJQUFJRyxTQUFTRCxRQUFRLFNBQVIsQ0FBYjs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxTQUFTRixHQUFYLEVBQXJDLENBQXdEOztBQUUvRixNQUFNRyxtQkFBbUIsY0FBekI7O0FBRUEsU0FBU1QsZUFBVCxDQUF5QlUsUUFBekIsRUFBbUM7QUFDakMsTUFBSUMsTUFBTSxJQUFWO0FBQ0EsUUFBTUMsY0FBYyxFQUFwQjtBQUNBLE1BQUlDLFlBQVksSUFBaEI7O0FBRUEsTUFBSUMsVUFBVWIsUUFBUU8sT0FBUixDQUFnQk0sT0FBaEIsQ0FBd0JKLFFBQXhCLENBQWQ7O0FBRUEsU0FBTyxDQUFDQyxHQUFELElBQVFWLFFBQVFPLE9BQVIsQ0FBZ0JPLFFBQWhCLENBQXlCRCxPQUF6QixNQUFzQyxjQUFyRCxFQUFxRTtBQUNuRUYsZ0JBQVlJLElBQVosQ0FBaUJGLE9BQWpCO0FBQ0FILFVBQU1NLGtCQUFrQmhCLFFBQVFPLE9BQVIsQ0FBZ0JVLElBQWhCLENBQXFCSixPQUFyQixFQUE4QkwsZ0JBQTlCLENBQWxCLENBQU47O0FBRUEsVUFBTVUsVUFBVWxCLFFBQVFPLE9BQVIsQ0FBZ0JNLE9BQWhCLENBQXdCQSxPQUF4QixDQUFoQjs7QUFFQSxRQUFJQSxZQUFZSyxPQUFoQixFQUF5QjtBQUN2Qk4sa0JBQVksS0FBWjtBQUNBO0FBQ0Q7O0FBRURDLGNBQVVLLE9BQVY7QUFDRDs7QUFFRCxTQUFPO0FBQ0xULFlBREs7QUFFTEUsZUFGSztBQUdMRCxPQUhLO0FBSUxFLGFBSkssRUFBUDs7QUFNRDs7QUFFRCxNQUFNSSxvQkFBb0IsQ0FBQyxHQUFHWixPQUFPZSxtQkFBWCxFQUFnQyxDQUFDVixRQUFELEVBQVdXLE9BQVgsS0FBdUI7QUFDL0UsTUFBSUMsT0FBSjs7QUFFQSxNQUFJO0FBQ0ZBLGNBQVVDLEtBQUtDLEtBQUwsQ0FBV0gsT0FBWCxDQUFWO0FBQ0QsR0FGRCxDQUVFLE9BQU9JLEdBQVAsRUFBWTtBQUNaQSxRQUFJQyxPQUFKLEdBQWUsR0FBRWhCLFFBQVMsZ0NBQStCZSxJQUFJQyxPQUFRLEVBQXJFO0FBQ0EsVUFBTUQsR0FBTjtBQUNEOztBQUVELE1BQUksT0FBT0gsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUMvQixVQUFNLElBQUlLLEtBQUosQ0FBVyxHQUFFakIsUUFBUyw0QkFBMkIsT0FBT1ksT0FBUSxFQUFoRSxDQUFOO0FBQ0Q7O0FBRUQsTUFBSU0sTUFBTUMsT0FBTixDQUFjUCxPQUFkLENBQUosRUFBNEI7QUFDMUIsVUFBTSxJQUFJSyxLQUFKLENBQVcsR0FBRWpCLFFBQVMsMENBQXRCLENBQU47QUFDRDs7QUFFRCxTQUFPO0FBQ0xBLFlBREs7QUFFTEksYUFBU2IsUUFBUU8sT0FBUixDQUFnQk0sT0FBaEIsQ0FBd0JKLFFBQXhCLENBRko7QUFHTFksV0FISyxFQUFQOztBQUtELENBdkJ5QixDQUExQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvQGJhYmVsL2NvcmUvbGliL2NvbmZpZy9maWxlcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5maW5kUGFja2FnZURhdGEgPSBmaW5kUGFja2FnZURhdGE7XG5cbmZ1bmN0aW9uIF9wYXRoKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicGF0aFwiKSk7XG5cbiAgX3BhdGggPSBmdW5jdGlvbiBfcGF0aCgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBQQUNLQUdFX0ZJTEVOQU1FID0gXCJwYWNrYWdlLmpzb25cIjtcblxuZnVuY3Rpb24gZmluZFBhY2thZ2VEYXRhKGZpbGVwYXRoKSB7XG4gIGxldCBwa2cgPSBudWxsO1xuICBjb25zdCBkaXJlY3RvcmllcyA9IFtdO1xuICBsZXQgaXNQYWNrYWdlID0gdHJ1ZTtcblxuICBsZXQgZGlybmFtZSA9IF9wYXRoKCkuZGVmYXVsdC5kaXJuYW1lKGZpbGVwYXRoKTtcblxuICB3aGlsZSAoIXBrZyAmJiBfcGF0aCgpLmRlZmF1bHQuYmFzZW5hbWUoZGlybmFtZSkgIT09IFwibm9kZV9tb2R1bGVzXCIpIHtcbiAgICBkaXJlY3Rvcmllcy5wdXNoKGRpcm5hbWUpO1xuICAgIHBrZyA9IHJlYWRDb25maWdQYWNrYWdlKF9wYXRoKCkuZGVmYXVsdC5qb2luKGRpcm5hbWUsIFBBQ0tBR0VfRklMRU5BTUUpKTtcblxuICAgIGNvbnN0IG5leHRMb2MgPSBfcGF0aCgpLmRlZmF1bHQuZGlybmFtZShkaXJuYW1lKTtcblxuICAgIGlmIChkaXJuYW1lID09PSBuZXh0TG9jKSB7XG4gICAgICBpc1BhY2thZ2UgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGRpcm5hbWUgPSBuZXh0TG9jO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmaWxlcGF0aCxcbiAgICBkaXJlY3RvcmllcyxcbiAgICBwa2csXG4gICAgaXNQYWNrYWdlXG4gIH07XG59XG5cbmNvbnN0IHJlYWRDb25maWdQYWNrYWdlID0gKDAsIF91dGlscy5tYWtlU3RhdGljRmlsZUNhY2hlKSgoZmlsZXBhdGgsIGNvbnRlbnQpID0+IHtcbiAgbGV0IG9wdGlvbnM7XG5cbiAgdHJ5IHtcbiAgICBvcHRpb25zID0gSlNPTi5wYXJzZShjb250ZW50KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyLm1lc3NhZ2UgPSBgJHtmaWxlcGF0aH06IEVycm9yIHdoaWxlIHBhcnNpbmcgSlNPTiAtICR7ZXJyLm1lc3NhZ2V9YDtcbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZmlsZXBhdGh9OiBDb25maWcgcmV0dXJuZWQgdHlwZW9mICR7dHlwZW9mIG9wdGlvbnN9YCk7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtmaWxlcGF0aH06IEV4cGVjdGVkIGNvbmZpZyBvYmplY3QgYnV0IGZvdW5kIGFycmF5YCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZpbGVwYXRoLFxuICAgIGRpcm5hbWU6IF9wYXRoKCkuZGVmYXVsdC5kaXJuYW1lKGZpbGVwYXRoKSxcbiAgICBvcHRpb25zXG4gIH07XG59KTsiXX0=",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/utils.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/utils.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/utils.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/utils.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
        "sourceFileName": "utils.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.makeStaticFileCache = makeStaticFileCache;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _caching = require(\"../caching\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction makeStaticFileCache(fn) {\n  return (0, _caching.makeStrongCache)((filepath, cache) => {\n    if (cache.invalidate(() => fileMtime(filepath)) === null) {\n      cache.forever();\n      return null;\n    }\n\n    return fn(filepath, _fs().default.readFileSync(filepath, \"utf8\"));\n  });\n}\n\nfunction fileMtime(filepath) {\n  try {\n    return +_fs().default.statSync(filepath).mtime;\n  } catch (e) {\n    if (e.code !== \"ENOENT\" && e.code !== \"ENOTDIR\") throw e;\n  }\n\n  return null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWFrZVN0YXRpY0ZpbGVDYWNoZSIsIl9mcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jYWNoaW5nIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmbiIsIm1ha2VTdHJvbmdDYWNoZSIsImZpbGVwYXRoIiwiY2FjaGUiLCJpbnZhbGlkYXRlIiwiZmlsZU10aW1lIiwiZm9yZXZlciIsInJlYWRGaWxlU3luYyIsInN0YXRTeW5jIiwibXRpbWUiLCJlIiwiY29kZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxTQUFPLElBRG9DLEVBQTdDOztBQUdBRCxRQUFRRSxtQkFBUixHQUE4QkEsbUJBQTlCOztBQUVBLFNBQVNDLEdBQVQsR0FBZTtBQUNiLFFBQU1DLE9BQU9DLHVCQUF1QkMsUUFBUSxJQUFSLENBQXZCLENBQWI7O0FBRUFILFFBQU0sU0FBU0EsR0FBVCxHQUFlO0FBQ25CLFdBQU9DLElBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9BLElBQVA7QUFDRDs7QUFFRCxJQUFJRyxXQUFXRCxRQUFRLFlBQVIsQ0FBZjs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxTQUFTRixHQUFYLEVBQXJDLENBQXdEOztBQUUvRixTQUFTTixtQkFBVCxDQUE2QlMsRUFBN0IsRUFBaUM7QUFDL0IsU0FBTyxDQUFDLEdBQUdKLFNBQVNLLGVBQWIsRUFBOEIsQ0FBQ0MsUUFBRCxFQUFXQyxLQUFYLEtBQXFCO0FBQ3hELFFBQUlBLE1BQU1DLFVBQU4sQ0FBaUIsTUFBTUMsVUFBVUgsUUFBVixDQUF2QixNQUFnRCxJQUFwRCxFQUEwRDtBQUN4REMsWUFBTUcsT0FBTjtBQUNBLGFBQU8sSUFBUDtBQUNEOztBQUVELFdBQU9OLEdBQUdFLFFBQUgsRUFBYVYsTUFBTU8sT0FBTixDQUFjUSxZQUFkLENBQTJCTCxRQUEzQixFQUFxQyxNQUFyQyxDQUFiLENBQVA7QUFDRCxHQVBNLENBQVA7QUFRRDs7QUFFRCxTQUFTRyxTQUFULENBQW1CSCxRQUFuQixFQUE2QjtBQUMzQixNQUFJO0FBQ0YsV0FBTyxDQUFDVixNQUFNTyxPQUFOLENBQWNTLFFBQWQsQ0FBdUJOLFFBQXZCLEVBQWlDTyxLQUF6QztBQUNELEdBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDVixRQUFJQSxFQUFFQyxJQUFGLEtBQVcsUUFBWCxJQUF1QkQsRUFBRUMsSUFBRixLQUFXLFNBQXRDLEVBQWlELE1BQU1ELENBQU47QUFDbEQ7O0FBRUQsU0FBTyxJQUFQO0FBQ0QiLCJzb3VyY2VSb290IjoiL1VzZXJzL3N0ZXZlbnZhbmR1cm0vRGV2ZWxvcGVyL2VpZ2VuLXJlYWN0LW5hdGl2ZS1BcmR1aW5vL2FwcC9ub2RlX21vZHVsZXMvbWV0cm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9jb3JlL2xpYi9jb25maWcvZmlsZXMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWFrZVN0YXRpY0ZpbGVDYWNoZSA9IG1ha2VTdGF0aWNGaWxlQ2FjaGU7XG5cbmZ1bmN0aW9uIF9mcygpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImZzXCIpKTtcblxuICBfZnMgPSBmdW5jdGlvbiBfZnMoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfY2FjaGluZyA9IHJlcXVpcmUoXCIuLi9jYWNoaW5nXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBtYWtlU3RhdGljRmlsZUNhY2hlKGZuKSB7XG4gIHJldHVybiAoMCwgX2NhY2hpbmcubWFrZVN0cm9uZ0NhY2hlKSgoZmlsZXBhdGgsIGNhY2hlKSA9PiB7XG4gICAgaWYgKGNhY2hlLmludmFsaWRhdGUoKCkgPT4gZmlsZU10aW1lKGZpbGVwYXRoKSkgPT09IG51bGwpIHtcbiAgICAgIGNhY2hlLmZvcmV2ZXIoKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBmbihmaWxlcGF0aCwgX2ZzKCkuZGVmYXVsdC5yZWFkRmlsZVN5bmMoZmlsZXBhdGgsIFwidXRmOFwiKSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaWxlTXRpbWUoZmlsZXBhdGgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gK19mcygpLmRlZmF1bHQuc3RhdFN5bmMoZmlsZXBhdGgpLm10aW1lO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUuY29kZSAhPT0gXCJFTk9FTlRcIiAmJiBlLmNvZGUgIT09IFwiRU5PVERJUlwiKSB0aHJvdyBlO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59Il19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/caching.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/caching.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/caching.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/caching.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "caching.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.makeStrongCache = makeStrongCache;\nexports.makeWeakCache = makeWeakCache;\n\nfunction makeStrongCache(handler) {\n  return makeCachedFunction(new Map(), handler);\n}\n\nfunction makeWeakCache(handler) {\n  return makeCachedFunction(new WeakMap(), handler);\n}\n\nfunction makeCachedFunction(callCache, handler) {\n  return function cachedFunction(arg, data) {\n    let cachedValue = callCache.get(arg);\n\n    if (cachedValue) {\n      for (var _iterator = cachedValue, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        const _ref = _ref2;\n        const value = _ref.value,\n        valid = _ref.valid;\n        if (valid(data)) return value;\n      }\n    }\n\n    const cache = new CacheConfigurator(data);\n    const value = handler(arg, cache);\n    if (!cache.configured()) cache.forever();\n    cache.deactivate();\n\n    switch (cache.mode()) {\n      case \"forever\":\n        cachedValue = [{\n          value,\n          valid: () => true }];\n\n        callCache.set(arg, cachedValue);\n        break;\n\n      case \"invalidate\":\n        cachedValue = [{\n          value,\n          valid: cache.validator() }];\n\n        callCache.set(arg, cachedValue);\n        break;\n\n      case \"valid\":\n        if (cachedValue) {\n          cachedValue.push({\n            value,\n            valid: cache.validator() });\n\n        } else {\n          cachedValue = [{\n            value,\n            valid: cache.validator() }];\n\n          callCache.set(arg, cachedValue);\n        }}\n\n\n\n    return value;\n  };\n}\n\nclass CacheConfigurator {\n  constructor(data) {\n    this._active = true;\n    this._never = false;\n    this._forever = false;\n    this._invalidate = false;\n    this._configured = false;\n    this._pairs = [];\n    this._data = data;\n  }\n\n  simple() {\n    return makeSimpleConfigurator(this);\n  }\n\n  mode() {\n    if (this._never) return \"never\";\n    if (this._forever) return \"forever\";\n    if (this._invalidate) return \"invalidate\";\n    return \"valid\";\n  }\n\n  forever() {\n    if (!this._active) {\n      throw new Error(\"Cannot change caching after evaluation has completed.\");\n    }\n\n    if (this._never) {\n      throw new Error(\"Caching has already been configured with .never()\");\n    }\n\n    this._forever = true;\n    this._configured = true;\n  }\n\n  never() {\n    if (!this._active) {\n      throw new Error(\"Cannot change caching after evaluation has completed.\");\n    }\n\n    if (this._forever) {\n      throw new Error(\"Caching has already been configured with .forever()\");\n    }\n\n    this._never = true;\n    this._configured = true;\n  }\n\n  using(handler) {\n    if (!this._active) {\n      throw new Error(\"Cannot change caching after evaluation has completed.\");\n    }\n\n    if (this._never || this._forever) {\n      throw new Error(\"Caching has already been configured with .never or .forever()\");\n    }\n\n    this._configured = true;\n    const key = handler(this._data);\n\n    this._pairs.push([key, handler]);\n\n    return key;\n  }\n\n  invalidate(handler) {\n    if (!this._active) {\n      throw new Error(\"Cannot change caching after evaluation has completed.\");\n    }\n\n    if (this._never || this._forever) {\n      throw new Error(\"Caching has already been configured with .never or .forever()\");\n    }\n\n    this._invalidate = true;\n    this._configured = true;\n    const key = handler(this._data);\n\n    this._pairs.push([key, handler]);\n\n    return key;\n  }\n\n  validator() {\n    const pairs = this._pairs;\n    return data => pairs.every(([key, fn]) => key === fn(data));\n  }\n\n  deactivate() {\n    this._active = false;\n  }\n\n  configured() {\n    return this._configured;\n  }}\n\n\n\nfunction makeSimpleConfigurator(cache) {\n  function cacheFn(val) {\n    if (typeof val === \"boolean\") {\n      if (val) cache.forever();else cache.never();\n      return;\n    }\n\n    return cache.using(val);\n  }\n\n  cacheFn.forever = () => cache.forever();\n\n  cacheFn.never = () => cache.never();\n\n  cacheFn.using = cb => cache.using(() => cb());\n\n  cacheFn.invalidate = cb => cache.invalidate(() => cb());\n\n  return cacheFn;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/configuration.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/configuration.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/configuration.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/configuration.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
        "sourceFileName": "configuration.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.findRelativeConfig = findRelativeConfig;\nexports.findRootConfig = findRootConfig;\nexports.loadConfig = loadConfig;\n\nfunction _debug() {\n  const data = _interopRequireDefault(require(\"debug\"));\n\n  _debug = function _debug() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _json() {\n  const data = _interopRequireDefault(require(\"json5\"));\n\n  _json = function _json() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _resolve() {\n  const data = _interopRequireDefault(require(\"resolve\"));\n\n  _resolve = function _resolve() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _caching = require(\"../caching\");\n\nvar _configApi = _interopRequireDefault(require(\"../helpers/config-api\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nconst debug = (0, _debug().default)(\"babel:config:loading:files:configuration\");\nconst BABEL_CONFIG_JS_FILENAME = \"babel.config.js\";\nconst BABELRC_FILENAME = \".babelrc\";\nconst BABELRC_JS_FILENAME = \".babelrc.js\";\nconst BABELIGNORE_FILENAME = \".babelignore\";\n\nfunction findRelativeConfig(packageData, envName) {\n  let config = null;\n  let ignore = null;\n\n  const dirname = _path().default.dirname(packageData.filepath);\n\n  for (var _iterator = packageData.directories, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    const loc = _ref;\n\n    if (!config) {\n      config = [BABELRC_FILENAME, BABELRC_JS_FILENAME].reduce((previousConfig, name) => {\n        const filepath = _path().default.join(loc, name);\n\n        const config = readConfig(filepath, envName);\n\n        if (config && previousConfig) {\n          throw new Error(`Multiple configuration files found. Please remove one:\\n` + ` - ${_path().default.basename(previousConfig.filepath)}\\n` + ` - ${name}\\n` + `from ${loc}`);\n        }\n\n        return config || previousConfig;\n      }, null);\n      const pkgConfig = packageData.pkg && packageData.pkg.dirname === loc ? packageToBabelConfig(packageData.pkg) : null;\n\n      if (pkgConfig) {\n        if (config) {\n          throw new Error(`Multiple configuration files found. Please remove one:\\n` + ` - ${_path().default.basename(pkgConfig.filepath)}#babel\\n` + ` - ${_path().default.basename(config.filepath)}\\n` + `from ${loc}`);\n        }\n\n        config = pkgConfig;\n      }\n\n      if (config) {\n        debug(\"Found configuration %o from %o.\", config.filepath, dirname);\n      }\n    }\n\n    if (!ignore) {\n      const ignoreLoc = _path().default.join(loc, BABELIGNORE_FILENAME);\n\n      ignore = readIgnoreConfig(ignoreLoc);\n\n      if (ignore) {\n        debug(\"Found ignore %o from %o.\", ignore.filepath, dirname);\n      }\n    }\n  }\n\n  return {\n    config,\n    ignore };\n\n}\n\nfunction findRootConfig(dirname, envName) {\n  const filepath = _path().default.resolve(dirname, BABEL_CONFIG_JS_FILENAME);\n\n  const conf = readConfig(filepath, envName);\n\n  if (conf) {\n    debug(\"Found root config %o in $o.\", BABEL_CONFIG_JS_FILENAME, dirname);\n  }\n\n  return conf;\n}\n\nfunction loadConfig(name, dirname, envName) {\n  const filepath = _resolve().default.sync(name, {\n    basedir: dirname });\n\n\n  const conf = readConfig(filepath, envName);\n\n  if (!conf) {\n    throw new Error(`Config file ${filepath} contains no configuration data`);\n  }\n\n  debug(\"Loaded config %o from $o.\", name, dirname);\n  return conf;\n}\n\nfunction readConfig(filepath, envName) {\n  return _path().default.extname(filepath) === \".js\" ? readConfigJS(filepath, {\n    envName }) :\n  readConfigJSON5(filepath);\n}\n\nconst LOADING_CONFIGS = new Set();\nconst readConfigJS = (0, _caching.makeStrongCache)((filepath, cache) => {\n  if (!_fs().default.existsSync(filepath)) {\n    cache.forever();\n    return null;\n  }\n\n  if (LOADING_CONFIGS.has(filepath)) {\n    cache.never();\n    debug(\"Auto-ignoring usage of config %o.\", filepath);\n    return {\n      filepath,\n      dirname: _path().default.dirname(filepath),\n      options: {} };\n\n  }\n\n  let options;\n\n  try {\n    LOADING_CONFIGS.add(filepath);\n\n    const configModule = require(filepath);\n\n    options = configModule && configModule.__esModule ? configModule.default || undefined : configModule;\n  } catch (err) {\n    err.message = `${filepath}: Error while loading config - ${err.message}`;\n    throw err;\n  } finally {\n    LOADING_CONFIGS.delete(filepath);\n  }\n\n  if (typeof options === \"function\") {\n    options = options((0, _configApi.default)(cache));\n    if (!cache.configured()) throwConfigError();\n  }\n\n  if (!options || typeof options !== \"object\" || Array.isArray(options)) {\n    throw new Error(`${filepath}: Configuration should be an exported JavaScript object.`);\n  }\n\n  if (typeof options.then === \"function\") {\n    throw new Error(`You appear to be using an async configuration, ` + `which your current version of Babel does not support. ` + `We may add support for this in the future, ` + `but if you're on the most recent version of @babel/core and still ` + `seeing this error, then you'll need to synchronously return your config.`);\n  }\n\n  return {\n    filepath,\n    dirname: _path().default.dirname(filepath),\n    options };\n\n});\nconst packageToBabelConfig = (0, _caching.makeWeakCache)(file => {\n  if (typeof file.options.babel === \"undefined\") return null;\n  const babel = file.options.babel;\n\n  if (typeof babel !== \"object\" || Array.isArray(babel) || babel === null) {\n    throw new Error(`${file.filepath}: .babel property must be an object`);\n  }\n\n  return {\n    filepath: file.filepath,\n    dirname: file.dirname,\n    options: babel };\n\n});\nconst readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {\n  let options;\n\n  try {\n    options = _json().default.parse(content);\n  } catch (err) {\n    err.message = `${filepath}: Error while parsing config - ${err.message}`;\n    throw err;\n  }\n\n  if (!options) throw new Error(`${filepath}: No config detected`);\n\n  if (typeof options !== \"object\") {\n    throw new Error(`${filepath}: Config returned typeof ${typeof options}`);\n  }\n\n  if (Array.isArray(options)) {\n    throw new Error(`${filepath}: Expected config object but found array`);\n  }\n\n  return {\n    filepath,\n    dirname: _path().default.dirname(filepath),\n    options };\n\n});\nconst readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {\n  const ignore = content.split(\"\\n\").map(line => line.replace(/#(.*?)$/, \"\").trim()).filter(line => !!line);\n  return {\n    filepath,\n    dirname: _path().default.dirname(filepath),\n    ignore };\n\n});\n\nfunction throwConfigError() {\n  throw new Error(`\\\nCaching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don't call this function again.\n  api.cache(true);\n\n  // Don't cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => process.env.NODE_ENV);\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};`);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers/config-api.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers/config-api.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers/config-api.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers/config-api.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers",
        "sourceFileName": "config-api.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = makeAPI;\n\nfunction _semver() {\n  const data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _ = require(\"../../\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction makeAPI(cache) {\n  const env = value => cache.using(data => {\n    if (typeof value === \"undefined\") return data.envName;\n    if (typeof value === \"function\") return value(data.envName);\n    if (!Array.isArray(value)) value = [value];\n    return value.some(entry => {\n      if (typeof entry !== \"string\") {\n        throw new Error(\"Unexpected non-string value\");\n      }\n\n      return entry === data.envName;\n    });\n  });\n\n  return {\n    version: _.version,\n    cache: cache.simple(),\n    env,\n    async: () => false,\n    assertVersion };\n\n}\n\nfunction assertVersion(range) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n\n    range = `^${range}.0.0-0`;\n  }\n\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n\n  if (_semver().default.satisfies(_.version, range)) return;\n  const limit = Error.stackTraceLimit;\n\n  if (typeof limit === \"number\" && limit < 25) {\n    Error.stackTraceLimit = 25;\n  }\n\n  const err = new Error(`Requires Babel \"${range}\", but was loaded with \"${_.version}\". ` + `If you are sure you have a compatible version of @babel/core, ` + `it is likely that something in your build process is loading the ` + `wrong version. Inspect the stack trace of this error to look for ` + `the first entry that doesn't mention \"@babel/core\" or \"babel-core\" ` + `to see what is calling Babel.`);\n\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version: _.version,\n    range });\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy1hcGkuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwibWFrZUFQSSIsIl9zZW12ZXIiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfIiwib2JqIiwiX19lc01vZHVsZSIsImNhY2hlIiwiZW52IiwidXNpbmciLCJlbnZOYW1lIiwiQXJyYXkiLCJpc0FycmF5Iiwic29tZSIsImVudHJ5IiwiRXJyb3IiLCJ2ZXJzaW9uIiwic2ltcGxlIiwiYXN5bmMiLCJhc3NlcnRWZXJzaW9uIiwicmFuZ2UiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJzYXRpc2ZpZXMiLCJsaW1pdCIsInN0YWNrVHJhY2VMaW1pdCIsImVyciIsImFzc2lnbiIsImNvZGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsT0FBUixHQUFrQkMsT0FBbEI7O0FBRUEsU0FBU0MsT0FBVCxHQUFtQjtBQUNqQixRQUFNQyxPQUFPQyx1QkFBdUJDLFFBQVEsUUFBUixDQUF2QixDQUFiOztBQUVBSCxZQUFVLFNBQVNBLE9BQVQsR0FBbUI7QUFDM0IsV0FBT0MsSUFBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT0EsSUFBUDtBQUNEOztBQUVELElBQUlHLElBQUlELFFBQVEsUUFBUixDQUFSOztBQUVBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVQLFNBQVNPLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNOLE9BQVQsQ0FBaUJRLEtBQWpCLEVBQXdCO0FBQ3RCLFFBQU1DLE1BQU1YLFNBQVNVLE1BQU1FLEtBQU4sQ0FBWVIsUUFBUTtBQUN2QyxRQUFJLE9BQU9KLEtBQVAsS0FBaUIsV0FBckIsRUFBa0MsT0FBT0ksS0FBS1MsT0FBWjtBQUNsQyxRQUFJLE9BQU9iLEtBQVAsS0FBaUIsVUFBckIsRUFBaUMsT0FBT0EsTUFBTUksS0FBS1MsT0FBWCxDQUFQO0FBQ2pDLFFBQUksQ0FBQ0MsTUFBTUMsT0FBTixDQUFjZixLQUFkLENBQUwsRUFBMkJBLFFBQVEsQ0FBQ0EsS0FBRCxDQUFSO0FBQzNCLFdBQU9BLE1BQU1nQixJQUFOLENBQVdDLFNBQVM7QUFDekIsVUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCLGNBQU0sSUFBSUMsS0FBSixDQUFVLDZCQUFWLENBQU47QUFDRDs7QUFFRCxhQUFPRCxVQUFVYixLQUFLUyxPQUF0QjtBQUNELEtBTk0sQ0FBUDtBQU9ELEdBWG9CLENBQXJCOztBQWFBLFNBQU87QUFDTE0sYUFBU1osRUFBRVksT0FETjtBQUVMVCxXQUFPQSxNQUFNVSxNQUFOLEVBRkY7QUFHTFQsT0FISztBQUlMVSxXQUFPLE1BQU0sS0FKUjtBQUtMQyxpQkFMSyxFQUFQOztBQU9EOztBQUVELFNBQVNBLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQThCO0FBQzVCLE1BQUksT0FBT0EsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM3QixRQUFJLENBQUNDLE9BQU9DLFNBQVAsQ0FBaUJGLEtBQWpCLENBQUwsRUFBOEI7QUFDNUIsWUFBTSxJQUFJTCxLQUFKLENBQVUsbUNBQVYsQ0FBTjtBQUNEOztBQUVESyxZQUFTLElBQUdBLEtBQU0sUUFBbEI7QUFDRDs7QUFFRCxNQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsVUFBTSxJQUFJTCxLQUFKLENBQVUsbUNBQVYsQ0FBTjtBQUNEOztBQUVELE1BQUlmLFVBQVVGLE9BQVYsQ0FBa0J5QixTQUFsQixDQUE0Qm5CLEVBQUVZLE9BQTlCLEVBQXVDSSxLQUF2QyxDQUFKLEVBQW1EO0FBQ25ELFFBQU1JLFFBQVFULE1BQU1VLGVBQXBCOztBQUVBLE1BQUksT0FBT0QsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsUUFBUSxFQUF6QyxFQUE2QztBQUMzQ1QsVUFBTVUsZUFBTixHQUF3QixFQUF4QjtBQUNEOztBQUVELFFBQU1DLE1BQU0sSUFBSVgsS0FBSixDQUFXLG1CQUFrQkssS0FBTSwyQkFBMEJoQixFQUFFWSxPQUFRLEtBQTdELEdBQXFFLGdFQUFyRSxHQUF3SSxtRUFBeEksR0FBOE0sbUVBQTlNLEdBQW9SLHFFQUFwUixHQUE0ViwrQkFBdFcsQ0FBWjs7QUFFQSxNQUFJLE9BQU9RLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0JULFVBQU1VLGVBQU4sR0FBd0JELEtBQXhCO0FBQ0Q7O0FBRUQsUUFBTTlCLE9BQU9pQyxNQUFQLENBQWNELEdBQWQsRUFBbUI7QUFDdkJFLFVBQU0sMkJBRGlCO0FBRXZCWixhQUFTWixFQUFFWSxPQUZZO0FBR3ZCSSxTQUh1QixFQUFuQixDQUFOOztBQUtEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvY29uZmlnL2hlbHBlcnMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1ha2VBUEk7XG5cbmZ1bmN0aW9uIF9zZW12ZXIoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJzZW12ZXJcIikpO1xuXG4gIF9zZW12ZXIgPSBmdW5jdGlvbiBfc2VtdmVyKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG52YXIgXyA9IHJlcXVpcmUoXCIuLi8uLi9cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIG1ha2VBUEkoY2FjaGUpIHtcbiAgY29uc3QgZW52ID0gdmFsdWUgPT4gY2FjaGUudXNpbmcoZGF0YSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGRhdGEuZW52TmFtZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB2YWx1ZShkYXRhLmVudk5hbWUpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHZhbHVlID0gW3ZhbHVlXTtcbiAgICByZXR1cm4gdmFsdWUuc29tZShlbnRyeSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgbm9uLXN0cmluZyB2YWx1ZVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVudHJ5ID09PSBkYXRhLmVudk5hbWU7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgdmVyc2lvbjogXy52ZXJzaW9uLFxuICAgIGNhY2hlOiBjYWNoZS5zaW1wbGUoKSxcbiAgICBlbnYsXG4gICAgYXN5bmM6ICgpID0+IGZhbHNlLFxuICAgIGFzc2VydFZlcnNpb25cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VmVyc2lvbihyYW5nZSkge1xuICBpZiAodHlwZW9mIHJhbmdlID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHJhbmdlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc3RyaW5nIG9yIGludGVnZXIgdmFsdWUuXCIpO1xuICAgIH1cblxuICAgIHJhbmdlID0gYF4ke3JhbmdlfS4wLjAtMGA7XG4gIH1cblxuICBpZiAodHlwZW9mIHJhbmdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc3RyaW5nIG9yIGludGVnZXIgdmFsdWUuXCIpO1xuICB9XG5cbiAgaWYgKF9zZW12ZXIoKS5kZWZhdWx0LnNhdGlzZmllcyhfLnZlcnNpb24sIHJhbmdlKSkgcmV0dXJuO1xuICBjb25zdCBsaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdDtcblxuICBpZiAodHlwZW9mIGxpbWl0ID09PSBcIm51bWJlclwiICYmIGxpbWl0IDwgMjUpIHtcbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAyNTtcbiAgfVxuXG4gIGNvbnN0IGVyciA9IG5ldyBFcnJvcihgUmVxdWlyZXMgQmFiZWwgXCIke3JhbmdlfVwiLCBidXQgd2FzIGxvYWRlZCB3aXRoIFwiJHtfLnZlcnNpb259XCIuIGAgKyBgSWYgeW91IGFyZSBzdXJlIHlvdSBoYXZlIGEgY29tcGF0aWJsZSB2ZXJzaW9uIG9mIEBiYWJlbC9jb3JlLCBgICsgYGl0IGlzIGxpa2VseSB0aGF0IHNvbWV0aGluZyBpbiB5b3VyIGJ1aWxkIHByb2Nlc3MgaXMgbG9hZGluZyB0aGUgYCArIGB3cm9uZyB2ZXJzaW9uLiBJbnNwZWN0IHRoZSBzdGFjayB0cmFjZSBvZiB0aGlzIGVycm9yIHRvIGxvb2sgZm9yIGAgKyBgdGhlIGZpcnN0IGVudHJ5IHRoYXQgZG9lc24ndCBtZW50aW9uIFwiQGJhYmVsL2NvcmVcIiBvciBcImJhYmVsLWNvcmVcIiBgICsgYHRvIHNlZSB3aGF0IGlzIGNhbGxpbmcgQmFiZWwuYCk7XG5cbiAgaWYgKHR5cGVvZiBsaW1pdCA9PT0gXCJudW1iZXJcIikge1xuICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IGxpbWl0O1xuICB9XG5cbiAgdGhyb3cgT2JqZWN0LmFzc2lnbihlcnIsIHtcbiAgICBjb2RlOiBcIkJBQkVMX1ZFUlNJT05fVU5TVVBQT1JURURcIixcbiAgICB2ZXJzaW9uOiBfLnZlcnNpb24sXG4gICAgcmFuZ2VcbiAgfSk7XG59Il19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/index.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/index.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/index.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/index.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\"; /**\n               * Detect Electron renderer process, which is node, but we should\n               * treat as a browser.\n               */\n\nif (typeof process === 'undefined' || process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJ0eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJjQUFBOzs7OztBQUtBLElBQUksT0FBT0EsT0FBUCxLQUFtQixXQUFuQixJQUFrQ0EsUUFBUUMsSUFBUixLQUFpQixVQUF2RCxFQUFtRTtBQUNqRUMsU0FBT0MsT0FBUCxHQUFpQkMsUUFBUSxjQUFSLENBQWpCO0FBQ0QsQ0FGRCxNQUVPO0FBQ0xGLFNBQU9DLE9BQVAsR0FBaUJDLFFBQVEsV0FBUixDQUFqQjtBQUNEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9ub2RlX21vZHVsZXMvZGVidWcvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZXRlY3QgRWxlY3Ryb24gcmVuZGVyZXIgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm9kZS5qcycpO1xufVxuIl19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528223748
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/node.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/node.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/node.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/node.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src",
        "sourceFileName": "node.js"
      }
    },
    "ast": null,
    "code": "\"use strict\"; /**\n               * Module dependencies.\n               */\n\nvar tty = require('tty');\nvar util = require('util');\n\n/**\n                             * This is the Node.js implementation of `debug()`.\n                             *\n                             * Expose `debug()` as the module.\n                             */\n\nexports = module.exports = require('./debug');\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n                                * Colors.\n                                */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n  var supportsColor = require('supports-color');\n  if (supportsColor && supportsColor.level >= 2) {\n    exports.colors = [\n    20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68,\n    69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134,\n    135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,\n    172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204,\n    205, 206, 207, 208, 209, 214, 215, 220, 221];\n\n  }\n} catch (err) {\n\n} // swallow - we only care if `supports-color` is available; it doesn't have to be.\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // camel-case\n  var prop = key.\n  substring(6).\n  toLowerCase().\n  replace(/_([a-z])/g, function (_, k) {return k.toUpperCase();});\n\n  // coerce string value into JS value\n  var val = process.env[key];\n  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else\n  if (/^(no|off|false|disabled)$/i.test(val)) val = false;else\n  if (val === 'null') val = null;else\n  val = Number(val);\n\n  obj[prop] = val;\n  return obj;\n}, {});\n\n/**\n         * Is stdout a TTY? Colored output is enabled when `true`.\n         */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts ?\n  Boolean(exports.inspectOpts.colors) :\n  tty.isatty(process.stderr.fd);\n}\n\n/**\n   * Map %o to `util.inspect()`, all on a single line.\n   */\n\nexports.formatters.o = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts).\n  split('\\n').map(function (str) {\n    return str.trim();\n  }).join(' ');\n};\n\n/**\n    * Map %o to `util.inspect()`, allowing multiple lines if needed.\n    */\n\nexports.formatters.O = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n\n/**\n    * Adds ANSI color escape codes if enabled.\n    *\n    * @api public\n    */\n\nfunction formatArgs(args) {\n  var name = this.namespace;\n  var useColors = this.useColors;\n\n  if (useColors) {\n    var c = this.color;\n    var colorCode = '\\u001b[3' + (c < 8 ? c : '8;5;' + c);\n    var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\\u001b[0m';\n\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\\u001b[0m');\n  } else {\n    args[0] = getDate() + name + ' ' + args[0];\n  }\n}\n\nfunction getDate() {\n  if (exports.inspectOpts.hideDate) {\n    return '';\n  } else {\n    return new Date().toISOString() + ' ';\n  }\n}\n\n/**\n   * Invokes `util.format()` with the specified arguments and writes to stderr.\n   */\n\nfunction log() {\n  return process.stderr.write(util.format.apply(util, arguments) + '\\n');\n}\n\n/**\n   * Save `namespaces`.\n   *\n   * @param {String} namespaces\n   * @api private\n   */\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n\n/**\n   * Load `namespaces`.\n   *\n   * @return {String} returns the previously persisted debug modes\n   * @api private\n   */\n\nfunction load() {\n  return process.env.DEBUG;\n}\n\n/**\n   * Init logic for `debug` instances.\n   *\n   * Create a new `inspectOpts` object in case `useColors` is set\n   * differently for a particular `debug` instance.\n   */\n\nfunction init(debug) {\n  debug.inspectOpts = {};\n\n  var keys = Object.keys(exports.inspectOpts);\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\n/**\n   * Enable namespaces listed in `process.env.DEBUG` initially.\n   */\n\nexports.enable(load());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528223748
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/debug.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/debug.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/debug.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src/debug.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/debug/src",
        "sourceFileName": "debug.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n/**\n               * This is the common logic for both the Node.js and web browser\n               * implementations of `debug()`.\n               *\n               * Expose `debug()` as the module.\n               */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n                                   * Active `debug` instances.\n                                   */\nexports.instances = [];\n\n/**\n                         * The currently active debug mode names, and names to skip.\n                         */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n                     * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n                     *\n                     * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n                     */\n\nexports.formatters = {};\n\n/**\n                          * Select a color.\n                          * @param {String} namespace\n                          * @return {Number}\n                          * @api private\n                          */\n\nfunction selectColor(namespace) {\n  var hash = 0,i;\n\n  for (i in namespace) {\n    hash = (hash << 5) - hash + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n   * Create a debugger with the given `namespace`.\n   *\n   * @param {String} namespace\n   * @return {Function}\n   * @api public\n   */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy() {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n   * Enables a debug mode by namespaces. This can include modes\n   * separated by a colon and wildcards.\n   *\n   * @param {String} namespaces\n   * @api public\n   */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n   * Disable debug output.\n   *\n   * @api public\n   */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n   * Returns true if the given mode name is enabled, false otherwise.\n   *\n   * @param {String} name\n   * @return {Boolean}\n   * @api public\n   */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n   * Coerce `val`.\n   *\n   * @param {Mixed} val\n   * @return {Mixed}\n   * @api private\n   */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528223748
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/supports-color\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/supports-color/index.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/supports-color",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/supports-color/index.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/supports-color/index.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/supports-color/index.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/supports-color",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "'use strict';\nvar argv = process.argv;\n\nvar terminator = argv.indexOf('--');\nvar hasFlag = function (flag) {\n  flag = '--' + flag;\n  var pos = argv.indexOf(flag);\n  return pos !== -1 && (terminator !== -1 ? pos < terminator : true);\n};\n\nmodule.exports = function () {\n  if ('FORCE_COLOR' in process.env) {\n    return true;\n  }\n\n  if (hasFlag('no-color') ||\n  hasFlag('no-colors') ||\n  hasFlag('color=false')) {\n    return false;\n  }\n\n  if (hasFlag('color') ||\n  hasFlag('colors') ||\n  hasFlag('color=true') ||\n  hasFlag('color=always')) {\n    return true;\n  }\n\n  if (process.stdout && !process.stdout.isTTY) {\n    return false;\n  }\n\n  if (process.platform === 'win32') {\n    return true;\n  }\n\n  if ('COLORTERM' in process.env) {\n    return true;\n  }\n\n  if (process.env.TERM === 'dumb') {\n    return false;\n  }\n\n  if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {\n    return true;\n  }\n\n  return false;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImFyZ3YiLCJwcm9jZXNzIiwidGVybWluYXRvciIsImluZGV4T2YiLCJoYXNGbGFnIiwiZmxhZyIsInBvcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbnYiLCJzdGRvdXQiLCJpc1RUWSIsInBsYXRmb3JtIiwiVEVSTSIsInRlc3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsSUFBSUEsT0FBT0MsUUFBUUQsSUFBbkI7O0FBRUEsSUFBSUUsYUFBYUYsS0FBS0csT0FBTCxDQUFhLElBQWIsQ0FBakI7QUFDQSxJQUFJQyxVQUFVLFVBQVVDLElBQVYsRUFBZ0I7QUFDN0JBLFNBQU8sT0FBT0EsSUFBZDtBQUNBLE1BQUlDLE1BQU1OLEtBQUtHLE9BQUwsQ0FBYUUsSUFBYixDQUFWO0FBQ0EsU0FBT0MsUUFBUSxDQUFDLENBQVQsS0FBZUosZUFBZSxDQUFDLENBQWhCLEdBQW9CSSxNQUFNSixVQUExQixHQUF1QyxJQUF0RCxDQUFQO0FBQ0EsQ0FKRDs7QUFNQUssT0FBT0MsT0FBUCxHQUFrQixZQUFZO0FBQzdCLE1BQUksaUJBQWlCUCxRQUFRUSxHQUE3QixFQUFrQztBQUNqQyxXQUFPLElBQVA7QUFDQTs7QUFFRCxNQUFJTCxRQUFRLFVBQVI7QUFDSEEsVUFBUSxXQUFSLENBREc7QUFFSEEsVUFBUSxhQUFSLENBRkQsRUFFeUI7QUFDeEIsV0FBTyxLQUFQO0FBQ0E7O0FBRUQsTUFBSUEsUUFBUSxPQUFSO0FBQ0hBLFVBQVEsUUFBUixDQURHO0FBRUhBLFVBQVEsWUFBUixDQUZHO0FBR0hBLFVBQVEsY0FBUixDQUhELEVBRzBCO0FBQ3pCLFdBQU8sSUFBUDtBQUNBOztBQUVELE1BQUlILFFBQVFTLE1BQVIsSUFBa0IsQ0FBQ1QsUUFBUVMsTUFBUixDQUFlQyxLQUF0QyxFQUE2QztBQUM1QyxXQUFPLEtBQVA7QUFDQTs7QUFFRCxNQUFJVixRQUFRVyxRQUFSLEtBQXFCLE9BQXpCLEVBQWtDO0FBQ2pDLFdBQU8sSUFBUDtBQUNBOztBQUVELE1BQUksZUFBZVgsUUFBUVEsR0FBM0IsRUFBZ0M7QUFDL0IsV0FBTyxJQUFQO0FBQ0E7O0FBRUQsTUFBSVIsUUFBUVEsR0FBUixDQUFZSSxJQUFaLEtBQXFCLE1BQXpCLEVBQWlDO0FBQ2hDLFdBQU8sS0FBUDtBQUNBOztBQUVELE1BQUksaURBQWlEQyxJQUFqRCxDQUFzRGIsUUFBUVEsR0FBUixDQUFZSSxJQUFsRSxDQUFKLEVBQTZFO0FBQzVFLFdBQU8sSUFBUDtBQUNBOztBQUVELFNBQU8sS0FBUDtBQUNBLENBdkNnQixFQUFqQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgYXJndiA9IHByb2Nlc3MuYXJndjtcblxudmFyIHRlcm1pbmF0b3IgPSBhcmd2LmluZGV4T2YoJy0tJyk7XG52YXIgaGFzRmxhZyA9IGZ1bmN0aW9uIChmbGFnKSB7XG5cdGZsYWcgPSAnLS0nICsgZmxhZztcblx0dmFyIHBvcyA9IGFyZ3YuaW5kZXhPZihmbGFnKTtcblx0cmV0dXJuIHBvcyAhPT0gLTEgJiYgKHRlcm1pbmF0b3IgIT09IC0xID8gcG9zIDwgdGVybWluYXRvciA6IHRydWUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuXHRpZiAoJ0ZPUkNFX0NPTE9SJyBpbiBwcm9jZXNzLmVudikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKGhhc0ZsYWcoJ25vLWNvbG9yJykgfHxcblx0XHRoYXNGbGFnKCduby1jb2xvcnMnKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPWZhbHNlJykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoaGFzRmxhZygnY29sb3InKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9ycycpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9dHJ1ZScpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9YWx3YXlzJykpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmIChwcm9jZXNzLnN0ZG91dCAmJiAhcHJvY2Vzcy5zdGRvdXQuaXNUVFkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCdDT0xPUlRFUk0nIGluIHByb2Nlc3MuZW52KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAocHJvY2Vzcy5lbnYuVEVSTSA9PT0gJ2R1bWInKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKC9ec2NyZWVufF54dGVybXxednQxMDB8Y29sb3J8YW5zaXxjeWd3aW58bGludXgvaS50ZXN0KHByb2Nlc3MuZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59KSgpO1xuIl19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528220786
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/plugins.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/plugins.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/plugins.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files/plugins.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/files",
        "sourceFileName": "plugins.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.resolvePlugin = resolvePlugin;\nexports.resolvePreset = resolvePreset;\nexports.loadPlugin = loadPlugin;\nexports.loadPreset = loadPreset;\n\nfunction _debug() {\n  const data = _interopRequireDefault(require(\"debug\"));\n\n  _debug = function _debug() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _resolve() {\n  const data = _interopRequireDefault(require(\"resolve\"));\n\n  _resolve = function _resolve() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nconst debug = (0, _debug().default)(\"babel:config:loading:files:plugins\");\nconst EXACT_RE = /^module:/;\nconst BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\\/|babel-plugin-)/;\nconst BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\\/|babel-preset-)/;\nconst BABEL_PLUGIN_ORG_RE = /^(@babel\\/)(?!plugin-|[^/]+\\/)/;\nconst BABEL_PRESET_ORG_RE = /^(@babel\\/)(?!preset-|[^/]+\\/)/;\nconst OTHER_PLUGIN_ORG_RE = /^(@(?!babel\\/)[^/]+\\/)(?!babel-plugin-|[^/]+\\/)/;\nconst OTHER_PRESET_ORG_RE = /^(@(?!babel\\/)[^/]+\\/)(?!babel-preset-|[^/]+\\/)/;\n\nfunction resolvePlugin(name, dirname) {\n  return resolveStandardizedName(\"plugin\", name, dirname);\n}\n\nfunction resolvePreset(name, dirname) {\n  return resolveStandardizedName(\"preset\", name, dirname);\n}\n\nfunction loadPlugin(name, dirname) {\n  const filepath = resolvePlugin(name, dirname);\n\n  if (!filepath) {\n    throw new Error(`Plugin ${name} not found relative to ${dirname}`);\n  }\n\n  const value = requireModule(\"plugin\", filepath);\n  debug(\"Loaded plugin %o from %o.\", name, dirname);\n  return {\n    filepath,\n    value };\n\n}\n\nfunction loadPreset(name, dirname) {\n  const filepath = resolvePreset(name, dirname);\n\n  if (!filepath) {\n    throw new Error(`Preset ${name} not found relative to ${dirname}`);\n  }\n\n  const value = requireModule(\"preset\", filepath);\n  debug(\"Loaded preset %o from %o.\", name, dirname);\n  return {\n    filepath,\n    value };\n\n}\n\nfunction standardizeName(type, name) {\n  if (_path().default.isAbsolute(name)) return name;\n  const isPreset = type === \"preset\";\n  return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(EXACT_RE, \"\");\n}\n\nfunction resolveStandardizedName(type, name, dirname = process.cwd()) {\n  const standardizedName = standardizeName(type, name);\n\n  try {\n    return _resolve().default.sync(standardizedName, {\n      basedir: dirname });\n\n  } catch (e) {\n    if (e.code !== \"MODULE_NOT_FOUND\") throw e;\n\n    if (standardizedName !== name) {\n      let resolvedOriginal = false;\n\n      try {\n        _resolve().default.sync(name, {\n          basedir: dirname });\n\n\n        resolvedOriginal = true;\n      } catch (e2) {}\n\n      if (resolvedOriginal) {\n        e.message += `\\n- If you want to resolve \"${name}\", use \"module:${name}\"`;\n      }\n    }\n\n    let resolvedBabel = false;\n\n    try {\n      _resolve().default.sync(standardizeName(type, \"@babel/\" + name), {\n        basedir: dirname });\n\n\n      resolvedBabel = true;\n    } catch (e2) {}\n\n    if (resolvedBabel) {\n      e.message += `\\n- Did you mean \"@babel/${name}\"?`;\n    }\n\n    let resolvedOppositeType = false;\n    const oppositeType = type === \"preset\" ? \"plugin\" : \"preset\";\n\n    try {\n      _resolve().default.sync(standardizeName(oppositeType, name), {\n        basedir: dirname });\n\n\n      resolvedOppositeType = true;\n    } catch (e2) {}\n\n    if (resolvedOppositeType) {\n      e.message += `\\n- Did you accidentally pass a ${type} as a ${oppositeType}?`;\n    }\n\n    throw e;\n  }\n}\n\nconst LOADING_MODULES = new Set();\n\nfunction requireModule(type, name) {\n  if (LOADING_MODULES.has(name)) {\n    throw new Error(`Reentrant ${type} detected trying to load \"${name}\". This module is not ignored ` + \"and is trying to load itself while compiling itself, leading to a dependency cycle. \" + 'We recommend adding it to your \"ignore\" list in your babelrc, or to a .babelignore.');\n  }\n\n  try {\n    LOADING_MODULES.add(name);\n    return require(name);\n  } finally {\n    LOADING_MODULES.delete(name);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers/environment.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers/environment.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers/environment.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers/environment.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/helpers",
        "sourceFileName": "environment.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.getEnv = getEnv;\n\nfunction getEnv(defaultValue = \"development\") {\n  return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVudmlyb25tZW50LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RW52IiwiZGVmYXVsdFZhbHVlIiwicHJvY2VzcyIsImVudiIsIkJBQkVMX0VOViIsIk5PREVfRU5WIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU8sSUFEb0MsRUFBN0M7O0FBR0FELFFBQVFFLE1BQVIsR0FBaUJBLE1BQWpCOztBQUVBLFNBQVNBLE1BQVQsQ0FBZ0JDLGVBQWUsYUFBL0IsRUFBOEM7QUFDNUMsU0FBT0MsUUFBUUMsR0FBUixDQUFZQyxTQUFaLElBQXlCRixRQUFRQyxHQUFSLENBQVlFLFFBQXJDLElBQWlESixZQUF4RDtBQUNEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvY29uZmlnL2hlbHBlcnMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0RW52ID0gZ2V0RW52O1xuXG5mdW5jdGlvbiBnZXRFbnYoZGVmYXVsdFZhbHVlID0gXCJkZXZlbG9wbWVudFwiKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5CQUJFTF9FTlYgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgZGVmYXVsdFZhbHVlO1xufSJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/index.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/index.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/index.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/index.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.loadOptions = loadOptions;\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _full.default;\n  } });\n\nObject.defineProperty(exports, \"loadPartialConfig\", {\n  enumerable: true,\n  get: function get() {\n    return _partial.loadPartialConfig;\n  } });\n\nexports.OptionManager = void 0;\n\nvar _full = _interopRequireDefault(require(\"./full\"));\n\nvar _partial = require(\"./partial\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction loadOptions(opts) {\n  const config = (0, _full.default)(opts);\n  return config ? config.options : null;\n}\n\nclass OptionManager {\n  init(opts) {\n    return loadOptions(opts);\n  }}\n\n\n\nexports.OptionManager = OptionManager;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibG9hZE9wdGlvbnMiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2Z1bGwiLCJkZWZhdWx0IiwiX3BhcnRpYWwiLCJsb2FkUGFydGlhbENvbmZpZyIsIk9wdGlvbk1hbmFnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJvcHRzIiwiY29uZmlnIiwib3B0aW9ucyIsImluaXQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsV0FBUixHQUFzQkEsV0FBdEI7QUFDQUosT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsU0FBL0IsRUFBMEM7QUFDeENHLGNBQVksSUFENEI7QUFFeENDLE9BQUssU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLFdBQU9DLE1BQU1DLE9BQWI7QUFDRCxHQUp1QyxFQUExQzs7QUFNQVIsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsbUJBQS9CLEVBQW9EO0FBQ2xERyxjQUFZLElBRHNDO0FBRWxEQyxPQUFLLFNBQVNBLEdBQVQsR0FBZTtBQUNsQixXQUFPRyxTQUFTQyxpQkFBaEI7QUFDRCxHQUppRCxFQUFwRDs7QUFNQVIsUUFBUVMsYUFBUixHQUF3QixLQUFLLENBQTdCOztBQUVBLElBQUlKLFFBQVFLLHVCQUF1QkMsUUFBUSxRQUFSLENBQXZCLENBQVo7O0FBRUEsSUFBSUosV0FBV0ksUUFBUSxXQUFSLENBQWY7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NFLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRU4sU0FBU00sR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsU0FBU1YsV0FBVCxDQUFxQlksSUFBckIsRUFBMkI7QUFDekIsUUFBTUMsU0FBUyxDQUFDLEdBQUdWLE1BQU1DLE9BQVYsRUFBbUJRLElBQW5CLENBQWY7QUFDQSxTQUFPQyxTQUFTQSxPQUFPQyxPQUFoQixHQUEwQixJQUFqQztBQUNEOztBQUVELE1BQU1QLGFBQU4sQ0FBb0I7QUFDbEJRLE9BQUtILElBQUwsRUFBVztBQUNULFdBQU9aLFlBQVlZLElBQVosQ0FBUDtBQUNELEdBSGlCOzs7O0FBT3BCZCxRQUFRUyxhQUFSLEdBQXdCQSxhQUF4QiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvQGJhYmVsL2NvcmUvbGliL2NvbmZpZyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5sb2FkT3B0aW9ucyA9IGxvYWRPcHRpb25zO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZnVsbC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxvYWRQYXJ0aWFsQ29uZmlnXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9wYXJ0aWFsLmxvYWRQYXJ0aWFsQ29uZmlnO1xuICB9XG59KTtcbmV4cG9ydHMuT3B0aW9uTWFuYWdlciA9IHZvaWQgMDtcblxudmFyIF9mdWxsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9mdWxsXCIpKTtcblxudmFyIF9wYXJ0aWFsID0gcmVxdWlyZShcIi4vcGFydGlhbFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gbG9hZE9wdGlvbnMob3B0cykge1xuICBjb25zdCBjb25maWcgPSAoMCwgX2Z1bGwuZGVmYXVsdCkob3B0cyk7XG4gIHJldHVybiBjb25maWcgPyBjb25maWcub3B0aW9ucyA6IG51bGw7XG59XG5cbmNsYXNzIE9wdGlvbk1hbmFnZXIge1xuICBpbml0KG9wdHMpIHtcbiAgICByZXR1cm4gbG9hZE9wdGlvbnMob3B0cyk7XG4gIH1cblxufVxuXG5leHBvcnRzLk9wdGlvbk1hbmFnZXIgPSBPcHRpb25NYW5hZ2VyOyJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/full.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/full.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/full.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/full.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "full.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = loadFullConfig;\n\nvar _util = require(\"./util\");\n\nvar context = _interopRequireWildcard(require(\"../index\"));\n\nvar _plugin = _interopRequireDefault(require(\"./plugin\"));\n\nvar _item = require(\"./item\");\n\nvar _configChain = require(\"./config-chain\");\n\nfunction _traverse() {\n  const data = _interopRequireDefault(require(\"@babel/traverse\"));\n\n  _traverse = function _traverse() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _caching = require(\"./caching\");\n\nvar _options = require(\"./validation/options\");\n\nvar _plugins = require(\"./validation/plugins\");\n\nvar _configApi = _interopRequireDefault(require(\"./helpers/config-api\"));\n\nvar _partial = _interopRequireDefault(require(\"./partial\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}\n\nfunction loadFullConfig(inputOpts) {\n  const result = (0, _partial.default)(inputOpts);\n\n  if (!result) {\n    return null;\n  }\n\n  const options = result.options,\n  context = result.context;\n  const optionDefaults = {};\n  const passes = [[]];\n\n  try {\n    const plugins = options.plugins,\n    presets = options.presets;\n\n    if (!plugins || !presets) {\n      throw new Error(\"Assertion failure - plugins and presets exist\");\n    }\n\n    const ignored = function recurseDescriptors(config, pass) {\n      const plugins = config.plugins.map(descriptor => {\n        return loadPluginDescriptor(descriptor, context);\n      });\n      const presets = config.presets.map(descriptor => {\n        return {\n          preset: loadPresetDescriptor(descriptor, context),\n          pass: descriptor.ownPass ? [] : pass };\n\n      });\n\n      if (presets.length > 0) {\n        passes.splice(1, 0, ...presets.map(o => o.pass).filter(p => p !== pass));\n\n        for (var _iterator = presets, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n          }\n\n          const _ref = _ref2;\n          const preset = _ref.preset,\n          pass = _ref.pass;\n          if (!preset) return true;\n          const ignored = recurseDescriptors({\n            plugins: preset.plugins,\n            presets: preset.presets },\n          pass);\n          if (ignored) return true;\n          preset.options.forEach(opts => {\n            (0, _util.mergeOptions)(optionDefaults, opts);\n          });\n        }\n      }\n\n      if (plugins.length > 0) {\n        pass.unshift(...plugins);\n      }\n    }({\n      plugins: plugins.map(item => {\n        const desc = (0, _item.getItemDescriptor)(item);\n\n        if (!desc) {\n          throw new Error(\"Assertion failure - must be config item\");\n        }\n\n        return desc;\n      }),\n      presets: presets.map(item => {\n        const desc = (0, _item.getItemDescriptor)(item);\n\n        if (!desc) {\n          throw new Error(\"Assertion failure - must be config item\");\n        }\n\n        return desc;\n      }) },\n    passes[0]);\n\n    if (ignored) return null;\n  } catch (e) {\n    if (!/^\\[BABEL\\]/.test(e.message)) {\n      e.message = `[BABEL] ${context.filename || \"unknown\"}: ${e.message}`;\n    }\n\n    throw e;\n  }\n\n  const opts = optionDefaults;\n  (0, _util.mergeOptions)(opts, options);\n  opts.plugins = passes[0];\n  opts.presets = passes.slice(1).filter(plugins => plugins.length > 0).map(plugins => ({\n    plugins }));\n\n  opts.passPerPreset = opts.presets.length > 0;\n  return {\n    options: opts,\n    passes: passes };\n\n}\n\nconst loadDescriptor = (0, _caching.makeWeakCache)(({\n  value,\n  options,\n  dirname,\n  alias },\ncache) => {\n  if (options === false) throw new Error(\"Assertion failure\");\n  options = options || {};\n  let item = value;\n\n  if (typeof value === \"function\") {\n    const api = Object.assign({}, context, (0, _configApi.default)(cache));\n\n    try {\n      item = value(api, options, dirname);\n    } catch (e) {\n      if (alias) {\n        e.message += ` (While processing: ${JSON.stringify(alias)})`;\n      }\n\n      throw e;\n    }\n  }\n\n  if (!item || typeof item !== \"object\") {\n    throw new Error(\"Plugin/Preset did not return an object.\");\n  }\n\n  if (typeof item.then === \"function\") {\n    throw new Error(`You appear to be using an async plugin, ` + `which your current version of Babel does not support.` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version.`);\n  }\n\n  return {\n    value: item,\n    options,\n    dirname,\n    alias };\n\n});\n\nfunction loadPluginDescriptor(descriptor, context) {\n  if (descriptor.value instanceof _plugin.default) {\n    if (descriptor.options) {\n      throw new Error(\"Passed options to an existing Plugin instance will not work.\");\n    }\n\n    return descriptor.value;\n  }\n\n  return instantiatePlugin(loadDescriptor(descriptor, context), context);\n}\n\nconst instantiatePlugin = (0, _caching.makeWeakCache)(({\n  value,\n  options,\n  dirname,\n  alias },\ncache) => {\n  const pluginObj = (0, _plugins.validatePluginObject)(value);\n  const plugin = Object.assign({}, pluginObj);\n\n  if (plugin.visitor) {\n    plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor));\n  }\n\n  if (plugin.inherits) {\n    const inheritsDescriptor = {\n      name: undefined,\n      alias: `${alias}$inherits`,\n      value: plugin.inherits,\n      options,\n      dirname };\n\n    const inherits = cache.invalidate(data => loadPluginDescriptor(inheritsDescriptor, data));\n    plugin.pre = chain(inherits.pre, plugin.pre);\n    plugin.post = chain(inherits.post, plugin.post);\n    plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);\n    plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]);\n  }\n\n  return new _plugin.default(plugin, options, alias);\n});\n\nconst loadPresetDescriptor = (descriptor, context) => {\n  return (0, _configChain.buildPresetChain)(instantiatePreset(loadDescriptor(descriptor, context)), context);\n};\n\nconst instantiatePreset = (0, _caching.makeWeakCache)(({\n  value,\n  dirname,\n  alias }) =>\n{\n  return {\n    options: (0, _options.validate)(\"preset\", value),\n    alias,\n    dirname };\n\n});\n\nfunction chain(a, b) {\n  const fns = [a, b].filter(Boolean);\n  if (fns.length <= 1) return fns[0];\n  return function (...args) {\n    for (var _iterator2 = fns, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref3 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref3 = _i2.value;\n      }\n\n      const fn = _ref3;\n      fn.apply(this, args);\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/util.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/util.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/util.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/util.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "util.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.mergeOptions = mergeOptions;\n\nfunction mergeOptions(target, source) {\n  var _arr = Object.keys(source);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    const k = _arr[_i];\n\n    if (k === \"parserOpts\" && source.parserOpts) {\n      const parserOpts = source.parserOpts;\n      const targetObj = target.parserOpts = target.parserOpts || {};\n      mergeDefaultFields(targetObj, parserOpts);\n    } else if (k === \"generatorOpts\" && source.generatorOpts) {\n      const generatorOpts = source.generatorOpts;\n      const targetObj = target.generatorOpts = target.generatorOpts || {};\n      mergeDefaultFields(targetObj, generatorOpts);\n    } else {\n      const val = source[k];\n      if (val !== undefined) target[k] = val;\n    }\n  }\n}\n\nfunction mergeDefaultFields(target, source) {\n  var _arr2 = Object.keys(source);\n\n  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n    const k = _arr2[_i2];\n    const val = source[k];\n    if (val !== undefined) target[k] = val;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtZXJnZU9wdGlvbnMiLCJ0YXJnZXQiLCJzb3VyY2UiLCJfYXJyIiwia2V5cyIsIl9pIiwibGVuZ3RoIiwiayIsInBhcnNlck9wdHMiLCJ0YXJnZXRPYmoiLCJtZXJnZURlZmF1bHRGaWVsZHMiLCJnZW5lcmF0b3JPcHRzIiwidmFsIiwidW5kZWZpbmVkIiwiX2FycjIiLCJfaTIiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsWUFBUixHQUF1QkEsWUFBdkI7O0FBRUEsU0FBU0EsWUFBVCxDQUFzQkMsTUFBdEIsRUFBOEJDLE1BQTlCLEVBQXNDO0FBQ3BDLE1BQUlDLE9BQU9QLE9BQU9RLElBQVAsQ0FBWUYsTUFBWixDQUFYOztBQUVBLE9BQUssSUFBSUcsS0FBSyxDQUFkLEVBQWlCQSxLQUFLRixLQUFLRyxNQUEzQixFQUFtQ0QsSUFBbkMsRUFBeUM7QUFDdkMsVUFBTUUsSUFBSUosS0FBS0UsRUFBTCxDQUFWOztBQUVBLFFBQUlFLE1BQU0sWUFBTixJQUFzQkwsT0FBT00sVUFBakMsRUFBNkM7QUFDM0MsWUFBTUEsYUFBYU4sT0FBT00sVUFBMUI7QUFDQSxZQUFNQyxZQUFZUixPQUFPTyxVQUFQLEdBQW9CUCxPQUFPTyxVQUFQLElBQXFCLEVBQTNEO0FBQ0FFLHlCQUFtQkQsU0FBbkIsRUFBOEJELFVBQTlCO0FBQ0QsS0FKRCxNQUlPLElBQUlELE1BQU0sZUFBTixJQUF5QkwsT0FBT1MsYUFBcEMsRUFBbUQ7QUFDeEQsWUFBTUEsZ0JBQWdCVCxPQUFPUyxhQUE3QjtBQUNBLFlBQU1GLFlBQVlSLE9BQU9VLGFBQVAsR0FBdUJWLE9BQU9VLGFBQVAsSUFBd0IsRUFBakU7QUFDQUQseUJBQW1CRCxTQUFuQixFQUE4QkUsYUFBOUI7QUFDRCxLQUpNLE1BSUE7QUFDTCxZQUFNQyxNQUFNVixPQUFPSyxDQUFQLENBQVo7QUFDQSxVQUFJSyxRQUFRQyxTQUFaLEVBQXVCWixPQUFPTSxDQUFQLElBQVlLLEdBQVo7QUFDeEI7QUFDRjtBQUNGOztBQUVELFNBQVNGLGtCQUFULENBQTRCVCxNQUE1QixFQUFvQ0MsTUFBcEMsRUFBNEM7QUFDMUMsTUFBSVksUUFBUWxCLE9BQU9RLElBQVAsQ0FBWUYsTUFBWixDQUFaOztBQUVBLE9BQUssSUFBSWEsTUFBTSxDQUFmLEVBQWtCQSxNQUFNRCxNQUFNUixNQUE5QixFQUFzQ1MsS0FBdEMsRUFBNkM7QUFDM0MsVUFBTVIsSUFBSU8sTUFBTUMsR0FBTixDQUFWO0FBQ0EsVUFBTUgsTUFBTVYsT0FBT0ssQ0FBUCxDQUFaO0FBQ0EsUUFBSUssUUFBUUMsU0FBWixFQUF1QlosT0FBT00sQ0FBUCxJQUFZSyxHQUFaO0FBQ3hCO0FBQ0YiLCJzb3VyY2VSb290IjoiL1VzZXJzL3N0ZXZlbnZhbmR1cm0vRGV2ZWxvcGVyL2VpZ2VuLXJlYWN0LW5hdGl2ZS1BcmR1aW5vL2FwcC9ub2RlX21vZHVsZXMvbWV0cm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9jb3JlL2xpYi9jb25maWciLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWVyZ2VPcHRpb25zID0gbWVyZ2VPcHRpb25zO1xuXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnModGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIF9hcnIgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykge1xuICAgIGNvbnN0IGsgPSBfYXJyW19pXTtcblxuICAgIGlmIChrID09PSBcInBhcnNlck9wdHNcIiAmJiBzb3VyY2UucGFyc2VyT3B0cykge1xuICAgICAgY29uc3QgcGFyc2VyT3B0cyA9IHNvdXJjZS5wYXJzZXJPcHRzO1xuICAgICAgY29uc3QgdGFyZ2V0T2JqID0gdGFyZ2V0LnBhcnNlck9wdHMgPSB0YXJnZXQucGFyc2VyT3B0cyB8fCB7fTtcbiAgICAgIG1lcmdlRGVmYXVsdEZpZWxkcyh0YXJnZXRPYmosIHBhcnNlck9wdHMpO1xuICAgIH0gZWxzZSBpZiAoayA9PT0gXCJnZW5lcmF0b3JPcHRzXCIgJiYgc291cmNlLmdlbmVyYXRvck9wdHMpIHtcbiAgICAgIGNvbnN0IGdlbmVyYXRvck9wdHMgPSBzb3VyY2UuZ2VuZXJhdG9yT3B0cztcbiAgICAgIGNvbnN0IHRhcmdldE9iaiA9IHRhcmdldC5nZW5lcmF0b3JPcHRzID0gdGFyZ2V0LmdlbmVyYXRvck9wdHMgfHwge307XG4gICAgICBtZXJnZURlZmF1bHRGaWVsZHModGFyZ2V0T2JqLCBnZW5lcmF0b3JPcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdmFsID0gc291cmNlW2tdO1xuICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB0YXJnZXRba10gPSB2YWw7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdEZpZWxkcyh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgX2FycjIgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IF9hcnIyLmxlbmd0aDsgX2kyKyspIHtcbiAgICBjb25zdCBrID0gX2FycjJbX2kyXTtcbiAgICBjb25zdCB2YWwgPSBzb3VyY2Vba107XG4gICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB0YXJnZXRba10gPSB2YWw7XG4gIH1cbn0iXX0=",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/plugin.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/plugin.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/plugin.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/plugin.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "plugin.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = void 0;\n\nclass Plugin {\n  constructor(plugin, options, key) {\n    this.key = plugin.name || key;\n    this.manipulateOptions = plugin.manipulateOptions;\n    this.post = plugin.post;\n    this.pre = plugin.pre;\n    this.visitor = plugin.visitor || {};\n    this.parserOverride = plugin.parserOverride;\n    this.generatorOverride = plugin.generatorOverride;\n    this.options = options;\n  }}\n\n\n\nexports.default = Plugin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbi5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJQbHVnaW4iLCJjb25zdHJ1Y3RvciIsInBsdWdpbiIsIm9wdGlvbnMiLCJrZXkiLCJuYW1lIiwibWFuaXB1bGF0ZU9wdGlvbnMiLCJwb3N0IiwicHJlIiwidmlzaXRvciIsInBhcnNlck92ZXJyaWRlIiwiZ2VuZXJhdG9yT3ZlcnJpZGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsT0FBUixHQUFrQixLQUFLLENBQXZCOztBQUVBLE1BQU1DLE1BQU4sQ0FBYTtBQUNYQyxjQUFZQyxNQUFaLEVBQW9CQyxPQUFwQixFQUE2QkMsR0FBN0IsRUFBa0M7QUFDaEMsU0FBS0EsR0FBTCxHQUFXRixPQUFPRyxJQUFQLElBQWVELEdBQTFCO0FBQ0EsU0FBS0UsaUJBQUwsR0FBeUJKLE9BQU9JLGlCQUFoQztBQUNBLFNBQUtDLElBQUwsR0FBWUwsT0FBT0ssSUFBbkI7QUFDQSxTQUFLQyxHQUFMLEdBQVdOLE9BQU9NLEdBQWxCO0FBQ0EsU0FBS0MsT0FBTCxHQUFlUCxPQUFPTyxPQUFQLElBQWtCLEVBQWpDO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQlIsT0FBT1EsY0FBN0I7QUFDQSxTQUFLQyxpQkFBTCxHQUF5QlQsT0FBT1MsaUJBQWhDO0FBQ0EsU0FBS1IsT0FBTCxHQUFlQSxPQUFmO0FBQ0QsR0FWVTs7OztBQWNiTixRQUFRRSxPQUFSLEdBQWtCQyxNQUFsQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvQGJhYmVsL2NvcmUvbGliL2NvbmZpZyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5jbGFzcyBQbHVnaW4ge1xuICBjb25zdHJ1Y3RvcihwbHVnaW4sIG9wdGlvbnMsIGtleSkge1xuICAgIHRoaXMua2V5ID0gcGx1Z2luLm5hbWUgfHwga2V5O1xuICAgIHRoaXMubWFuaXB1bGF0ZU9wdGlvbnMgPSBwbHVnaW4ubWFuaXB1bGF0ZU9wdGlvbnM7XG4gICAgdGhpcy5wb3N0ID0gcGx1Z2luLnBvc3Q7XG4gICAgdGhpcy5wcmUgPSBwbHVnaW4ucHJlO1xuICAgIHRoaXMudmlzaXRvciA9IHBsdWdpbi52aXNpdG9yIHx8IHt9O1xuICAgIHRoaXMucGFyc2VyT3ZlcnJpZGUgPSBwbHVnaW4ucGFyc2VyT3ZlcnJpZGU7XG4gICAgdGhpcy5nZW5lcmF0b3JPdmVycmlkZSA9IHBsdWdpbi5nZW5lcmF0b3JPdmVycmlkZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gUGx1Z2luOyJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/item.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/item.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/item.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/item.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "item.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.createItemFromDescriptor = createItemFromDescriptor;\nexports.createConfigItem = createConfigItem;\nexports.getItemDescriptor = getItemDescriptor;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _configDescriptors = require(\"./config-descriptors\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction createItemFromDescriptor(desc) {\n  return new ConfigItem(desc);\n}\n\nfunction createConfigItem(value, {\n  dirname = \".\",\n  type } =\n{}) {\n  const descriptor = (0, _configDescriptors.createDescriptor)(value, _path().default.resolve(dirname), {\n    type,\n    alias: \"programmatic item\" });\n\n  return createItemFromDescriptor(descriptor);\n}\n\nfunction getItemDescriptor(item) {\n  if (item instanceof ConfigItem) {\n    return item._descriptor;\n  }\n\n  return undefined;\n}\n\nclass ConfigItem {\n  constructor(descriptor) {\n    this._descriptor = descriptor;\n    Object.defineProperty(this, \"_descriptor\", {\n      enumerable: false });\n\n\n    if (this._descriptor.options === false) {\n      throw new Error(\"Assertion failure - unexpected false options\");\n    }\n\n    this.value = this._descriptor.value;\n    this.options = this._descriptor.options;\n    this.dirname = this._descriptor.dirname;\n    this.name = this._descriptor.name;\n    this.file = this._descriptor.file ? {\n      request: this._descriptor.file.request,\n      resolved: this._descriptor.file.resolved } :\n    undefined;\n    Object.freeze(this);\n  }}\n\n\n\nObject.freeze(ConfigItem.prototype);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZW0uanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVJdGVtRnJvbURlc2NyaXB0b3IiLCJjcmVhdGVDb25maWdJdGVtIiwiZ2V0SXRlbURlc2NyaXB0b3IiLCJfcGF0aCIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb25maWdEZXNjcmlwdG9ycyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZGVzYyIsIkNvbmZpZ0l0ZW0iLCJkaXJuYW1lIiwidHlwZSIsImRlc2NyaXB0b3IiLCJjcmVhdGVEZXNjcmlwdG9yIiwicmVzb2x2ZSIsImFsaWFzIiwiaXRlbSIsIl9kZXNjcmlwdG9yIiwidW5kZWZpbmVkIiwiY29uc3RydWN0b3IiLCJlbnVtZXJhYmxlIiwib3B0aW9ucyIsIkVycm9yIiwibmFtZSIsImZpbGUiLCJyZXF1ZXN0IiwicmVzb2x2ZWQiLCJmcmVlemUiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsd0JBQVIsR0FBbUNBLHdCQUFuQztBQUNBRixRQUFRRyxnQkFBUixHQUEyQkEsZ0JBQTNCO0FBQ0FILFFBQVFJLGlCQUFSLEdBQTRCQSxpQkFBNUI7O0FBRUEsU0FBU0MsS0FBVCxHQUFpQjtBQUNmLFFBQU1DLE9BQU9DLHVCQUF1QkMsUUFBUSxNQUFSLENBQXZCLENBQWI7O0FBRUFILFVBQVEsU0FBU0EsS0FBVCxHQUFpQjtBQUN2QixXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsSUFBSUcscUJBQXFCRCxRQUFRLHNCQUFSLENBQXpCOztBQUVBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLFNBQVNGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNSLHdCQUFULENBQWtDVyxJQUFsQyxFQUF3QztBQUN0QyxTQUFPLElBQUlDLFVBQUosQ0FBZUQsSUFBZixDQUFQO0FBQ0Q7O0FBRUQsU0FBU1YsZ0JBQVQsQ0FBMEJGLEtBQTFCLEVBQWlDO0FBQy9CYyxZQUFVLEdBRHFCO0FBRS9CQyxNQUYrQjtBQUc3QixFQUhKLEVBR1E7QUFDTixRQUFNQyxhQUFhLENBQUMsR0FBR1IsbUJBQW1CUyxnQkFBdkIsRUFBeUNqQixLQUF6QyxFQUFnREksUUFBUU8sT0FBUixDQUFnQk8sT0FBaEIsQ0FBd0JKLE9BQXhCLENBQWhELEVBQWtGO0FBQ25HQyxRQURtRztBQUVuR0ksV0FBTyxtQkFGNEYsRUFBbEYsQ0FBbkI7O0FBSUEsU0FBT2xCLHlCQUF5QmUsVUFBekIsQ0FBUDtBQUNEOztBQUVELFNBQVNiLGlCQUFULENBQTJCaUIsSUFBM0IsRUFBaUM7QUFDL0IsTUFBSUEsZ0JBQWdCUCxVQUFwQixFQUFnQztBQUM5QixXQUFPTyxLQUFLQyxXQUFaO0FBQ0Q7O0FBRUQsU0FBT0MsU0FBUDtBQUNEOztBQUVELE1BQU1ULFVBQU4sQ0FBaUI7QUFDZlUsY0FBWVAsVUFBWixFQUF3QjtBQUN0QixTQUFLSyxXQUFMLEdBQW1CTCxVQUFuQjtBQUNBbkIsV0FBT0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixhQUE1QixFQUEyQztBQUN6QzBCLGtCQUFZLEtBRDZCLEVBQTNDOzs7QUFJQSxRQUFJLEtBQUtILFdBQUwsQ0FBaUJJLE9BQWpCLEtBQTZCLEtBQWpDLEVBQXdDO0FBQ3RDLFlBQU0sSUFBSUMsS0FBSixDQUFVLDhDQUFWLENBQU47QUFDRDs7QUFFRCxTQUFLMUIsS0FBTCxHQUFhLEtBQUtxQixXQUFMLENBQWlCckIsS0FBOUI7QUFDQSxTQUFLeUIsT0FBTCxHQUFlLEtBQUtKLFdBQUwsQ0FBaUJJLE9BQWhDO0FBQ0EsU0FBS1gsT0FBTCxHQUFlLEtBQUtPLFdBQUwsQ0FBaUJQLE9BQWhDO0FBQ0EsU0FBS2EsSUFBTCxHQUFZLEtBQUtOLFdBQUwsQ0FBaUJNLElBQTdCO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLEtBQUtQLFdBQUwsQ0FBaUJPLElBQWpCLEdBQXdCO0FBQ2xDQyxlQUFTLEtBQUtSLFdBQUwsQ0FBaUJPLElBQWpCLENBQXNCQyxPQURHO0FBRWxDQyxnQkFBVSxLQUFLVCxXQUFMLENBQWlCTyxJQUFqQixDQUFzQkUsUUFGRSxFQUF4QjtBQUdSUixhQUhKO0FBSUF6QixXQUFPa0MsTUFBUCxDQUFjLElBQWQ7QUFDRCxHQXBCYzs7OztBQXdCakJsQyxPQUFPa0MsTUFBUCxDQUFjbEIsV0FBV21CLFNBQXpCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvY29uZmlnIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZUl0ZW1Gcm9tRGVzY3JpcHRvciA9IGNyZWF0ZUl0ZW1Gcm9tRGVzY3JpcHRvcjtcbmV4cG9ydHMuY3JlYXRlQ29uZmlnSXRlbSA9IGNyZWF0ZUNvbmZpZ0l0ZW07XG5leHBvcnRzLmdldEl0ZW1EZXNjcmlwdG9yID0gZ2V0SXRlbURlc2NyaXB0b3I7XG5cbmZ1bmN0aW9uIF9wYXRoKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicGF0aFwiKSk7XG5cbiAgX3BhdGggPSBmdW5jdGlvbiBfcGF0aCgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxudmFyIF9jb25maWdEZXNjcmlwdG9ycyA9IHJlcXVpcmUoXCIuL2NvbmZpZy1kZXNjcmlwdG9yc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlSXRlbUZyb21EZXNjcmlwdG9yKGRlc2MpIHtcbiAgcmV0dXJuIG5ldyBDb25maWdJdGVtKGRlc2MpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb25maWdJdGVtKHZhbHVlLCB7XG4gIGRpcm5hbWUgPSBcIi5cIixcbiAgdHlwZVxufSA9IHt9KSB7XG4gIGNvbnN0IGRlc2NyaXB0b3IgPSAoMCwgX2NvbmZpZ0Rlc2NyaXB0b3JzLmNyZWF0ZURlc2NyaXB0b3IpKHZhbHVlLCBfcGF0aCgpLmRlZmF1bHQucmVzb2x2ZShkaXJuYW1lKSwge1xuICAgIHR5cGUsXG4gICAgYWxpYXM6IFwicHJvZ3JhbW1hdGljIGl0ZW1cIlxuICB9KTtcbiAgcmV0dXJuIGNyZWF0ZUl0ZW1Gcm9tRGVzY3JpcHRvcihkZXNjcmlwdG9yKTtcbn1cblxuZnVuY3Rpb24gZ2V0SXRlbURlc2NyaXB0b3IoaXRlbSkge1xuICBpZiAoaXRlbSBpbnN0YW5jZW9mIENvbmZpZ0l0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5fZGVzY3JpcHRvcjtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmNsYXNzIENvbmZpZ0l0ZW0ge1xuICBjb25zdHJ1Y3RvcihkZXNjcmlwdG9yKSB7XG4gICAgdGhpcy5fZGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2Rlc2NyaXB0b3JcIiwge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLl9kZXNjcmlwdG9yLm9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBc3NlcnRpb24gZmFpbHVyZSAtIHVuZXhwZWN0ZWQgZmFsc2Ugb3B0aW9uc1wiKTtcbiAgICB9XG5cbiAgICB0aGlzLnZhbHVlID0gdGhpcy5fZGVzY3JpcHRvci52YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLl9kZXNjcmlwdG9yLm9wdGlvbnM7XG4gICAgdGhpcy5kaXJuYW1lID0gdGhpcy5fZGVzY3JpcHRvci5kaXJuYW1lO1xuICAgIHRoaXMubmFtZSA9IHRoaXMuX2Rlc2NyaXB0b3IubmFtZTtcbiAgICB0aGlzLmZpbGUgPSB0aGlzLl9kZXNjcmlwdG9yLmZpbGUgPyB7XG4gICAgICByZXF1ZXN0OiB0aGlzLl9kZXNjcmlwdG9yLmZpbGUucmVxdWVzdCxcbiAgICAgIHJlc29sdmVkOiB0aGlzLl9kZXNjcmlwdG9yLmZpbGUucmVzb2x2ZWRcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxufVxuXG5PYmplY3QuZnJlZXplKENvbmZpZ0l0ZW0ucHJvdG90eXBlKTsiXX0=",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/config-descriptors.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/config-descriptors.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/config-descriptors.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/config-descriptors.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "config-descriptors.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.createCachedDescriptors = createCachedDescriptors;\nexports.createUncachedDescriptors = createUncachedDescriptors;\nexports.createDescriptor = createDescriptor;\n\nvar _files = require(\"./files\");\n\nvar _item = require(\"./item\");\n\nvar _caching = require(\"./caching\");\n\nfunction createCachedDescriptors(dirname, options, alias) {\n  const plugins = options.plugins,\n  presets = options.presets,\n  passPerPreset = options.passPerPreset;\n  return {\n    options,\n    plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname)(alias) : () => [],\n    presets: presets ? () => createCachedPresetDescriptors(presets, dirname)(alias)(!!passPerPreset) : () => [] };\n\n}\n\nfunction createUncachedDescriptors(dirname, options, alias) {\n  let plugins;\n  let presets;\n  return {\n    options,\n    plugins: function (_plugins) {\n      function plugins() {\n        return _plugins.apply(this, arguments);\n      }\n\n      plugins.toString = function () {\n        return _plugins.toString();\n      };\n\n      return plugins;\n    }(() => {\n      if (!plugins) {\n        plugins = createPluginDescriptors(options.plugins || [], dirname, alias);\n      }\n\n      return plugins;\n    }),\n    presets: function (_presets) {\n      function presets() {\n        return _presets.apply(this, arguments);\n      }\n\n      presets.toString = function () {\n        return _presets.toString();\n      };\n\n      return presets;\n    }(() => {\n      if (!presets) {\n        presets = createPresetDescriptors(options.presets || [], dirname, alias, !!options.passPerPreset);\n      }\n\n      return presets;\n    }) };\n\n}\n\nconst createCachedPresetDescriptors = (0, _caching.makeWeakCache)((items, cache) => {\n  const dirname = cache.using(dir => dir);\n  return (0, _caching.makeStrongCache)(alias => (0, _caching.makeStrongCache)(passPerPreset => createPresetDescriptors(items, dirname, alias, passPerPreset)));\n});\nconst createCachedPluginDescriptors = (0, _caching.makeWeakCache)((items, cache) => {\n  const dirname = cache.using(dir => dir);\n  return (0, _caching.makeStrongCache)(alias => createPluginDescriptors(items, dirname, alias));\n});\n\nfunction createPresetDescriptors(items, dirname, alias, passPerPreset) {\n  return createDescriptors(\"preset\", items, dirname, alias, passPerPreset);\n}\n\nfunction createPluginDescriptors(items, dirname, alias) {\n  return createDescriptors(\"plugin\", items, dirname, alias);\n}\n\nfunction createDescriptors(type, items, dirname, alias, ownPass) {\n  const descriptors = items.map((item, index) => createDescriptor(item, dirname, {\n    type,\n    alias: `${alias}$${index}`,\n    ownPass: !!ownPass }));\n\n  assertNoDuplicates(descriptors);\n  return descriptors;\n}\n\nfunction createDescriptor(pair, dirname, {\n  type,\n  alias,\n  ownPass })\n{\n  const desc = (0, _item.getItemDescriptor)(pair);\n\n  if (desc) {\n    return desc;\n  }\n\n  let name;\n  let options;\n  let value = pair;\n\n  if (Array.isArray(value)) {\n    if (value.length === 3) {\n      var _value = value;\n      value = _value[0];\n      options = _value[1];\n      name = _value[2];\n    } else {\n      var _value2 = value;\n      value = _value2[0];\n      options = _value2[1];\n    }\n  }\n\n  let file = undefined;\n  let filepath = null;\n\n  if (typeof value === \"string\") {\n    if (typeof type !== \"string\") {\n      throw new Error(\"To resolve a string-based item, the type of item must be given\");\n    }\n\n    const resolver = type === \"plugin\" ? _files.loadPlugin : _files.loadPreset;\n    const request = value;\n\n    var _resolver = resolver(value, dirname);\n\n    filepath = _resolver.filepath;\n    value = _resolver.value;\n    file = {\n      request,\n      resolved: filepath };\n\n  }\n\n  if (!value) {\n    throw new Error(`Unexpected falsy value: ${String(value)}`);\n  }\n\n  if (typeof value === \"object\" && value.__esModule) {\n    if (value.default) {\n      value = value.default;\n    } else {\n      throw new Error(\"Must export a default export when using ES6 modules.\");\n    }\n  }\n\n  if (typeof value !== \"object\" && typeof value !== \"function\") {\n    throw new Error(`Unsupported format: ${typeof value}. Expected an object or a function.`);\n  }\n\n  if (filepath !== null && typeof value === \"object\" && value) {\n    throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);\n  }\n\n  return {\n    name,\n    alias: filepath || alias,\n    value,\n    options,\n    dirname,\n    ownPass,\n    file };\n\n}\n\nfunction assertNoDuplicates(items) {\n  const map = new Map();\n\n  for (var _iterator = items, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    const item = _ref;\n    if (typeof item.value !== \"function\") continue;\n    let nameMap = map.get(item.value);\n\n    if (!nameMap) {\n      nameMap = new Set();\n      map.set(item.value, nameMap);\n    }\n\n    if (nameMap.has(item.name)) {\n      throw new Error([`Duplicate plugin/preset detected.`, `If you'd like to use two separate instances of a plugin,`, `they neen separate names, e.g.`, ``, `  plugins: [`, `    ['some-plugin', {}],`, `    ['some-plugin', {}, 'some unique name'],`, `  ]`].join(\"\\n\"));\n    }\n\n    nameMap.add(item.name);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/config-chain.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/config-chain.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/config-chain.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/config-chain.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "config-chain.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.buildRootChain = buildRootChain;\nexports.buildPresetChain = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _micromatch() {\n  const data = _interopRequireDefault(require(\"micromatch\"));\n\n  _micromatch = function _micromatch() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _debug() {\n  const data = _interopRequireDefault(require(\"debug\"));\n\n  _debug = function _debug() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _options = require(\"./validation/options\");\n\nvar _files = require(\"./files\");\n\nvar _caching = require(\"./caching\");\n\nvar _configDescriptors = require(\"./config-descriptors\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nconst debug = (0, _debug().default)(\"babel:config:config-chain\");\nconst buildPresetChain = makeChainWalker({\n  init: arg => arg,\n  root: preset => loadPresetDescriptors(preset),\n  env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),\n  overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index),\n  overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName) });\n\nexports.buildPresetChain = buildPresetChain;\nconst loadPresetDescriptors = (0, _caching.makeWeakCache)(preset => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors));\nconst loadPresetEnvDescriptors = (0, _caching.makeWeakCache)(preset => (0, _caching.makeStrongCache)(envName => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName)));\nconst loadPresetOverridesDescriptors = (0, _caching.makeWeakCache)(preset => (0, _caching.makeStrongCache)(index => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index)));\nconst loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCache)(preset => (0, _caching.makeStrongCache)(index => (0, _caching.makeStrongCache)(envName => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));\n\nfunction buildRootChain(opts, context) {\n  const programmaticChain = loadProgrammaticChain({\n    options: opts,\n    dirname: context.cwd },\n  context);\n  if (!programmaticChain) return null;\n  const _opts$root = opts.root,\n  rootDir = _opts$root === void 0 ? \".\" : _opts$root,\n  _opts$configFile = opts.configFile,\n  configFileName = _opts$configFile === void 0 ? true : _opts$configFile;\n  let babelrc = opts.babelrc,\n  babelrcRoots = opts.babelrcRoots;\n\n  const absoluteRoot = _path().default.resolve(context.cwd, rootDir);\n\n  let configFile;\n\n  if (typeof configFileName === \"string\") {\n    configFile = (0, _files.loadConfig)(configFileName, context.cwd, context.envName);\n  } else if (configFileName === true) {\n    configFile = (0, _files.findRootConfig)(absoluteRoot, context.envName);\n  }\n\n  const configFileChain = emptyChain();\n\n  if (configFile) {\n    const validatedFile = validateConfigFile(configFile);\n    const result = loadFileChain(validatedFile, context);\n    if (!result) return null;\n\n    if (babelrc === undefined) {\n      babelrc = validatedFile.options.babelrc;\n    }\n\n    if (babelrcRoots === undefined) {\n      babelrcRoots = validatedFile.options.babelrcRoots;\n    }\n\n    mergeChain(configFileChain, result);\n  }\n\n  const pkgData = typeof context.filename === \"string\" ? (0, _files.findPackageData)(context.filename) : null;\n  let ignoreFile, babelrcFile;\n  const fileChain = emptyChain();\n\n  if ((babelrc === true || babelrc === undefined) && pkgData && babelrcLoadEnabled(context, pkgData, babelrcRoots, absoluteRoot)) {\n    var _findRelativeConfig = (0, _files.findRelativeConfig)(pkgData, context.envName);\n\n    ignoreFile = _findRelativeConfig.ignore;\n    babelrcFile = _findRelativeConfig.config;\n\n    if (ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)) {\n      return null;\n    }\n\n    if (babelrcFile) {\n      const result = loadFileChain(validateBabelrcFile(babelrcFile), context);\n      if (!result) return null;\n      mergeChain(fileChain, result);\n    }\n  }\n\n  const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);\n  return {\n    plugins: dedupDescriptors(chain.plugins),\n    presets: dedupDescriptors(chain.presets),\n    options: chain.options.map(o => normalizeOptions(o)),\n    ignore: ignoreFile || undefined,\n    babelrc: babelrcFile || undefined,\n    config: configFile || undefined };\n\n}\n\nfunction babelrcLoadEnabled(context, pkgData, babelrcRoots, absoluteRoot) {\n  if (typeof babelrcRoots === \"boolean\") return babelrcRoots;\n\n  if (babelrcRoots === undefined) {\n    return pkgData.directories.indexOf(absoluteRoot) !== -1;\n  }\n\n  let babelrcPatterns = babelrcRoots;\n  if (!Array.isArray(babelrcPatterns)) babelrcPatterns = [babelrcPatterns];\n  babelrcPatterns = babelrcPatterns.map(pat => _path().default.resolve(context.cwd, pat));\n\n  if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {\n    return pkgData.directories.indexOf(absoluteRoot) !== -1;\n  }\n\n  return (0, _micromatch().default)(pkgData.directories, babelrcPatterns).length > 0;\n}\n\nconst validateConfigFile = (0, _caching.makeWeakCache)(file => ({\n  filepath: file.filepath,\n  dirname: file.dirname,\n  options: (0, _options.validate)(\"configfile\", file.options) }));\n\nconst validateBabelrcFile = (0, _caching.makeWeakCache)(file => ({\n  filepath: file.filepath,\n  dirname: file.dirname,\n  options: (0, _options.validate)(\"babelrcfile\", file.options) }));\n\nconst validateExtendFile = (0, _caching.makeWeakCache)(file => ({\n  filepath: file.filepath,\n  dirname: file.dirname,\n  options: (0, _options.validate)(\"extendsfile\", file.options) }));\n\nconst loadProgrammaticChain = makeChainWalker({\n  root: input => buildRootDescriptors(input, \"base\", _configDescriptors.createCachedDescriptors),\n  env: (input, envName) => buildEnvDescriptors(input, \"base\", _configDescriptors.createCachedDescriptors, envName),\n  overrides: (input, index) => buildOverrideDescriptors(input, \"base\", _configDescriptors.createCachedDescriptors, index),\n  overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, \"base\", _configDescriptors.createCachedDescriptors, index, envName) });\n\nconst loadFileChain = makeChainWalker({\n  root: file => loadFileDescriptors(file),\n  env: (file, envName) => loadFileEnvDescriptors(file)(envName),\n  overrides: (file, index) => loadFileOverridesDescriptors(file)(index),\n  overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName) });\n\nconst loadFileDescriptors = (0, _caching.makeWeakCache)(file => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors));\nconst loadFileEnvDescriptors = (0, _caching.makeWeakCache)(file => (0, _caching.makeStrongCache)(envName => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName)));\nconst loadFileOverridesDescriptors = (0, _caching.makeWeakCache)(file => (0, _caching.makeStrongCache)(index => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index)));\nconst loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCache)(file => (0, _caching.makeStrongCache)(index => (0, _caching.makeStrongCache)(envName => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));\n\nfunction buildRootDescriptors({\n  dirname,\n  options },\nalias, descriptors) {\n  return descriptors(dirname, options, alias);\n}\n\nfunction buildEnvDescriptors({\n  dirname,\n  options },\nalias, descriptors, envName) {\n  const opts = options.env && options.env[envName];\n  return opts ? descriptors(dirname, opts, `${alias}.env[\"${envName}\"]`) : null;\n}\n\nfunction buildOverrideDescriptors({\n  dirname,\n  options },\nalias, descriptors, index) {\n  const opts = options.overrides && options.overrides[index];\n  if (!opts) throw new Error(\"Assertion failure - missing override\");\n  return descriptors(dirname, opts, `${alias}.overrides[${index}]`);\n}\n\nfunction buildOverrideEnvDescriptors({\n  dirname,\n  options },\nalias, descriptors, index, envName) {\n  const override = options.overrides && options.overrides[index];\n  if (!override) throw new Error(\"Assertion failure - missing override\");\n  const opts = override.env && override.env[envName];\n  return opts ? descriptors(dirname, opts, `${alias}.overrides[${index}].env[\"${envName}\"]`) : null;\n}\n\nfunction makeChainWalker({\n  root,\n  env,\n  overrides,\n  overridesEnv })\n{\n  return (input, context, files = new Set()) => {\n    const dirname = input.dirname;\n    const flattenedConfigs = [];\n    const rootOpts = root(input);\n\n    if (configIsApplicable(rootOpts, dirname, context)) {\n      flattenedConfigs.push(rootOpts);\n      const envOpts = env(input, context.envName);\n\n      if (envOpts && configIsApplicable(envOpts, dirname, context)) {\n        flattenedConfigs.push(envOpts);\n      }\n\n      (rootOpts.options.overrides || []).forEach((_, index) => {\n        const overrideOps = overrides(input, index);\n\n        if (configIsApplicable(overrideOps, dirname, context)) {\n          flattenedConfigs.push(overrideOps);\n          const overrideEnvOpts = overridesEnv(input, index, context.envName);\n\n          if (overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context)) {\n            flattenedConfigs.push(overrideEnvOpts);\n          }\n        }\n      });\n    }\n\n    if (flattenedConfigs.some(({\n      options: {\n        ignore,\n        only } }) =>\n\n    shouldIgnore(context, ignore, only, dirname))) {\n      return null;\n    }\n\n    const chain = emptyChain();\n\n    for (var _i = 0; _i < flattenedConfigs.length; _i++) {\n      const op = flattenedConfigs[_i];\n\n      if (!mergeExtendsChain(chain, op.options, dirname, context, files)) {\n        return null;\n      }\n\n      mergeChainOpts(chain, op);\n    }\n\n    return chain;\n  };\n}\n\nfunction mergeExtendsChain(chain, opts, dirname, context, files) {\n  if (opts.extends === undefined) return true;\n  const file = (0, _files.loadConfig)(opts.extends, dirname, context.envName);\n\n  if (files.has(file)) {\n    throw new Error(`Configuration cycle detected loading ${file.filepath}.\\n` + `File already loaded following the config chain:\\n` + Array.from(files, file => ` - ${file.filepath}`).join(\"\\n\"));\n  }\n\n  files.add(file);\n  const fileChain = loadFileChain(validateExtendFile(file), context, files);\n  files.delete(file);\n  if (!fileChain) return false;\n  mergeChain(chain, fileChain);\n  return true;\n}\n\nfunction mergeChain(target, source) {\n  target.options.push(...source.options);\n  target.plugins.push(...source.plugins);\n  target.presets.push(...source.presets);\n  return target;\n}\n\nfunction mergeChainOpts(target, {\n  options,\n  plugins,\n  presets })\n{\n  target.options.push(options);\n  target.plugins.push(...plugins());\n  target.presets.push(...presets());\n  return target;\n}\n\nfunction emptyChain() {\n  return {\n    options: [],\n    presets: [],\n    plugins: [] };\n\n}\n\nfunction normalizeOptions(opts) {\n  const options = Object.assign({}, opts);\n  delete options.extends;\n  delete options.env;\n  delete options.plugins;\n  delete options.presets;\n  delete options.passPerPreset;\n  delete options.ignore;\n  delete options.only;\n\n  if (options.sourceMap) {\n    options.sourceMaps = options.sourceMap;\n    delete options.sourceMap;\n  }\n\n  return options;\n}\n\nfunction dedupDescriptors(items) {\n  const map = new Map();\n  const descriptors = [];\n\n  for (var _iterator = items, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i2 >= _iterator.length) break;\n      _ref = _iterator[_i2++];\n    } else {\n      _i2 = _iterator.next();\n      if (_i2.done) break;\n      _ref = _i2.value;\n    }\n\n    const item = _ref;\n\n    if (typeof item.value === \"function\") {\n      const fnKey = item.value;\n      let nameMap = map.get(fnKey);\n\n      if (!nameMap) {\n        nameMap = new Map();\n        map.set(fnKey, nameMap);\n      }\n\n      let desc = nameMap.get(item.name);\n\n      if (!desc) {\n        desc = {\n          value: null };\n\n        descriptors.push(desc);\n        if (!item.ownPass) nameMap.set(item.name, desc);\n      }\n\n      if (item.options === false) {\n        desc.value = null;\n      } else {\n        desc.value = item;\n      }\n    } else {\n      descriptors.push({\n        value: item });\n\n    }\n  }\n\n  return descriptors.reduce((acc, desc) => {\n    if (desc.value) acc.push(desc.value);\n    return acc;\n  }, []);\n}\n\nfunction configIsApplicable({\n  options },\ndirname, context) {\n  return (options.test === undefined || configFieldIsApplicable(context, options.test, dirname)) && (options.include === undefined || configFieldIsApplicable(context, options.include, dirname)) && (options.exclude === undefined || !configFieldIsApplicable(context, options.exclude, dirname));\n}\n\nfunction configFieldIsApplicable(context, test, dirname) {\n  if (context.filename === null) {\n    throw new Error(`Configuration contains explicit test/include/exclude checks, but no filename was passed to Babel`);\n  }\n\n  const ctx = context;\n  const patterns = Array.isArray(test) ? test : [test];\n  return matchesPatterns(ctx, patterns, dirname, false);\n}\n\nfunction shouldIgnore(context, ignore, only, dirname) {\n  if (ignore) {\n    if (context.filename === null) {\n      throw new Error(`Configuration contains ignore checks, but no filename was passed to Babel`);\n    }\n\n    const ctx = context;\n\n    if (matchesPatterns(ctx, ignore, dirname)) {\n      debug(\"Ignored %o because it matched one of %O from %o\", context.filename, ignore, dirname);\n      return true;\n    }\n  }\n\n  if (only) {\n    if (context.filename === null) {\n      throw new Error(`Configuration contains ignore checks, but no filename was passed to Babel`);\n    }\n\n    const ctx = context;\n\n    if (!matchesPatterns(ctx, only, dirname)) {\n      debug(\"Ignored %o because it failed to match one of %O from %o\", context.filename, only, dirname);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction matchesPatterns(context, patterns, dirname, allowNegation = true) {\n  const res = [];\n  const strings = [];\n  const fns = [];\n  patterns.forEach(pattern => {\n    if (typeof pattern === \"string\") strings.push(pattern);else if (typeof pattern === \"function\") fns.push(pattern);else res.push(pattern);\n  });\n  const filename = context.filename;\n  if (res.some(re => re.test(context.filename))) return true;\n  if (fns.some(fn => fn(filename))) return true;\n\n  if (strings.length > 0) {\n    const possibleDirs = getPossibleDirs(context);\n    const absolutePatterns = strings.map(pattern => {\n      const negate = pattern[0] === \"!\";\n\n      if (negate && !allowNegation) {\n        throw new Error(`Negation of file paths is not supported.`);\n      }\n\n      if (negate) pattern = pattern.slice(1);\n      return (negate ? \"!\" : \"\") + _path().default.resolve(dirname, pattern);\n    });\n\n    if ((0, _micromatch().default)(possibleDirs, absolutePatterns, {\n      nocase: true,\n      nonegate: !allowNegation }).\n    length > 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nconst getPossibleDirs = (0, _caching.makeWeakCache)(context => {\n  let current = context.filename;\n  if (current === null) return [];\n  const possibleDirs = [current];\n\n  while (true) {\n    const previous = current;\n    current = _path().default.dirname(current);\n    if (previous === current) break;\n    possibleDirs.push(current);\n  }\n\n  return possibleDirs;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy1jaGFpbi5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImJ1aWxkUm9vdENoYWluIiwiYnVpbGRQcmVzZXRDaGFpbiIsIl9wYXRoIiwiZGF0YSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX21pY3JvbWF0Y2giLCJfZGVidWciLCJfb3B0aW9ucyIsIl9maWxlcyIsIl9jYWNoaW5nIiwiX2NvbmZpZ0Rlc2NyaXB0b3JzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJkZWJ1ZyIsIm1ha2VDaGFpbldhbGtlciIsImluaXQiLCJhcmciLCJyb290IiwicHJlc2V0IiwibG9hZFByZXNldERlc2NyaXB0b3JzIiwiZW52IiwiZW52TmFtZSIsImxvYWRQcmVzZXRFbnZEZXNjcmlwdG9ycyIsIm92ZXJyaWRlcyIsImluZGV4IiwibG9hZFByZXNldE92ZXJyaWRlc0Rlc2NyaXB0b3JzIiwib3ZlcnJpZGVzRW52IiwibG9hZFByZXNldE92ZXJyaWRlc0VudkRlc2NyaXB0b3JzIiwibWFrZVdlYWtDYWNoZSIsImJ1aWxkUm9vdERlc2NyaXB0b3JzIiwiYWxpYXMiLCJjcmVhdGVVbmNhY2hlZERlc2NyaXB0b3JzIiwibWFrZVN0cm9uZ0NhY2hlIiwiYnVpbGRFbnZEZXNjcmlwdG9ycyIsImJ1aWxkT3ZlcnJpZGVEZXNjcmlwdG9ycyIsImJ1aWxkT3ZlcnJpZGVFbnZEZXNjcmlwdG9ycyIsIm9wdHMiLCJjb250ZXh0IiwicHJvZ3JhbW1hdGljQ2hhaW4iLCJsb2FkUHJvZ3JhbW1hdGljQ2hhaW4iLCJvcHRpb25zIiwiZGlybmFtZSIsImN3ZCIsIl9vcHRzJHJvb3QiLCJyb290RGlyIiwiX29wdHMkY29uZmlnRmlsZSIsImNvbmZpZ0ZpbGUiLCJjb25maWdGaWxlTmFtZSIsImJhYmVscmMiLCJiYWJlbHJjUm9vdHMiLCJhYnNvbHV0ZVJvb3QiLCJyZXNvbHZlIiwibG9hZENvbmZpZyIsImZpbmRSb290Q29uZmlnIiwiY29uZmlnRmlsZUNoYWluIiwiZW1wdHlDaGFpbiIsInZhbGlkYXRlZEZpbGUiLCJ2YWxpZGF0ZUNvbmZpZ0ZpbGUiLCJyZXN1bHQiLCJsb2FkRmlsZUNoYWluIiwidW5kZWZpbmVkIiwibWVyZ2VDaGFpbiIsInBrZ0RhdGEiLCJmaWxlbmFtZSIsImZpbmRQYWNrYWdlRGF0YSIsImlnbm9yZUZpbGUiLCJiYWJlbHJjRmlsZSIsImZpbGVDaGFpbiIsImJhYmVscmNMb2FkRW5hYmxlZCIsIl9maW5kUmVsYXRpdmVDb25maWciLCJmaW5kUmVsYXRpdmVDb25maWciLCJpZ25vcmUiLCJjb25maWciLCJzaG91bGRJZ25vcmUiLCJ2YWxpZGF0ZUJhYmVscmNGaWxlIiwiY2hhaW4iLCJwbHVnaW5zIiwiZGVkdXBEZXNjcmlwdG9ycyIsInByZXNldHMiLCJtYXAiLCJvIiwibm9ybWFsaXplT3B0aW9ucyIsImRpcmVjdG9yaWVzIiwiaW5kZXhPZiIsImJhYmVscmNQYXR0ZXJucyIsIkFycmF5IiwiaXNBcnJheSIsInBhdCIsImxlbmd0aCIsImZpbGUiLCJmaWxlcGF0aCIsInZhbGlkYXRlIiwidmFsaWRhdGVFeHRlbmRGaWxlIiwiaW5wdXQiLCJjcmVhdGVDYWNoZWREZXNjcmlwdG9ycyIsImxvYWRGaWxlRGVzY3JpcHRvcnMiLCJsb2FkRmlsZUVudkRlc2NyaXB0b3JzIiwibG9hZEZpbGVPdmVycmlkZXNEZXNjcmlwdG9ycyIsImxvYWRGaWxlT3ZlcnJpZGVzRW52RGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9ycyIsIkVycm9yIiwib3ZlcnJpZGUiLCJmaWxlcyIsIlNldCIsImZsYXR0ZW5lZENvbmZpZ3MiLCJyb290T3B0cyIsImNvbmZpZ0lzQXBwbGljYWJsZSIsInB1c2giLCJlbnZPcHRzIiwiZm9yRWFjaCIsIl8iLCJvdmVycmlkZU9wcyIsIm92ZXJyaWRlRW52T3B0cyIsInNvbWUiLCJvbmx5IiwiX2kiLCJvcCIsIm1lcmdlRXh0ZW5kc0NoYWluIiwibWVyZ2VDaGFpbk9wdHMiLCJleHRlbmRzIiwiaGFzIiwiZnJvbSIsImpvaW4iLCJhZGQiLCJkZWxldGUiLCJ0YXJnZXQiLCJzb3VyY2UiLCJhc3NpZ24iLCJwYXNzUGVyUHJlc2V0Iiwic291cmNlTWFwIiwic291cmNlTWFwcyIsIml0ZW1zIiwiTWFwIiwiX2l0ZXJhdG9yIiwiX2lzQXJyYXkiLCJfaTIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9yZWYiLCJuZXh0IiwiZG9uZSIsIml0ZW0iLCJmbktleSIsIm5hbWVNYXAiLCJnZXQiLCJzZXQiLCJkZXNjIiwibmFtZSIsIm93blBhc3MiLCJyZWR1Y2UiLCJhY2MiLCJ0ZXN0IiwiY29uZmlnRmllbGRJc0FwcGxpY2FibGUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsImN0eCIsInBhdHRlcm5zIiwibWF0Y2hlc1BhdHRlcm5zIiwiYWxsb3dOZWdhdGlvbiIsInJlcyIsInN0cmluZ3MiLCJmbnMiLCJwYXR0ZXJuIiwicmUiLCJmbiIsInBvc3NpYmxlRGlycyIsImdldFBvc3NpYmxlRGlycyIsImFic29sdXRlUGF0dGVybnMiLCJuZWdhdGUiLCJzbGljZSIsIm5vY2FzZSIsIm5vbmVnYXRlIiwiY3VycmVudCIsInByZXZpb3VzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU8sSUFEb0MsRUFBN0M7O0FBR0FELFFBQVFFLGNBQVIsR0FBeUJBLGNBQXpCO0FBQ0FGLFFBQVFHLGdCQUFSLEdBQTJCLEtBQUssQ0FBaEM7O0FBRUEsU0FBU0MsS0FBVCxHQUFpQjtBQUNmLFFBQU1DLE9BQU9DLHVCQUF1QkMsUUFBUSxNQUFSLENBQXZCLENBQWI7O0FBRUFILFVBQVEsU0FBU0EsS0FBVCxHQUFpQjtBQUN2QixXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csV0FBVCxHQUF1QjtBQUNyQixRQUFNSCxPQUFPQyx1QkFBdUJDLFFBQVEsWUFBUixDQUF2QixDQUFiOztBQUVBQyxnQkFBYyxTQUFTQSxXQUFULEdBQXVCO0FBQ25DLFdBQU9ILElBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9BLElBQVA7QUFDRDs7QUFFRCxTQUFTSSxNQUFULEdBQWtCO0FBQ2hCLFFBQU1KLE9BQU9DLHVCQUF1QkMsUUFBUSxPQUFSLENBQXZCLENBQWI7O0FBRUFFLFdBQVMsU0FBU0EsTUFBVCxHQUFrQjtBQUN6QixXQUFPSixJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsSUFBSUssV0FBV0gsUUFBUSxzQkFBUixDQUFmOztBQUVBLElBQUlJLFNBQVNKLFFBQVEsU0FBUixDQUFiOztBQUVBLElBQUlLLFdBQVdMLFFBQVEsV0FBUixDQUFmOztBQUVBLElBQUlNLHFCQUFxQk4sUUFBUSxzQkFBUixDQUF6Qjs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ1EsR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxTQUFTRixHQUFYLEVBQXJDLENBQXdEOztBQUUvRixNQUFNRyxRQUFRLENBQUMsR0FBR1IsU0FBU08sT0FBYixFQUFzQiwyQkFBdEIsQ0FBZDtBQUNBLE1BQU1iLG1CQUFtQmUsZ0JBQWdCO0FBQ3ZDQyxRQUFNQyxPQUFPQSxHQUQwQjtBQUV2Q0MsUUFBTUMsVUFBVUMsc0JBQXNCRCxNQUF0QixDQUZ1QjtBQUd2Q0UsT0FBSyxDQUFDRixNQUFELEVBQVNHLE9BQVQsS0FBcUJDLHlCQUF5QkosTUFBekIsRUFBaUNHLE9BQWpDLENBSGE7QUFJdkNFLGFBQVcsQ0FBQ0wsTUFBRCxFQUFTTSxLQUFULEtBQW1CQywrQkFBK0JQLE1BQS9CLEVBQXVDTSxLQUF2QyxDQUpTO0FBS3ZDRSxnQkFBYyxDQUFDUixNQUFELEVBQVNNLEtBQVQsRUFBZ0JILE9BQWhCLEtBQTRCTSxrQ0FBa0NULE1BQWxDLEVBQTBDTSxLQUExQyxFQUFpREgsT0FBakQsQ0FMSCxFQUFoQixDQUF6Qjs7QUFPQXpCLFFBQVFHLGdCQUFSLEdBQTJCQSxnQkFBM0I7QUFDQSxNQUFNb0Isd0JBQXdCLENBQUMsR0FBR1gsU0FBU29CLGFBQWIsRUFBNEJWLFVBQVVXLHFCQUFxQlgsTUFBckIsRUFBNkJBLE9BQU9ZLEtBQXBDLEVBQTJDckIsbUJBQW1Cc0IseUJBQTlELENBQXRDLENBQTlCO0FBQ0EsTUFBTVQsMkJBQTJCLENBQUMsR0FBR2QsU0FBU29CLGFBQWIsRUFBNEJWLFVBQVUsQ0FBQyxHQUFHVixTQUFTd0IsZUFBYixFQUE4QlgsV0FBV1ksb0JBQW9CZixNQUFwQixFQUE0QkEsT0FBT1ksS0FBbkMsRUFBMENyQixtQkFBbUJzQix5QkFBN0QsRUFBd0ZWLE9BQXhGLENBQXpDLENBQXRDLENBQWpDO0FBQ0EsTUFBTUksaUNBQWlDLENBQUMsR0FBR2pCLFNBQVNvQixhQUFiLEVBQTRCVixVQUFVLENBQUMsR0FBR1YsU0FBU3dCLGVBQWIsRUFBOEJSLFNBQVNVLHlCQUF5QmhCLE1BQXpCLEVBQWlDQSxPQUFPWSxLQUF4QyxFQUErQ3JCLG1CQUFtQnNCLHlCQUFsRSxFQUE2RlAsS0FBN0YsQ0FBdkMsQ0FBdEMsQ0FBdkM7QUFDQSxNQUFNRyxvQ0FBb0MsQ0FBQyxHQUFHbkIsU0FBU29CLGFBQWIsRUFBNEJWLFVBQVUsQ0FBQyxHQUFHVixTQUFTd0IsZUFBYixFQUE4QlIsU0FBUyxDQUFDLEdBQUdoQixTQUFTd0IsZUFBYixFQUE4QlgsV0FBV2MsNEJBQTRCakIsTUFBNUIsRUFBb0NBLE9BQU9ZLEtBQTNDLEVBQWtEckIsbUJBQW1Cc0IseUJBQXJFLEVBQWdHUCxLQUFoRyxFQUF1R0gsT0FBdkcsQ0FBekMsQ0FBdkMsQ0FBdEMsQ0FBMUM7O0FBRUEsU0FBU3ZCLGNBQVQsQ0FBd0JzQyxJQUF4QixFQUE4QkMsT0FBOUIsRUFBdUM7QUFDckMsUUFBTUMsb0JBQW9CQyxzQkFBc0I7QUFDOUNDLGFBQVNKLElBRHFDO0FBRTlDSyxhQUFTSixRQUFRSyxHQUY2QixFQUF0QjtBQUd2QkwsU0FIdUIsQ0FBMUI7QUFJQSxNQUFJLENBQUNDLGlCQUFMLEVBQXdCLE9BQU8sSUFBUDtBQUN4QixRQUFNSyxhQUFhUCxLQUFLbkIsSUFBeEI7QUFDTTJCLFlBQVVELGVBQWUsS0FBSyxDQUFwQixHQUF3QixHQUF4QixHQUE4QkEsVUFEOUM7QUFFTUUscUJBQW1CVCxLQUFLVSxVQUY5QjtBQUdNQyxtQkFBaUJGLHFCQUFxQixLQUFLLENBQTFCLEdBQThCLElBQTlCLEdBQXFDQSxnQkFINUQ7QUFJQSxNQUFJRyxVQUFVWixLQUFLWSxPQUFuQjtBQUNJQyxpQkFBZWIsS0FBS2EsWUFEeEI7O0FBR0EsUUFBTUMsZUFBZWxELFFBQVFZLE9BQVIsQ0FBZ0J1QyxPQUFoQixDQUF3QmQsUUFBUUssR0FBaEMsRUFBcUNFLE9BQXJDLENBQXJCOztBQUVBLE1BQUlFLFVBQUo7O0FBRUEsTUFBSSxPQUFPQyxjQUFQLEtBQTBCLFFBQTlCLEVBQXdDO0FBQ3RDRCxpQkFBYSxDQUFDLEdBQUd2QyxPQUFPNkMsVUFBWCxFQUF1QkwsY0FBdkIsRUFBdUNWLFFBQVFLLEdBQS9DLEVBQW9ETCxRQUFRaEIsT0FBNUQsQ0FBYjtBQUNELEdBRkQsTUFFTyxJQUFJMEIsbUJBQW1CLElBQXZCLEVBQTZCO0FBQ2xDRCxpQkFBYSxDQUFDLEdBQUd2QyxPQUFPOEMsY0FBWCxFQUEyQkgsWUFBM0IsRUFBeUNiLFFBQVFoQixPQUFqRCxDQUFiO0FBQ0Q7O0FBRUQsUUFBTWlDLGtCQUFrQkMsWUFBeEI7O0FBRUEsTUFBSVQsVUFBSixFQUFnQjtBQUNkLFVBQU1VLGdCQUFnQkMsbUJBQW1CWCxVQUFuQixDQUF0QjtBQUNBLFVBQU1ZLFNBQVNDLGNBQWNILGFBQWQsRUFBNkJuQixPQUE3QixDQUFmO0FBQ0EsUUFBSSxDQUFDcUIsTUFBTCxFQUFhLE9BQU8sSUFBUDs7QUFFYixRQUFJVixZQUFZWSxTQUFoQixFQUEyQjtBQUN6QlosZ0JBQVVRLGNBQWNoQixPQUFkLENBQXNCUSxPQUFoQztBQUNEOztBQUVELFFBQUlDLGlCQUFpQlcsU0FBckIsRUFBZ0M7QUFDOUJYLHFCQUFlTyxjQUFjaEIsT0FBZCxDQUFzQlMsWUFBckM7QUFDRDs7QUFFRFksZUFBV1AsZUFBWCxFQUE0QkksTUFBNUI7QUFDRDs7QUFFRCxRQUFNSSxVQUFVLE9BQU96QixRQUFRMEIsUUFBZixLQUE0QixRQUE1QixHQUF1QyxDQUFDLEdBQUd4RCxPQUFPeUQsZUFBWCxFQUE0QjNCLFFBQVEwQixRQUFwQyxDQUF2QyxHQUF1RixJQUF2RztBQUNBLE1BQUlFLFVBQUosRUFBZ0JDLFdBQWhCO0FBQ0EsUUFBTUMsWUFBWVosWUFBbEI7O0FBRUEsTUFBSSxDQUFDUCxZQUFZLElBQVosSUFBb0JBLFlBQVlZLFNBQWpDLEtBQStDRSxPQUEvQyxJQUEwRE0sbUJBQW1CL0IsT0FBbkIsRUFBNEJ5QixPQUE1QixFQUFxQ2IsWUFBckMsRUFBbURDLFlBQW5ELENBQTlELEVBQWdJO0FBQzlILFFBQUltQixzQkFBc0IsQ0FBQyxHQUFHOUQsT0FBTytELGtCQUFYLEVBQStCUixPQUEvQixFQUF3Q3pCLFFBQVFoQixPQUFoRCxDQUExQjs7QUFFQTRDLGlCQUFhSSxvQkFBb0JFLE1BQWpDO0FBQ0FMLGtCQUFjRyxvQkFBb0JHLE1BQWxDOztBQUVBLFFBQUlQLGNBQWNRLGFBQWFwQyxPQUFiLEVBQXNCNEIsV0FBV00sTUFBakMsRUFBeUMsSUFBekMsRUFBK0NOLFdBQVd4QixPQUExRCxDQUFsQixFQUFzRjtBQUNwRixhQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFJeUIsV0FBSixFQUFpQjtBQUNmLFlBQU1SLFNBQVNDLGNBQWNlLG9CQUFvQlIsV0FBcEIsQ0FBZCxFQUFnRDdCLE9BQWhELENBQWY7QUFDQSxVQUFJLENBQUNxQixNQUFMLEVBQWEsT0FBTyxJQUFQO0FBQ2JHLGlCQUFXTSxTQUFYLEVBQXNCVCxNQUF0QjtBQUNEO0FBQ0Y7O0FBRUQsUUFBTWlCLFFBQVFkLFdBQVdBLFdBQVdBLFdBQVdOLFlBQVgsRUFBeUJELGVBQXpCLENBQVgsRUFBc0RhLFNBQXRELENBQVgsRUFBNkU3QixpQkFBN0UsQ0FBZDtBQUNBLFNBQU87QUFDTHNDLGFBQVNDLGlCQUFpQkYsTUFBTUMsT0FBdkIsQ0FESjtBQUVMRSxhQUFTRCxpQkFBaUJGLE1BQU1HLE9BQXZCLENBRko7QUFHTHRDLGFBQVNtQyxNQUFNbkMsT0FBTixDQUFjdUMsR0FBZCxDQUFrQkMsS0FBS0MsaUJBQWlCRCxDQUFqQixDQUF2QixDQUhKO0FBSUxULFlBQVFOLGNBQWNMLFNBSmpCO0FBS0xaLGFBQVNrQixlQUFlTixTQUxuQjtBQU1MWSxZQUFRMUIsY0FBY2MsU0FOakIsRUFBUDs7QUFRRDs7QUFFRCxTQUFTUSxrQkFBVCxDQUE0Qi9CLE9BQTVCLEVBQXFDeUIsT0FBckMsRUFBOENiLFlBQTlDLEVBQTREQyxZQUE1RCxFQUEwRTtBQUN4RSxNQUFJLE9BQU9ELFlBQVAsS0FBd0IsU0FBNUIsRUFBdUMsT0FBT0EsWUFBUDs7QUFFdkMsTUFBSUEsaUJBQWlCVyxTQUFyQixFQUFnQztBQUM5QixXQUFPRSxRQUFRb0IsV0FBUixDQUFvQkMsT0FBcEIsQ0FBNEJqQyxZQUE1QixNQUE4QyxDQUFDLENBQXREO0FBQ0Q7O0FBRUQsTUFBSWtDLGtCQUFrQm5DLFlBQXRCO0FBQ0EsTUFBSSxDQUFDb0MsTUFBTUMsT0FBTixDQUFjRixlQUFkLENBQUwsRUFBcUNBLGtCQUFrQixDQUFDQSxlQUFELENBQWxCO0FBQ3JDQSxvQkFBa0JBLGdCQUFnQkwsR0FBaEIsQ0FBb0JRLE9BQU92RixRQUFRWSxPQUFSLENBQWdCdUMsT0FBaEIsQ0FBd0JkLFFBQVFLLEdBQWhDLEVBQXFDNkMsR0FBckMsQ0FBM0IsQ0FBbEI7O0FBRUEsTUFBSUgsZ0JBQWdCSSxNQUFoQixLQUEyQixDQUEzQixJQUFnQ0osZ0JBQWdCLENBQWhCLE1BQXVCbEMsWUFBM0QsRUFBeUU7QUFDdkUsV0FBT1ksUUFBUW9CLFdBQVIsQ0FBb0JDLE9BQXBCLENBQTRCakMsWUFBNUIsTUFBOEMsQ0FBQyxDQUF0RDtBQUNEOztBQUVELFNBQU8sQ0FBQyxHQUFHOUMsY0FBY1EsT0FBbEIsRUFBMkJrRCxRQUFRb0IsV0FBbkMsRUFBZ0RFLGVBQWhELEVBQWlFSSxNQUFqRSxHQUEwRSxDQUFqRjtBQUNEOztBQUVELE1BQU0vQixxQkFBcUIsQ0FBQyxHQUFHakQsU0FBU29CLGFBQWIsRUFBNEI2RCxTQUFTO0FBQzlEQyxZQUFVRCxLQUFLQyxRQUQrQztBQUU5RGpELFdBQVNnRCxLQUFLaEQsT0FGZ0Q7QUFHOURELFdBQVMsQ0FBQyxHQUFHbEMsU0FBU3FGLFFBQWIsRUFBdUIsWUFBdkIsRUFBcUNGLEtBQUtqRCxPQUExQyxDQUhxRCxFQUFULENBQTVCLENBQTNCOztBQUtBLE1BQU1rQyxzQkFBc0IsQ0FBQyxHQUFHbEUsU0FBU29CLGFBQWIsRUFBNEI2RCxTQUFTO0FBQy9EQyxZQUFVRCxLQUFLQyxRQURnRDtBQUUvRGpELFdBQVNnRCxLQUFLaEQsT0FGaUQ7QUFHL0RELFdBQVMsQ0FBQyxHQUFHbEMsU0FBU3FGLFFBQWIsRUFBdUIsYUFBdkIsRUFBc0NGLEtBQUtqRCxPQUEzQyxDQUhzRCxFQUFULENBQTVCLENBQTVCOztBQUtBLE1BQU1vRCxxQkFBcUIsQ0FBQyxHQUFHcEYsU0FBU29CLGFBQWIsRUFBNEI2RCxTQUFTO0FBQzlEQyxZQUFVRCxLQUFLQyxRQUQrQztBQUU5RGpELFdBQVNnRCxLQUFLaEQsT0FGZ0Q7QUFHOURELFdBQVMsQ0FBQyxHQUFHbEMsU0FBU3FGLFFBQWIsRUFBdUIsYUFBdkIsRUFBc0NGLEtBQUtqRCxPQUEzQyxDQUhxRCxFQUFULENBQTVCLENBQTNCOztBQUtBLE1BQU1ELHdCQUF3QnpCLGdCQUFnQjtBQUM1Q0csUUFBTTRFLFNBQVNoRSxxQkFBcUJnRSxLQUFyQixFQUE0QixNQUE1QixFQUFvQ3BGLG1CQUFtQnFGLHVCQUF2RCxDQUQ2QjtBQUU1QzFFLE9BQUssQ0FBQ3lFLEtBQUQsRUFBUXhFLE9BQVIsS0FBb0JZLG9CQUFvQjRELEtBQXBCLEVBQTJCLE1BQTNCLEVBQW1DcEYsbUJBQW1CcUYsdUJBQXRELEVBQStFekUsT0FBL0UsQ0FGbUI7QUFHNUNFLGFBQVcsQ0FBQ3NFLEtBQUQsRUFBUXJFLEtBQVIsS0FBa0JVLHlCQUF5QjJELEtBQXpCLEVBQWdDLE1BQWhDLEVBQXdDcEYsbUJBQW1CcUYsdUJBQTNELEVBQW9GdEUsS0FBcEYsQ0FIZTtBQUk1Q0UsZ0JBQWMsQ0FBQ21FLEtBQUQsRUFBUXJFLEtBQVIsRUFBZUgsT0FBZixLQUEyQmMsNEJBQTRCMEQsS0FBNUIsRUFBbUMsTUFBbkMsRUFBMkNwRixtQkFBbUJxRix1QkFBOUQsRUFBdUZ0RSxLQUF2RixFQUE4RkgsT0FBOUYsQ0FKRyxFQUFoQixDQUE5Qjs7QUFNQSxNQUFNc0MsZ0JBQWdCN0MsZ0JBQWdCO0FBQ3BDRyxRQUFNd0UsUUFBUU0sb0JBQW9CTixJQUFwQixDQURzQjtBQUVwQ3JFLE9BQUssQ0FBQ3FFLElBQUQsRUFBT3BFLE9BQVAsS0FBbUIyRSx1QkFBdUJQLElBQXZCLEVBQTZCcEUsT0FBN0IsQ0FGWTtBQUdwQ0UsYUFBVyxDQUFDa0UsSUFBRCxFQUFPakUsS0FBUCxLQUFpQnlFLDZCQUE2QlIsSUFBN0IsRUFBbUNqRSxLQUFuQyxDQUhRO0FBSXBDRSxnQkFBYyxDQUFDK0QsSUFBRCxFQUFPakUsS0FBUCxFQUFjSCxPQUFkLEtBQTBCNkUsZ0NBQWdDVCxJQUFoQyxFQUFzQ2pFLEtBQXRDLEVBQTZDSCxPQUE3QyxDQUpKLEVBQWhCLENBQXRCOztBQU1BLE1BQU0wRSxzQkFBc0IsQ0FBQyxHQUFHdkYsU0FBU29CLGFBQWIsRUFBNEI2RCxRQUFRNUQscUJBQXFCNEQsSUFBckIsRUFBMkJBLEtBQUtDLFFBQWhDLEVBQTBDakYsbUJBQW1Cc0IseUJBQTdELENBQXBDLENBQTVCO0FBQ0EsTUFBTWlFLHlCQUF5QixDQUFDLEdBQUd4RixTQUFTb0IsYUFBYixFQUE0QjZELFFBQVEsQ0FBQyxHQUFHakYsU0FBU3dCLGVBQWIsRUFBOEJYLFdBQVdZLG9CQUFvQndELElBQXBCLEVBQTBCQSxLQUFLQyxRQUEvQixFQUF5Q2pGLG1CQUFtQnNCLHlCQUE1RCxFQUF1RlYsT0FBdkYsQ0FBekMsQ0FBcEMsQ0FBL0I7QUFDQSxNQUFNNEUsK0JBQStCLENBQUMsR0FBR3pGLFNBQVNvQixhQUFiLEVBQTRCNkQsUUFBUSxDQUFDLEdBQUdqRixTQUFTd0IsZUFBYixFQUE4QlIsU0FBU1UseUJBQXlCdUQsSUFBekIsRUFBK0JBLEtBQUtDLFFBQXBDLEVBQThDakYsbUJBQW1Cc0IseUJBQWpFLEVBQTRGUCxLQUE1RixDQUF2QyxDQUFwQyxDQUFyQztBQUNBLE1BQU0wRSxrQ0FBa0MsQ0FBQyxHQUFHMUYsU0FBU29CLGFBQWIsRUFBNEI2RCxRQUFRLENBQUMsR0FBR2pGLFNBQVN3QixlQUFiLEVBQThCUixTQUFTLENBQUMsR0FBR2hCLFNBQVN3QixlQUFiLEVBQThCWCxXQUFXYyw0QkFBNEJzRCxJQUE1QixFQUFrQ0EsS0FBS0MsUUFBdkMsRUFBaURqRixtQkFBbUJzQix5QkFBcEUsRUFBK0ZQLEtBQS9GLEVBQXNHSCxPQUF0RyxDQUF6QyxDQUF2QyxDQUFwQyxDQUF4Qzs7QUFFQSxTQUFTUSxvQkFBVCxDQUE4QjtBQUM1QlksU0FENEI7QUFFNUJELFNBRjRCLEVBQTlCO0FBR0dWLEtBSEgsRUFHVXFFLFdBSFYsRUFHdUI7QUFDckIsU0FBT0EsWUFBWTFELE9BQVosRUFBcUJELE9BQXJCLEVBQThCVixLQUE5QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0csbUJBQVQsQ0FBNkI7QUFDM0JRLFNBRDJCO0FBRTNCRCxTQUYyQixFQUE3QjtBQUdHVixLQUhILEVBR1VxRSxXQUhWLEVBR3VCOUUsT0FIdkIsRUFHZ0M7QUFDOUIsUUFBTWUsT0FBT0ksUUFBUXBCLEdBQVIsSUFBZW9CLFFBQVFwQixHQUFSLENBQVlDLE9BQVosQ0FBNUI7QUFDQSxTQUFPZSxPQUFPK0QsWUFBWTFELE9BQVosRUFBcUJMLElBQXJCLEVBQTRCLEdBQUVOLEtBQU0sU0FBUVQsT0FBUSxJQUFwRCxDQUFQLEdBQWtFLElBQXpFO0FBQ0Q7O0FBRUQsU0FBU2Esd0JBQVQsQ0FBa0M7QUFDaENPLFNBRGdDO0FBRWhDRCxTQUZnQyxFQUFsQztBQUdHVixLQUhILEVBR1VxRSxXQUhWLEVBR3VCM0UsS0FIdkIsRUFHOEI7QUFDNUIsUUFBTVksT0FBT0ksUUFBUWpCLFNBQVIsSUFBcUJpQixRQUFRakIsU0FBUixDQUFrQkMsS0FBbEIsQ0FBbEM7QUFDQSxNQUFJLENBQUNZLElBQUwsRUFBVyxNQUFNLElBQUlnRSxLQUFKLENBQVUsc0NBQVYsQ0FBTjtBQUNYLFNBQU9ELFlBQVkxRCxPQUFaLEVBQXFCTCxJQUFyQixFQUE0QixHQUFFTixLQUFNLGNBQWFOLEtBQU0sR0FBdkQsQ0FBUDtBQUNEOztBQUVELFNBQVNXLDJCQUFULENBQXFDO0FBQ25DTSxTQURtQztBQUVuQ0QsU0FGbUMsRUFBckM7QUFHR1YsS0FISCxFQUdVcUUsV0FIVixFQUd1QjNFLEtBSHZCLEVBRzhCSCxPQUg5QixFQUd1QztBQUNyQyxRQUFNZ0YsV0FBVzdELFFBQVFqQixTQUFSLElBQXFCaUIsUUFBUWpCLFNBQVIsQ0FBa0JDLEtBQWxCLENBQXRDO0FBQ0EsTUFBSSxDQUFDNkUsUUFBTCxFQUFlLE1BQU0sSUFBSUQsS0FBSixDQUFVLHNDQUFWLENBQU47QUFDZixRQUFNaEUsT0FBT2lFLFNBQVNqRixHQUFULElBQWdCaUYsU0FBU2pGLEdBQVQsQ0FBYUMsT0FBYixDQUE3QjtBQUNBLFNBQU9lLE9BQU8rRCxZQUFZMUQsT0FBWixFQUFxQkwsSUFBckIsRUFBNEIsR0FBRU4sS0FBTSxjQUFhTixLQUFNLFVBQVNILE9BQVEsSUFBeEUsQ0FBUCxHQUFzRixJQUE3RjtBQUNEOztBQUVELFNBQVNQLGVBQVQsQ0FBeUI7QUFDdkJHLE1BRHVCO0FBRXZCRyxLQUZ1QjtBQUd2QkcsV0FIdUI7QUFJdkJHLGNBSnVCLEVBQXpCO0FBS0c7QUFDRCxTQUFPLENBQUNtRSxLQUFELEVBQVF4RCxPQUFSLEVBQWlCaUUsUUFBUSxJQUFJQyxHQUFKLEVBQXpCLEtBQXVDO0FBQzVDLFVBQU05RCxVQUFVb0QsTUFBTXBELE9BQXRCO0FBQ0EsVUFBTStELG1CQUFtQixFQUF6QjtBQUNBLFVBQU1DLFdBQVd4RixLQUFLNEUsS0FBTCxDQUFqQjs7QUFFQSxRQUFJYSxtQkFBbUJELFFBQW5CLEVBQTZCaEUsT0FBN0IsRUFBc0NKLE9BQXRDLENBQUosRUFBb0Q7QUFDbERtRSx1QkFBaUJHLElBQWpCLENBQXNCRixRQUF0QjtBQUNBLFlBQU1HLFVBQVV4RixJQUFJeUUsS0FBSixFQUFXeEQsUUFBUWhCLE9BQW5CLENBQWhCOztBQUVBLFVBQUl1RixXQUFXRixtQkFBbUJFLE9BQW5CLEVBQTRCbkUsT0FBNUIsRUFBcUNKLE9BQXJDLENBQWYsRUFBOEQ7QUFDNURtRSx5QkFBaUJHLElBQWpCLENBQXNCQyxPQUF0QjtBQUNEOztBQUVELE9BQUNILFNBQVNqRSxPQUFULENBQWlCakIsU0FBakIsSUFBOEIsRUFBL0IsRUFBbUNzRixPQUFuQyxDQUEyQyxDQUFDQyxDQUFELEVBQUl0RixLQUFKLEtBQWM7QUFDdkQsY0FBTXVGLGNBQWN4RixVQUFVc0UsS0FBVixFQUFpQnJFLEtBQWpCLENBQXBCOztBQUVBLFlBQUlrRixtQkFBbUJLLFdBQW5CLEVBQWdDdEUsT0FBaEMsRUFBeUNKLE9BQXpDLENBQUosRUFBdUQ7QUFDckRtRSwyQkFBaUJHLElBQWpCLENBQXNCSSxXQUF0QjtBQUNBLGdCQUFNQyxrQkFBa0J0RixhQUFhbUUsS0FBYixFQUFvQnJFLEtBQXBCLEVBQTJCYSxRQUFRaEIsT0FBbkMsQ0FBeEI7O0FBRUEsY0FBSTJGLG1CQUFtQk4sbUJBQW1CTSxlQUFuQixFQUFvQ3ZFLE9BQXBDLEVBQTZDSixPQUE3QyxDQUF2QixFQUE4RTtBQUM1RW1FLDZCQUFpQkcsSUFBakIsQ0FBc0JLLGVBQXRCO0FBQ0Q7QUFDRjtBQUNGLE9BWEQ7QUFZRDs7QUFFRCxRQUFJUixpQkFBaUJTLElBQWpCLENBQXNCLENBQUM7QUFDekJ6RSxlQUFTO0FBQ1ArQixjQURPO0FBRVAyQyxZQUZPLEVBRGdCLEVBQUQ7O0FBS3BCekMsaUJBQWFwQyxPQUFiLEVBQXNCa0MsTUFBdEIsRUFBOEIyQyxJQUE5QixFQUFvQ3pFLE9BQXBDLENBTEYsQ0FBSixFQUtxRDtBQUNuRCxhQUFPLElBQVA7QUFDRDs7QUFFRCxVQUFNa0MsUUFBUXBCLFlBQWQ7O0FBRUEsU0FBSyxJQUFJNEQsS0FBSyxDQUFkLEVBQWlCQSxLQUFLWCxpQkFBaUJoQixNQUF2QyxFQUErQzJCLElBQS9DLEVBQXFEO0FBQ25ELFlBQU1DLEtBQUtaLGlCQUFpQlcsRUFBakIsQ0FBWDs7QUFFQSxVQUFJLENBQUNFLGtCQUFrQjFDLEtBQWxCLEVBQXlCeUMsR0FBRzVFLE9BQTVCLEVBQXFDQyxPQUFyQyxFQUE4Q0osT0FBOUMsRUFBdURpRSxLQUF2RCxDQUFMLEVBQW9FO0FBQ2xFLGVBQU8sSUFBUDtBQUNEOztBQUVEZ0IscUJBQWUzQyxLQUFmLEVBQXNCeUMsRUFBdEI7QUFDRDs7QUFFRCxXQUFPekMsS0FBUDtBQUNELEdBakREO0FBa0REOztBQUVELFNBQVMwQyxpQkFBVCxDQUEyQjFDLEtBQTNCLEVBQWtDdkMsSUFBbEMsRUFBd0NLLE9BQXhDLEVBQWlESixPQUFqRCxFQUEwRGlFLEtBQTFELEVBQWlFO0FBQy9ELE1BQUlsRSxLQUFLbUYsT0FBTCxLQUFpQjNELFNBQXJCLEVBQWdDLE9BQU8sSUFBUDtBQUNoQyxRQUFNNkIsT0FBTyxDQUFDLEdBQUdsRixPQUFPNkMsVUFBWCxFQUF1QmhCLEtBQUttRixPQUE1QixFQUFxQzlFLE9BQXJDLEVBQThDSixRQUFRaEIsT0FBdEQsQ0FBYjs7QUFFQSxNQUFJaUYsTUFBTWtCLEdBQU4sQ0FBVS9CLElBQVYsQ0FBSixFQUFxQjtBQUNuQixVQUFNLElBQUlXLEtBQUosQ0FBVyx3Q0FBdUNYLEtBQUtDLFFBQVMsS0FBdEQsR0FBOEQsbURBQTlELEdBQW1ITCxNQUFNb0MsSUFBTixDQUFXbkIsS0FBWCxFQUFrQmIsUUFBUyxNQUFLQSxLQUFLQyxRQUFTLEVBQTlDLEVBQWlEZ0MsSUFBakQsQ0FBc0QsSUFBdEQsQ0FBN0gsQ0FBTjtBQUNEOztBQUVEcEIsUUFBTXFCLEdBQU4sQ0FBVWxDLElBQVY7QUFDQSxRQUFNdEIsWUFBWVIsY0FBY2lDLG1CQUFtQkgsSUFBbkIsQ0FBZCxFQUF3Q3BELE9BQXhDLEVBQWlEaUUsS0FBakQsQ0FBbEI7QUFDQUEsUUFBTXNCLE1BQU4sQ0FBYW5DLElBQWI7QUFDQSxNQUFJLENBQUN0QixTQUFMLEVBQWdCLE9BQU8sS0FBUDtBQUNoQk4sYUFBV2MsS0FBWCxFQUFrQlIsU0FBbEI7QUFDQSxTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTTixVQUFULENBQW9CZ0UsTUFBcEIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2xDRCxTQUFPckYsT0FBUCxDQUFlbUUsSUFBZixDQUFvQixHQUFHbUIsT0FBT3RGLE9BQTlCO0FBQ0FxRixTQUFPakQsT0FBUCxDQUFlK0IsSUFBZixDQUFvQixHQUFHbUIsT0FBT2xELE9BQTlCO0FBQ0FpRCxTQUFPL0MsT0FBUCxDQUFlNkIsSUFBZixDQUFvQixHQUFHbUIsT0FBT2hELE9BQTlCO0FBQ0EsU0FBTytDLE1BQVA7QUFDRDs7QUFFRCxTQUFTUCxjQUFULENBQXdCTyxNQUF4QixFQUFnQztBQUM5QnJGLFNBRDhCO0FBRTlCb0MsU0FGOEI7QUFHOUJFLFNBSDhCLEVBQWhDO0FBSUc7QUFDRCtDLFNBQU9yRixPQUFQLENBQWVtRSxJQUFmLENBQW9CbkUsT0FBcEI7QUFDQXFGLFNBQU9qRCxPQUFQLENBQWUrQixJQUFmLENBQW9CLEdBQUcvQixTQUF2QjtBQUNBaUQsU0FBTy9DLE9BQVAsQ0FBZTZCLElBQWYsQ0FBb0IsR0FBRzdCLFNBQXZCO0FBQ0EsU0FBTytDLE1BQVA7QUFDRDs7QUFFRCxTQUFTdEUsVUFBVCxHQUFzQjtBQUNwQixTQUFPO0FBQ0xmLGFBQVMsRUFESjtBQUVMc0MsYUFBUyxFQUZKO0FBR0xGLGFBQVMsRUFISixFQUFQOztBQUtEOztBQUVELFNBQVNLLGdCQUFULENBQTBCN0MsSUFBMUIsRUFBZ0M7QUFDOUIsUUFBTUksVUFBVTlDLE9BQU9xSSxNQUFQLENBQWMsRUFBZCxFQUFrQjNGLElBQWxCLENBQWhCO0FBQ0EsU0FBT0ksUUFBUStFLE9BQWY7QUFDQSxTQUFPL0UsUUFBUXBCLEdBQWY7QUFDQSxTQUFPb0IsUUFBUW9DLE9BQWY7QUFDQSxTQUFPcEMsUUFBUXNDLE9BQWY7QUFDQSxTQUFPdEMsUUFBUXdGLGFBQWY7QUFDQSxTQUFPeEYsUUFBUStCLE1BQWY7QUFDQSxTQUFPL0IsUUFBUTBFLElBQWY7O0FBRUEsTUFBSTFFLFFBQVF5RixTQUFaLEVBQXVCO0FBQ3JCekYsWUFBUTBGLFVBQVIsR0FBcUIxRixRQUFReUYsU0FBN0I7QUFDQSxXQUFPekYsUUFBUXlGLFNBQWY7QUFDRDs7QUFFRCxTQUFPekYsT0FBUDtBQUNEOztBQUVELFNBQVNxQyxnQkFBVCxDQUEwQnNELEtBQTFCLEVBQWlDO0FBQy9CLFFBQU1wRCxNQUFNLElBQUlxRCxHQUFKLEVBQVo7QUFDQSxRQUFNakMsY0FBYyxFQUFwQjs7QUFFQSxPQUFLLElBQUlrQyxZQUFZRixLQUFoQixFQUF1QkcsV0FBV2pELE1BQU1DLE9BQU4sQ0FBYytDLFNBQWQsQ0FBbEMsRUFBNERFLE1BQU0sQ0FBbEUsRUFBcUVGLFlBQVlDLFdBQVdELFNBQVgsR0FBdUJBLFVBQVVHLE9BQU9DLFFBQWpCLEdBQTdHLElBQTZJO0FBQzNJLFFBQUlDLElBQUo7O0FBRUEsUUFBSUosUUFBSixFQUFjO0FBQ1osVUFBSUMsT0FBT0YsVUFBVTdDLE1BQXJCLEVBQTZCO0FBQzdCa0QsYUFBT0wsVUFBVUUsS0FBVixDQUFQO0FBQ0QsS0FIRCxNQUdPO0FBQ0xBLFlBQU1GLFVBQVVNLElBQVYsRUFBTjtBQUNBLFVBQUlKLElBQUlLLElBQVIsRUFBYztBQUNkRixhQUFPSCxJQUFJMUksS0FBWDtBQUNEOztBQUVELFVBQU1nSixPQUFPSCxJQUFiOztBQUVBLFFBQUksT0FBT0csS0FBS2hKLEtBQVosS0FBc0IsVUFBMUIsRUFBc0M7QUFDcEMsWUFBTWlKLFFBQVFELEtBQUtoSixLQUFuQjtBQUNBLFVBQUlrSixVQUFVaEUsSUFBSWlFLEdBQUosQ0FBUUYsS0FBUixDQUFkOztBQUVBLFVBQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQ1pBLGtCQUFVLElBQUlYLEdBQUosRUFBVjtBQUNBckQsWUFBSWtFLEdBQUosQ0FBUUgsS0FBUixFQUFlQyxPQUFmO0FBQ0Q7O0FBRUQsVUFBSUcsT0FBT0gsUUFBUUMsR0FBUixDQUFZSCxLQUFLTSxJQUFqQixDQUFYOztBQUVBLFVBQUksQ0FBQ0QsSUFBTCxFQUFXO0FBQ1RBLGVBQU87QUFDTHJKLGlCQUFPLElBREYsRUFBUDs7QUFHQXNHLG9CQUFZUSxJQUFaLENBQWlCdUMsSUFBakI7QUFDQSxZQUFJLENBQUNMLEtBQUtPLE9BQVYsRUFBbUJMLFFBQVFFLEdBQVIsQ0FBWUosS0FBS00sSUFBakIsRUFBdUJELElBQXZCO0FBQ3BCOztBQUVELFVBQUlMLEtBQUtyRyxPQUFMLEtBQWlCLEtBQXJCLEVBQTRCO0FBQzFCMEcsYUFBS3JKLEtBQUwsR0FBYSxJQUFiO0FBQ0QsT0FGRCxNQUVPO0FBQ0xxSixhQUFLckosS0FBTCxHQUFhZ0osSUFBYjtBQUNEO0FBQ0YsS0F4QkQsTUF3Qk87QUFDTDFDLGtCQUFZUSxJQUFaLENBQWlCO0FBQ2Y5RyxlQUFPZ0osSUFEUSxFQUFqQjs7QUFHRDtBQUNGOztBQUVELFNBQU8xQyxZQUFZa0QsTUFBWixDQUFtQixDQUFDQyxHQUFELEVBQU1KLElBQU4sS0FBZTtBQUN2QyxRQUFJQSxLQUFLckosS0FBVCxFQUFnQnlKLElBQUkzQyxJQUFKLENBQVN1QyxLQUFLckosS0FBZDtBQUNoQixXQUFPeUosR0FBUDtBQUNELEdBSE0sRUFHSixFQUhJLENBQVA7QUFJRDs7QUFFRCxTQUFTNUMsa0JBQVQsQ0FBNEI7QUFDMUJsRSxTQUQwQixFQUE1QjtBQUVHQyxPQUZILEVBRVlKLE9BRlosRUFFcUI7QUFDbkIsU0FBTyxDQUFDRyxRQUFRK0csSUFBUixLQUFpQjNGLFNBQWpCLElBQThCNEYsd0JBQXdCbkgsT0FBeEIsRUFBaUNHLFFBQVErRyxJQUF6QyxFQUErQzlHLE9BQS9DLENBQS9CLE1BQTRGRCxRQUFRaUgsT0FBUixLQUFvQjdGLFNBQXBCLElBQWlDNEYsd0JBQXdCbkgsT0FBeEIsRUFBaUNHLFFBQVFpSCxPQUF6QyxFQUFrRGhILE9BQWxELENBQTdILE1BQTZMRCxRQUFRa0gsT0FBUixLQUFvQjlGLFNBQXBCLElBQWlDLENBQUM0Rix3QkFBd0JuSCxPQUF4QixFQUFpQ0csUUFBUWtILE9BQXpDLEVBQWtEakgsT0FBbEQsQ0FBL04sQ0FBUDtBQUNEOztBQUVELFNBQVMrRyx1QkFBVCxDQUFpQ25ILE9BQWpDLEVBQTBDa0gsSUFBMUMsRUFBZ0Q5RyxPQUFoRCxFQUF5RDtBQUN2RCxNQUFJSixRQUFRMEIsUUFBUixLQUFxQixJQUF6QixFQUErQjtBQUM3QixVQUFNLElBQUlxQyxLQUFKLENBQVcsa0dBQVgsQ0FBTjtBQUNEOztBQUVELFFBQU11RCxNQUFNdEgsT0FBWjtBQUNBLFFBQU11SCxXQUFXdkUsTUFBTUMsT0FBTixDQUFjaUUsSUFBZCxJQUFzQkEsSUFBdEIsR0FBNkIsQ0FBQ0EsSUFBRCxDQUE5QztBQUNBLFNBQU9NLGdCQUFnQkYsR0FBaEIsRUFBcUJDLFFBQXJCLEVBQStCbkgsT0FBL0IsRUFBd0MsS0FBeEMsQ0FBUDtBQUNEOztBQUVELFNBQVNnQyxZQUFULENBQXNCcEMsT0FBdEIsRUFBK0JrQyxNQUEvQixFQUF1QzJDLElBQXZDLEVBQTZDekUsT0FBN0MsRUFBc0Q7QUFDcEQsTUFBSThCLE1BQUosRUFBWTtBQUNWLFFBQUlsQyxRQUFRMEIsUUFBUixLQUFxQixJQUF6QixFQUErQjtBQUM3QixZQUFNLElBQUlxQyxLQUFKLENBQVcsMkVBQVgsQ0FBTjtBQUNEOztBQUVELFVBQU11RCxNQUFNdEgsT0FBWjs7QUFFQSxRQUFJd0gsZ0JBQWdCRixHQUFoQixFQUFxQnBGLE1BQXJCLEVBQTZCOUIsT0FBN0IsQ0FBSixFQUEyQztBQUN6QzVCLFlBQU0saURBQU4sRUFBeUR3QixRQUFRMEIsUUFBakUsRUFBMkVRLE1BQTNFLEVBQW1GOUIsT0FBbkY7QUFDQSxhQUFPLElBQVA7QUFDRDtBQUNGOztBQUVELE1BQUl5RSxJQUFKLEVBQVU7QUFDUixRQUFJN0UsUUFBUTBCLFFBQVIsS0FBcUIsSUFBekIsRUFBK0I7QUFDN0IsWUFBTSxJQUFJcUMsS0FBSixDQUFXLDJFQUFYLENBQU47QUFDRDs7QUFFRCxVQUFNdUQsTUFBTXRILE9BQVo7O0FBRUEsUUFBSSxDQUFDd0gsZ0JBQWdCRixHQUFoQixFQUFxQnpDLElBQXJCLEVBQTJCekUsT0FBM0IsQ0FBTCxFQUEwQztBQUN4QzVCLFlBQU0seURBQU4sRUFBaUV3QixRQUFRMEIsUUFBekUsRUFBbUZtRCxJQUFuRixFQUF5RnpFLE9BQXpGO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLEtBQVA7QUFDRDs7QUFFRCxTQUFTb0gsZUFBVCxDQUF5QnhILE9BQXpCLEVBQWtDdUgsUUFBbEMsRUFBNENuSCxPQUE1QyxFQUFxRHFILGdCQUFnQixJQUFyRSxFQUEyRTtBQUN6RSxRQUFNQyxNQUFNLEVBQVo7QUFDQSxRQUFNQyxVQUFVLEVBQWhCO0FBQ0EsUUFBTUMsTUFBTSxFQUFaO0FBQ0FMLFdBQVMvQyxPQUFULENBQWlCcUQsV0FBVztBQUMxQixRQUFJLE9BQU9BLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUNGLFFBQVFyRCxJQUFSLENBQWF1RCxPQUFiLEVBQWpDLEtBQTRELElBQUksT0FBT0EsT0FBUCxLQUFtQixVQUF2QixFQUFtQ0QsSUFBSXRELElBQUosQ0FBU3VELE9BQVQsRUFBbkMsS0FBMERILElBQUlwRCxJQUFKLENBQVN1RCxPQUFUO0FBQ3ZILEdBRkQ7QUFHQSxRQUFNbkcsV0FBVzFCLFFBQVEwQixRQUF6QjtBQUNBLE1BQUlnRyxJQUFJOUMsSUFBSixDQUFTa0QsTUFBTUEsR0FBR1osSUFBSCxDQUFRbEgsUUFBUTBCLFFBQWhCLENBQWYsQ0FBSixFQUErQyxPQUFPLElBQVA7QUFDL0MsTUFBSWtHLElBQUloRCxJQUFKLENBQVNtRCxNQUFNQSxHQUFHckcsUUFBSCxDQUFmLENBQUosRUFBa0MsT0FBTyxJQUFQOztBQUVsQyxNQUFJaUcsUUFBUXhFLE1BQVIsR0FBaUIsQ0FBckIsRUFBd0I7QUFDdEIsVUFBTTZFLGVBQWVDLGdCQUFnQmpJLE9BQWhCLENBQXJCO0FBQ0EsVUFBTWtJLG1CQUFtQlAsUUFBUWpGLEdBQVIsQ0FBWW1GLFdBQVc7QUFDOUMsWUFBTU0sU0FBU04sUUFBUSxDQUFSLE1BQWUsR0FBOUI7O0FBRUEsVUFBSU0sVUFBVSxDQUFDVixhQUFmLEVBQThCO0FBQzVCLGNBQU0sSUFBSTFELEtBQUosQ0FBVywwQ0FBWCxDQUFOO0FBQ0Q7O0FBRUQsVUFBSW9FLE1BQUosRUFBWU4sVUFBVUEsUUFBUU8sS0FBUixDQUFjLENBQWQsQ0FBVjtBQUNaLGFBQU8sQ0FBQ0QsU0FBUyxHQUFULEdBQWUsRUFBaEIsSUFBc0J4SyxRQUFRWSxPQUFSLENBQWdCdUMsT0FBaEIsQ0FBd0JWLE9BQXhCLEVBQWlDeUgsT0FBakMsQ0FBN0I7QUFDRCxLQVR3QixDQUF6Qjs7QUFXQSxRQUFJLENBQUMsR0FBRzlKLGNBQWNRLE9BQWxCLEVBQTJCeUosWUFBM0IsRUFBeUNFLGdCQUF6QyxFQUEyRDtBQUM3REcsY0FBUSxJQURxRDtBQUU3REMsZ0JBQVUsQ0FBQ2IsYUFGa0QsRUFBM0Q7QUFHRHRFLFVBSEMsR0FHUSxDQUhaLEVBR2U7QUFDYixhQUFPLElBQVA7QUFDRDtBQUNGOztBQUVELFNBQU8sS0FBUDtBQUNEOztBQUVELE1BQU04RSxrQkFBa0IsQ0FBQyxHQUFHOUosU0FBU29CLGFBQWIsRUFBNEJTLFdBQVc7QUFDN0QsTUFBSXVJLFVBQVV2SSxRQUFRMEIsUUFBdEI7QUFDQSxNQUFJNkcsWUFBWSxJQUFoQixFQUFzQixPQUFPLEVBQVA7QUFDdEIsUUFBTVAsZUFBZSxDQUFDTyxPQUFELENBQXJCOztBQUVBLFNBQU8sSUFBUCxFQUFhO0FBQ1gsVUFBTUMsV0FBV0QsT0FBakI7QUFDQUEsY0FBVTVLLFFBQVFZLE9BQVIsQ0FBZ0I2QixPQUFoQixDQUF3Qm1JLE9BQXhCLENBQVY7QUFDQSxRQUFJQyxhQUFhRCxPQUFqQixFQUEwQjtBQUMxQlAsaUJBQWExRCxJQUFiLENBQWtCaUUsT0FBbEI7QUFDRDs7QUFFRCxTQUFPUCxZQUFQO0FBQ0QsQ0FidUIsQ0FBeEIiLCJzb3VyY2VSb290IjoiL1VzZXJzL3N0ZXZlbnZhbmR1cm0vRGV2ZWxvcGVyL2VpZ2VuLXJlYWN0LW5hdGl2ZS1BcmR1aW5vL2FwcC9ub2RlX21vZHVsZXMvbWV0cm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9jb3JlL2xpYi9jb25maWciLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYnVpbGRSb290Q2hhaW4gPSBidWlsZFJvb3RDaGFpbjtcbmV4cG9ydHMuYnVpbGRQcmVzZXRDaGFpbiA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX3BhdGgoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcblxuICBfcGF0aCA9IGZ1bmN0aW9uIF9wYXRoKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfbWljcm9tYXRjaCgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1pY3JvbWF0Y2hcIikpO1xuXG4gIF9taWNyb21hdGNoID0gZnVuY3Rpb24gX21pY3JvbWF0Y2goKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF9kZWJ1ZygpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcblxuICBfZGVidWcgPSBmdW5jdGlvbiBfZGVidWcoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfb3B0aW9ucyA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRpb24vb3B0aW9uc1wiKTtcblxudmFyIF9maWxlcyA9IHJlcXVpcmUoXCIuL2ZpbGVzXCIpO1xuXG52YXIgX2NhY2hpbmcgPSByZXF1aXJlKFwiLi9jYWNoaW5nXCIpO1xuXG52YXIgX2NvbmZpZ0Rlc2NyaXB0b3JzID0gcmVxdWlyZShcIi4vY29uZmlnLWRlc2NyaXB0b3JzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBkZWJ1ZyA9ICgwLCBfZGVidWcoKS5kZWZhdWx0KShcImJhYmVsOmNvbmZpZzpjb25maWctY2hhaW5cIik7XG5jb25zdCBidWlsZFByZXNldENoYWluID0gbWFrZUNoYWluV2Fsa2VyKHtcbiAgaW5pdDogYXJnID0+IGFyZyxcbiAgcm9vdDogcHJlc2V0ID0+IGxvYWRQcmVzZXREZXNjcmlwdG9ycyhwcmVzZXQpLFxuICBlbnY6IChwcmVzZXQsIGVudk5hbWUpID0+IGxvYWRQcmVzZXRFbnZEZXNjcmlwdG9ycyhwcmVzZXQpKGVudk5hbWUpLFxuICBvdmVycmlkZXM6IChwcmVzZXQsIGluZGV4KSA9PiBsb2FkUHJlc2V0T3ZlcnJpZGVzRGVzY3JpcHRvcnMocHJlc2V0KShpbmRleCksXG4gIG92ZXJyaWRlc0VudjogKHByZXNldCwgaW5kZXgsIGVudk5hbWUpID0+IGxvYWRQcmVzZXRPdmVycmlkZXNFbnZEZXNjcmlwdG9ycyhwcmVzZXQpKGluZGV4KShlbnZOYW1lKVxufSk7XG5leHBvcnRzLmJ1aWxkUHJlc2V0Q2hhaW4gPSBidWlsZFByZXNldENoYWluO1xuY29uc3QgbG9hZFByZXNldERlc2NyaXB0b3JzID0gKDAsIF9jYWNoaW5nLm1ha2VXZWFrQ2FjaGUpKHByZXNldCA9PiBidWlsZFJvb3REZXNjcmlwdG9ycyhwcmVzZXQsIHByZXNldC5hbGlhcywgX2NvbmZpZ0Rlc2NyaXB0b3JzLmNyZWF0ZVVuY2FjaGVkRGVzY3JpcHRvcnMpKTtcbmNvbnN0IGxvYWRQcmVzZXRFbnZEZXNjcmlwdG9ycyA9ICgwLCBfY2FjaGluZy5tYWtlV2Vha0NhY2hlKShwcmVzZXQgPT4gKDAsIF9jYWNoaW5nLm1ha2VTdHJvbmdDYWNoZSkoZW52TmFtZSA9PiBidWlsZEVudkRlc2NyaXB0b3JzKHByZXNldCwgcHJlc2V0LmFsaWFzLCBfY29uZmlnRGVzY3JpcHRvcnMuY3JlYXRlVW5jYWNoZWREZXNjcmlwdG9ycywgZW52TmFtZSkpKTtcbmNvbnN0IGxvYWRQcmVzZXRPdmVycmlkZXNEZXNjcmlwdG9ycyA9ICgwLCBfY2FjaGluZy5tYWtlV2Vha0NhY2hlKShwcmVzZXQgPT4gKDAsIF9jYWNoaW5nLm1ha2VTdHJvbmdDYWNoZSkoaW5kZXggPT4gYnVpbGRPdmVycmlkZURlc2NyaXB0b3JzKHByZXNldCwgcHJlc2V0LmFsaWFzLCBfY29uZmlnRGVzY3JpcHRvcnMuY3JlYXRlVW5jYWNoZWREZXNjcmlwdG9ycywgaW5kZXgpKSk7XG5jb25zdCBsb2FkUHJlc2V0T3ZlcnJpZGVzRW52RGVzY3JpcHRvcnMgPSAoMCwgX2NhY2hpbmcubWFrZVdlYWtDYWNoZSkocHJlc2V0ID0+ICgwLCBfY2FjaGluZy5tYWtlU3Ryb25nQ2FjaGUpKGluZGV4ID0+ICgwLCBfY2FjaGluZy5tYWtlU3Ryb25nQ2FjaGUpKGVudk5hbWUgPT4gYnVpbGRPdmVycmlkZUVudkRlc2NyaXB0b3JzKHByZXNldCwgcHJlc2V0LmFsaWFzLCBfY29uZmlnRGVzY3JpcHRvcnMuY3JlYXRlVW5jYWNoZWREZXNjcmlwdG9ycywgaW5kZXgsIGVudk5hbWUpKSkpO1xuXG5mdW5jdGlvbiBidWlsZFJvb3RDaGFpbihvcHRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IHByb2dyYW1tYXRpY0NoYWluID0gbG9hZFByb2dyYW1tYXRpY0NoYWluKHtcbiAgICBvcHRpb25zOiBvcHRzLFxuICAgIGRpcm5hbWU6IGNvbnRleHQuY3dkXG4gIH0sIGNvbnRleHQpO1xuICBpZiAoIXByb2dyYW1tYXRpY0NoYWluKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgX29wdHMkcm9vdCA9IG9wdHMucm9vdCxcbiAgICAgICAgcm9vdERpciA9IF9vcHRzJHJvb3QgPT09IHZvaWQgMCA/IFwiLlwiIDogX29wdHMkcm9vdCxcbiAgICAgICAgX29wdHMkY29uZmlnRmlsZSA9IG9wdHMuY29uZmlnRmlsZSxcbiAgICAgICAgY29uZmlnRmlsZU5hbWUgPSBfb3B0cyRjb25maWdGaWxlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdHMkY29uZmlnRmlsZTtcbiAgbGV0IGJhYmVscmMgPSBvcHRzLmJhYmVscmMsXG4gICAgICBiYWJlbHJjUm9vdHMgPSBvcHRzLmJhYmVscmNSb290cztcblxuICBjb25zdCBhYnNvbHV0ZVJvb3QgPSBfcGF0aCgpLmRlZmF1bHQucmVzb2x2ZShjb250ZXh0LmN3ZCwgcm9vdERpcik7XG5cbiAgbGV0IGNvbmZpZ0ZpbGU7XG5cbiAgaWYgKHR5cGVvZiBjb25maWdGaWxlTmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNvbmZpZ0ZpbGUgPSAoMCwgX2ZpbGVzLmxvYWRDb25maWcpKGNvbmZpZ0ZpbGVOYW1lLCBjb250ZXh0LmN3ZCwgY29udGV4dC5lbnZOYW1lKTtcbiAgfSBlbHNlIGlmIChjb25maWdGaWxlTmFtZSA9PT0gdHJ1ZSkge1xuICAgIGNvbmZpZ0ZpbGUgPSAoMCwgX2ZpbGVzLmZpbmRSb290Q29uZmlnKShhYnNvbHV0ZVJvb3QsIGNvbnRleHQuZW52TmFtZSk7XG4gIH1cblxuICBjb25zdCBjb25maWdGaWxlQ2hhaW4gPSBlbXB0eUNoYWluKCk7XG5cbiAgaWYgKGNvbmZpZ0ZpbGUpIHtcbiAgICBjb25zdCB2YWxpZGF0ZWRGaWxlID0gdmFsaWRhdGVDb25maWdGaWxlKGNvbmZpZ0ZpbGUpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGxvYWRGaWxlQ2hhaW4odmFsaWRhdGVkRmlsZSwgY29udGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGJhYmVscmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYmFiZWxyYyA9IHZhbGlkYXRlZEZpbGUub3B0aW9ucy5iYWJlbHJjO1xuICAgIH1cblxuICAgIGlmIChiYWJlbHJjUm9vdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYmFiZWxyY1Jvb3RzID0gdmFsaWRhdGVkRmlsZS5vcHRpb25zLmJhYmVscmNSb290cztcbiAgICB9XG5cbiAgICBtZXJnZUNoYWluKGNvbmZpZ0ZpbGVDaGFpbiwgcmVzdWx0KTtcbiAgfVxuXG4gIGNvbnN0IHBrZ0RhdGEgPSB0eXBlb2YgY29udGV4dC5maWxlbmFtZSA9PT0gXCJzdHJpbmdcIiA/ICgwLCBfZmlsZXMuZmluZFBhY2thZ2VEYXRhKShjb250ZXh0LmZpbGVuYW1lKSA6IG51bGw7XG4gIGxldCBpZ25vcmVGaWxlLCBiYWJlbHJjRmlsZTtcbiAgY29uc3QgZmlsZUNoYWluID0gZW1wdHlDaGFpbigpO1xuXG4gIGlmICgoYmFiZWxyYyA9PT0gdHJ1ZSB8fCBiYWJlbHJjID09PSB1bmRlZmluZWQpICYmIHBrZ0RhdGEgJiYgYmFiZWxyY0xvYWRFbmFibGVkKGNvbnRleHQsIHBrZ0RhdGEsIGJhYmVscmNSb290cywgYWJzb2x1dGVSb290KSkge1xuICAgIHZhciBfZmluZFJlbGF0aXZlQ29uZmlnID0gKDAsIF9maWxlcy5maW5kUmVsYXRpdmVDb25maWcpKHBrZ0RhdGEsIGNvbnRleHQuZW52TmFtZSk7XG5cbiAgICBpZ25vcmVGaWxlID0gX2ZpbmRSZWxhdGl2ZUNvbmZpZy5pZ25vcmU7XG4gICAgYmFiZWxyY0ZpbGUgPSBfZmluZFJlbGF0aXZlQ29uZmlnLmNvbmZpZztcblxuICAgIGlmIChpZ25vcmVGaWxlICYmIHNob3VsZElnbm9yZShjb250ZXh0LCBpZ25vcmVGaWxlLmlnbm9yZSwgbnVsbCwgaWdub3JlRmlsZS5kaXJuYW1lKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGJhYmVscmNGaWxlKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBsb2FkRmlsZUNoYWluKHZhbGlkYXRlQmFiZWxyY0ZpbGUoYmFiZWxyY0ZpbGUpLCBjb250ZXh0KTtcbiAgICAgIGlmICghcmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICAgIG1lcmdlQ2hhaW4oZmlsZUNoYWluLCByZXN1bHQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNoYWluID0gbWVyZ2VDaGFpbihtZXJnZUNoYWluKG1lcmdlQ2hhaW4oZW1wdHlDaGFpbigpLCBjb25maWdGaWxlQ2hhaW4pLCBmaWxlQ2hhaW4pLCBwcm9ncmFtbWF0aWNDaGFpbik7XG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogZGVkdXBEZXNjcmlwdG9ycyhjaGFpbi5wbHVnaW5zKSxcbiAgICBwcmVzZXRzOiBkZWR1cERlc2NyaXB0b3JzKGNoYWluLnByZXNldHMpLFxuICAgIG9wdGlvbnM6IGNoYWluLm9wdGlvbnMubWFwKG8gPT4gbm9ybWFsaXplT3B0aW9ucyhvKSksXG4gICAgaWdub3JlOiBpZ25vcmVGaWxlIHx8IHVuZGVmaW5lZCxcbiAgICBiYWJlbHJjOiBiYWJlbHJjRmlsZSB8fCB1bmRlZmluZWQsXG4gICAgY29uZmlnOiBjb25maWdGaWxlIHx8IHVuZGVmaW5lZFxuICB9O1xufVxuXG5mdW5jdGlvbiBiYWJlbHJjTG9hZEVuYWJsZWQoY29udGV4dCwgcGtnRGF0YSwgYmFiZWxyY1Jvb3RzLCBhYnNvbHV0ZVJvb3QpIHtcbiAgaWYgKHR5cGVvZiBiYWJlbHJjUm9vdHMgPT09IFwiYm9vbGVhblwiKSByZXR1cm4gYmFiZWxyY1Jvb3RzO1xuXG4gIGlmIChiYWJlbHJjUm9vdHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwa2dEYXRhLmRpcmVjdG9yaWVzLmluZGV4T2YoYWJzb2x1dGVSb290KSAhPT0gLTE7XG4gIH1cblxuICBsZXQgYmFiZWxyY1BhdHRlcm5zID0gYmFiZWxyY1Jvb3RzO1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYmFiZWxyY1BhdHRlcm5zKSkgYmFiZWxyY1BhdHRlcm5zID0gW2JhYmVscmNQYXR0ZXJuc107XG4gIGJhYmVscmNQYXR0ZXJucyA9IGJhYmVscmNQYXR0ZXJucy5tYXAocGF0ID0+IF9wYXRoKCkuZGVmYXVsdC5yZXNvbHZlKGNvbnRleHQuY3dkLCBwYXQpKTtcblxuICBpZiAoYmFiZWxyY1BhdHRlcm5zLmxlbmd0aCA9PT0gMSAmJiBiYWJlbHJjUGF0dGVybnNbMF0gPT09IGFic29sdXRlUm9vdCkge1xuICAgIHJldHVybiBwa2dEYXRhLmRpcmVjdG9yaWVzLmluZGV4T2YoYWJzb2x1dGVSb290KSAhPT0gLTE7XG4gIH1cblxuICByZXR1cm4gKDAsIF9taWNyb21hdGNoKCkuZGVmYXVsdCkocGtnRGF0YS5kaXJlY3RvcmllcywgYmFiZWxyY1BhdHRlcm5zKS5sZW5ndGggPiAwO1xufVxuXG5jb25zdCB2YWxpZGF0ZUNvbmZpZ0ZpbGUgPSAoMCwgX2NhY2hpbmcubWFrZVdlYWtDYWNoZSkoZmlsZSA9PiAoe1xuICBmaWxlcGF0aDogZmlsZS5maWxlcGF0aCxcbiAgZGlybmFtZTogZmlsZS5kaXJuYW1lLFxuICBvcHRpb25zOiAoMCwgX29wdGlvbnMudmFsaWRhdGUpKFwiY29uZmlnZmlsZVwiLCBmaWxlLm9wdGlvbnMpXG59KSk7XG5jb25zdCB2YWxpZGF0ZUJhYmVscmNGaWxlID0gKDAsIF9jYWNoaW5nLm1ha2VXZWFrQ2FjaGUpKGZpbGUgPT4gKHtcbiAgZmlsZXBhdGg6IGZpbGUuZmlsZXBhdGgsXG4gIGRpcm5hbWU6IGZpbGUuZGlybmFtZSxcbiAgb3B0aW9uczogKDAsIF9vcHRpb25zLnZhbGlkYXRlKShcImJhYmVscmNmaWxlXCIsIGZpbGUub3B0aW9ucylcbn0pKTtcbmNvbnN0IHZhbGlkYXRlRXh0ZW5kRmlsZSA9ICgwLCBfY2FjaGluZy5tYWtlV2Vha0NhY2hlKShmaWxlID0+ICh7XG4gIGZpbGVwYXRoOiBmaWxlLmZpbGVwYXRoLFxuICBkaXJuYW1lOiBmaWxlLmRpcm5hbWUsXG4gIG9wdGlvbnM6ICgwLCBfb3B0aW9ucy52YWxpZGF0ZSkoXCJleHRlbmRzZmlsZVwiLCBmaWxlLm9wdGlvbnMpXG59KSk7XG5jb25zdCBsb2FkUHJvZ3JhbW1hdGljQ2hhaW4gPSBtYWtlQ2hhaW5XYWxrZXIoe1xuICByb290OiBpbnB1dCA9PiBidWlsZFJvb3REZXNjcmlwdG9ycyhpbnB1dCwgXCJiYXNlXCIsIF9jb25maWdEZXNjcmlwdG9ycy5jcmVhdGVDYWNoZWREZXNjcmlwdG9ycyksXG4gIGVudjogKGlucHV0LCBlbnZOYW1lKSA9PiBidWlsZEVudkRlc2NyaXB0b3JzKGlucHV0LCBcImJhc2VcIiwgX2NvbmZpZ0Rlc2NyaXB0b3JzLmNyZWF0ZUNhY2hlZERlc2NyaXB0b3JzLCBlbnZOYW1lKSxcbiAgb3ZlcnJpZGVzOiAoaW5wdXQsIGluZGV4KSA9PiBidWlsZE92ZXJyaWRlRGVzY3JpcHRvcnMoaW5wdXQsIFwiYmFzZVwiLCBfY29uZmlnRGVzY3JpcHRvcnMuY3JlYXRlQ2FjaGVkRGVzY3JpcHRvcnMsIGluZGV4KSxcbiAgb3ZlcnJpZGVzRW52OiAoaW5wdXQsIGluZGV4LCBlbnZOYW1lKSA9PiBidWlsZE92ZXJyaWRlRW52RGVzY3JpcHRvcnMoaW5wdXQsIFwiYmFzZVwiLCBfY29uZmlnRGVzY3JpcHRvcnMuY3JlYXRlQ2FjaGVkRGVzY3JpcHRvcnMsIGluZGV4LCBlbnZOYW1lKVxufSk7XG5jb25zdCBsb2FkRmlsZUNoYWluID0gbWFrZUNoYWluV2Fsa2VyKHtcbiAgcm9vdDogZmlsZSA9PiBsb2FkRmlsZURlc2NyaXB0b3JzKGZpbGUpLFxuICBlbnY6IChmaWxlLCBlbnZOYW1lKSA9PiBsb2FkRmlsZUVudkRlc2NyaXB0b3JzKGZpbGUpKGVudk5hbWUpLFxuICBvdmVycmlkZXM6IChmaWxlLCBpbmRleCkgPT4gbG9hZEZpbGVPdmVycmlkZXNEZXNjcmlwdG9ycyhmaWxlKShpbmRleCksXG4gIG92ZXJyaWRlc0VudjogKGZpbGUsIGluZGV4LCBlbnZOYW1lKSA9PiBsb2FkRmlsZU92ZXJyaWRlc0VudkRlc2NyaXB0b3JzKGZpbGUpKGluZGV4KShlbnZOYW1lKVxufSk7XG5jb25zdCBsb2FkRmlsZURlc2NyaXB0b3JzID0gKDAsIF9jYWNoaW5nLm1ha2VXZWFrQ2FjaGUpKGZpbGUgPT4gYnVpbGRSb290RGVzY3JpcHRvcnMoZmlsZSwgZmlsZS5maWxlcGF0aCwgX2NvbmZpZ0Rlc2NyaXB0b3JzLmNyZWF0ZVVuY2FjaGVkRGVzY3JpcHRvcnMpKTtcbmNvbnN0IGxvYWRGaWxlRW52RGVzY3JpcHRvcnMgPSAoMCwgX2NhY2hpbmcubWFrZVdlYWtDYWNoZSkoZmlsZSA9PiAoMCwgX2NhY2hpbmcubWFrZVN0cm9uZ0NhY2hlKShlbnZOYW1lID0+IGJ1aWxkRW52RGVzY3JpcHRvcnMoZmlsZSwgZmlsZS5maWxlcGF0aCwgX2NvbmZpZ0Rlc2NyaXB0b3JzLmNyZWF0ZVVuY2FjaGVkRGVzY3JpcHRvcnMsIGVudk5hbWUpKSk7XG5jb25zdCBsb2FkRmlsZU92ZXJyaWRlc0Rlc2NyaXB0b3JzID0gKDAsIF9jYWNoaW5nLm1ha2VXZWFrQ2FjaGUpKGZpbGUgPT4gKDAsIF9jYWNoaW5nLm1ha2VTdHJvbmdDYWNoZSkoaW5kZXggPT4gYnVpbGRPdmVycmlkZURlc2NyaXB0b3JzKGZpbGUsIGZpbGUuZmlsZXBhdGgsIF9jb25maWdEZXNjcmlwdG9ycy5jcmVhdGVVbmNhY2hlZERlc2NyaXB0b3JzLCBpbmRleCkpKTtcbmNvbnN0IGxvYWRGaWxlT3ZlcnJpZGVzRW52RGVzY3JpcHRvcnMgPSAoMCwgX2NhY2hpbmcubWFrZVdlYWtDYWNoZSkoZmlsZSA9PiAoMCwgX2NhY2hpbmcubWFrZVN0cm9uZ0NhY2hlKShpbmRleCA9PiAoMCwgX2NhY2hpbmcubWFrZVN0cm9uZ0NhY2hlKShlbnZOYW1lID0+IGJ1aWxkT3ZlcnJpZGVFbnZEZXNjcmlwdG9ycyhmaWxlLCBmaWxlLmZpbGVwYXRoLCBfY29uZmlnRGVzY3JpcHRvcnMuY3JlYXRlVW5jYWNoZWREZXNjcmlwdG9ycywgaW5kZXgsIGVudk5hbWUpKSkpO1xuXG5mdW5jdGlvbiBidWlsZFJvb3REZXNjcmlwdG9ycyh7XG4gIGRpcm5hbWUsXG4gIG9wdGlvbnNcbn0sIGFsaWFzLCBkZXNjcmlwdG9ycykge1xuICByZXR1cm4gZGVzY3JpcHRvcnMoZGlybmFtZSwgb3B0aW9ucywgYWxpYXMpO1xufVxuXG5mdW5jdGlvbiBidWlsZEVudkRlc2NyaXB0b3JzKHtcbiAgZGlybmFtZSxcbiAgb3B0aW9uc1xufSwgYWxpYXMsIGRlc2NyaXB0b3JzLCBlbnZOYW1lKSB7XG4gIGNvbnN0IG9wdHMgPSBvcHRpb25zLmVudiAmJiBvcHRpb25zLmVudltlbnZOYW1lXTtcbiAgcmV0dXJuIG9wdHMgPyBkZXNjcmlwdG9ycyhkaXJuYW1lLCBvcHRzLCBgJHthbGlhc30uZW52W1wiJHtlbnZOYW1lfVwiXWApIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gYnVpbGRPdmVycmlkZURlc2NyaXB0b3JzKHtcbiAgZGlybmFtZSxcbiAgb3B0aW9uc1xufSwgYWxpYXMsIGRlc2NyaXB0b3JzLCBpbmRleCkge1xuICBjb25zdCBvcHRzID0gb3B0aW9ucy5vdmVycmlkZXMgJiYgb3B0aW9ucy5vdmVycmlkZXNbaW5kZXhdO1xuICBpZiAoIW9wdHMpIHRocm93IG5ldyBFcnJvcihcIkFzc2VydGlvbiBmYWlsdXJlIC0gbWlzc2luZyBvdmVycmlkZVwiKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3JzKGRpcm5hbWUsIG9wdHMsIGAke2FsaWFzfS5vdmVycmlkZXNbJHtpbmRleH1dYCk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkT3ZlcnJpZGVFbnZEZXNjcmlwdG9ycyh7XG4gIGRpcm5hbWUsXG4gIG9wdGlvbnNcbn0sIGFsaWFzLCBkZXNjcmlwdG9ycywgaW5kZXgsIGVudk5hbWUpIHtcbiAgY29uc3Qgb3ZlcnJpZGUgPSBvcHRpb25zLm92ZXJyaWRlcyAmJiBvcHRpb25zLm92ZXJyaWRlc1tpbmRleF07XG4gIGlmICghb3ZlcnJpZGUpIHRocm93IG5ldyBFcnJvcihcIkFzc2VydGlvbiBmYWlsdXJlIC0gbWlzc2luZyBvdmVycmlkZVwiKTtcbiAgY29uc3Qgb3B0cyA9IG92ZXJyaWRlLmVudiAmJiBvdmVycmlkZS5lbnZbZW52TmFtZV07XG4gIHJldHVybiBvcHRzID8gZGVzY3JpcHRvcnMoZGlybmFtZSwgb3B0cywgYCR7YWxpYXN9Lm92ZXJyaWRlc1ske2luZGV4fV0uZW52W1wiJHtlbnZOYW1lfVwiXWApIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gbWFrZUNoYWluV2Fsa2VyKHtcbiAgcm9vdCxcbiAgZW52LFxuICBvdmVycmlkZXMsXG4gIG92ZXJyaWRlc0VudlxufSkge1xuICByZXR1cm4gKGlucHV0LCBjb250ZXh0LCBmaWxlcyA9IG5ldyBTZXQoKSkgPT4ge1xuICAgIGNvbnN0IGRpcm5hbWUgPSBpbnB1dC5kaXJuYW1lO1xuICAgIGNvbnN0IGZsYXR0ZW5lZENvbmZpZ3MgPSBbXTtcbiAgICBjb25zdCByb290T3B0cyA9IHJvb3QoaW5wdXQpO1xuXG4gICAgaWYgKGNvbmZpZ0lzQXBwbGljYWJsZShyb290T3B0cywgZGlybmFtZSwgY29udGV4dCkpIHtcbiAgICAgIGZsYXR0ZW5lZENvbmZpZ3MucHVzaChyb290T3B0cyk7XG4gICAgICBjb25zdCBlbnZPcHRzID0gZW52KGlucHV0LCBjb250ZXh0LmVudk5hbWUpO1xuXG4gICAgICBpZiAoZW52T3B0cyAmJiBjb25maWdJc0FwcGxpY2FibGUoZW52T3B0cywgZGlybmFtZSwgY29udGV4dCkpIHtcbiAgICAgICAgZmxhdHRlbmVkQ29uZmlncy5wdXNoKGVudk9wdHMpO1xuICAgICAgfVxuXG4gICAgICAocm9vdE9wdHMub3B0aW9ucy5vdmVycmlkZXMgfHwgW10pLmZvckVhY2goKF8sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IG92ZXJyaWRlT3BzID0gb3ZlcnJpZGVzKGlucHV0LCBpbmRleCk7XG5cbiAgICAgICAgaWYgKGNvbmZpZ0lzQXBwbGljYWJsZShvdmVycmlkZU9wcywgZGlybmFtZSwgY29udGV4dCkpIHtcbiAgICAgICAgICBmbGF0dGVuZWRDb25maWdzLnB1c2gob3ZlcnJpZGVPcHMpO1xuICAgICAgICAgIGNvbnN0IG92ZXJyaWRlRW52T3B0cyA9IG92ZXJyaWRlc0VudihpbnB1dCwgaW5kZXgsIGNvbnRleHQuZW52TmFtZSk7XG5cbiAgICAgICAgICBpZiAob3ZlcnJpZGVFbnZPcHRzICYmIGNvbmZpZ0lzQXBwbGljYWJsZShvdmVycmlkZUVudk9wdHMsIGRpcm5hbWUsIGNvbnRleHQpKSB7XG4gICAgICAgICAgICBmbGF0dGVuZWRDb25maWdzLnB1c2gob3ZlcnJpZGVFbnZPcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChmbGF0dGVuZWRDb25maWdzLnNvbWUoKHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgaWdub3JlLFxuICAgICAgICBvbmx5XG4gICAgICB9XG4gICAgfSkgPT4gc2hvdWxkSWdub3JlKGNvbnRleHQsIGlnbm9yZSwgb25seSwgZGlybmFtZSkpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBjaGFpbiA9IGVtcHR5Q2hhaW4oKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmbGF0dGVuZWRDb25maWdzLmxlbmd0aDsgX2krKykge1xuICAgICAgY29uc3Qgb3AgPSBmbGF0dGVuZWRDb25maWdzW19pXTtcblxuICAgICAgaWYgKCFtZXJnZUV4dGVuZHNDaGFpbihjaGFpbiwgb3Aub3B0aW9ucywgZGlybmFtZSwgY29udGV4dCwgZmlsZXMpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBtZXJnZUNoYWluT3B0cyhjaGFpbiwgb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBjaGFpbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VFeHRlbmRzQ2hhaW4oY2hhaW4sIG9wdHMsIGRpcm5hbWUsIGNvbnRleHQsIGZpbGVzKSB7XG4gIGlmIChvcHRzLmV4dGVuZHMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG4gIGNvbnN0IGZpbGUgPSAoMCwgX2ZpbGVzLmxvYWRDb25maWcpKG9wdHMuZXh0ZW5kcywgZGlybmFtZSwgY29udGV4dC5lbnZOYW1lKTtcblxuICBpZiAoZmlsZXMuaGFzKGZpbGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb25maWd1cmF0aW9uIGN5Y2xlIGRldGVjdGVkIGxvYWRpbmcgJHtmaWxlLmZpbGVwYXRofS5cXG5gICsgYEZpbGUgYWxyZWFkeSBsb2FkZWQgZm9sbG93aW5nIHRoZSBjb25maWcgY2hhaW46XFxuYCArIEFycmF5LmZyb20oZmlsZXMsIGZpbGUgPT4gYCAtICR7ZmlsZS5maWxlcGF0aH1gKS5qb2luKFwiXFxuXCIpKTtcbiAgfVxuXG4gIGZpbGVzLmFkZChmaWxlKTtcbiAgY29uc3QgZmlsZUNoYWluID0gbG9hZEZpbGVDaGFpbih2YWxpZGF0ZUV4dGVuZEZpbGUoZmlsZSksIGNvbnRleHQsIGZpbGVzKTtcbiAgZmlsZXMuZGVsZXRlKGZpbGUpO1xuICBpZiAoIWZpbGVDaGFpbikgcmV0dXJuIGZhbHNlO1xuICBtZXJnZUNoYWluKGNoYWluLCBmaWxlQ2hhaW4pO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VDaGFpbih0YXJnZXQsIHNvdXJjZSkge1xuICB0YXJnZXQub3B0aW9ucy5wdXNoKC4uLnNvdXJjZS5vcHRpb25zKTtcbiAgdGFyZ2V0LnBsdWdpbnMucHVzaCguLi5zb3VyY2UucGx1Z2lucyk7XG4gIHRhcmdldC5wcmVzZXRzLnB1c2goLi4uc291cmNlLnByZXNldHMpO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBtZXJnZUNoYWluT3B0cyh0YXJnZXQsIHtcbiAgb3B0aW9ucyxcbiAgcGx1Z2lucyxcbiAgcHJlc2V0c1xufSkge1xuICB0YXJnZXQub3B0aW9ucy5wdXNoKG9wdGlvbnMpO1xuICB0YXJnZXQucGx1Z2lucy5wdXNoKC4uLnBsdWdpbnMoKSk7XG4gIHRhcmdldC5wcmVzZXRzLnB1c2goLi4ucHJlc2V0cygpKTtcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gZW1wdHlDaGFpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvcHRpb25zOiBbXSxcbiAgICBwcmVzZXRzOiBbXSxcbiAgICBwbHVnaW5zOiBbXVxuICB9O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPcHRpb25zKG9wdHMpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMpO1xuICBkZWxldGUgb3B0aW9ucy5leHRlbmRzO1xuICBkZWxldGUgb3B0aW9ucy5lbnY7XG4gIGRlbGV0ZSBvcHRpb25zLnBsdWdpbnM7XG4gIGRlbGV0ZSBvcHRpb25zLnByZXNldHM7XG4gIGRlbGV0ZSBvcHRpb25zLnBhc3NQZXJQcmVzZXQ7XG4gIGRlbGV0ZSBvcHRpb25zLmlnbm9yZTtcbiAgZGVsZXRlIG9wdGlvbnMub25seTtcblxuICBpZiAob3B0aW9ucy5zb3VyY2VNYXApIHtcbiAgICBvcHRpb25zLnNvdXJjZU1hcHMgPSBvcHRpb25zLnNvdXJjZU1hcDtcbiAgICBkZWxldGUgb3B0aW9ucy5zb3VyY2VNYXA7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gZGVkdXBEZXNjcmlwdG9ycyhpdGVtcykge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gW107XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gaXRlbXMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaTIgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgIHZhciBfcmVmO1xuXG4gICAgaWYgKF9pc0FycmF5KSB7XG4gICAgICBpZiAoX2kyID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgX3JlZiA9IF9pdGVyYXRvcltfaTIrK107XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pMiA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAoX2kyLmRvbmUpIGJyZWFrO1xuICAgICAgX3JlZiA9IF9pMi52YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBpdGVtID0gX3JlZjtcblxuICAgIGlmICh0eXBlb2YgaXRlbS52YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCBmbktleSA9IGl0ZW0udmFsdWU7XG4gICAgICBsZXQgbmFtZU1hcCA9IG1hcC5nZXQoZm5LZXkpO1xuXG4gICAgICBpZiAoIW5hbWVNYXApIHtcbiAgICAgICAgbmFtZU1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgbWFwLnNldChmbktleSwgbmFtZU1hcCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBkZXNjID0gbmFtZU1hcC5nZXQoaXRlbS5uYW1lKTtcblxuICAgICAgaWYgKCFkZXNjKSB7XG4gICAgICAgIGRlc2MgPSB7XG4gICAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgZGVzY3JpcHRvcnMucHVzaChkZXNjKTtcbiAgICAgICAgaWYgKCFpdGVtLm93blBhc3MpIG5hbWVNYXAuc2V0KGl0ZW0ubmFtZSwgZGVzYyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtLm9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlc2MudmFsdWUgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVzYy52YWx1ZSA9IGl0ZW07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc2NyaXB0b3JzLnB1c2goe1xuICAgICAgICB2YWx1ZTogaXRlbVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlc2NyaXB0b3JzLnJlZHVjZSgoYWNjLCBkZXNjKSA9PiB7XG4gICAgaWYgKGRlc2MudmFsdWUpIGFjYy5wdXNoKGRlc2MudmFsdWUpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gY29uZmlnSXNBcHBsaWNhYmxlKHtcbiAgb3B0aW9uc1xufSwgZGlybmFtZSwgY29udGV4dCkge1xuICByZXR1cm4gKG9wdGlvbnMudGVzdCA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZ0ZpZWxkSXNBcHBsaWNhYmxlKGNvbnRleHQsIG9wdGlvbnMudGVzdCwgZGlybmFtZSkpICYmIChvcHRpb25zLmluY2x1ZGUgPT09IHVuZGVmaW5lZCB8fCBjb25maWdGaWVsZElzQXBwbGljYWJsZShjb250ZXh0LCBvcHRpb25zLmluY2x1ZGUsIGRpcm5hbWUpKSAmJiAob3B0aW9ucy5leGNsdWRlID09PSB1bmRlZmluZWQgfHwgIWNvbmZpZ0ZpZWxkSXNBcHBsaWNhYmxlKGNvbnRleHQsIG9wdGlvbnMuZXhjbHVkZSwgZGlybmFtZSkpO1xufVxuXG5mdW5jdGlvbiBjb25maWdGaWVsZElzQXBwbGljYWJsZShjb250ZXh0LCB0ZXN0LCBkaXJuYW1lKSB7XG4gIGlmIChjb250ZXh0LmZpbGVuYW1lID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb25maWd1cmF0aW9uIGNvbnRhaW5zIGV4cGxpY2l0IHRlc3QvaW5jbHVkZS9leGNsdWRlIGNoZWNrcywgYnV0IG5vIGZpbGVuYW1lIHdhcyBwYXNzZWQgdG8gQmFiZWxgKTtcbiAgfVxuXG4gIGNvbnN0IGN0eCA9IGNvbnRleHQ7XG4gIGNvbnN0IHBhdHRlcm5zID0gQXJyYXkuaXNBcnJheSh0ZXN0KSA/IHRlc3QgOiBbdGVzdF07XG4gIHJldHVybiBtYXRjaGVzUGF0dGVybnMoY3R4LCBwYXR0ZXJucywgZGlybmFtZSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRJZ25vcmUoY29udGV4dCwgaWdub3JlLCBvbmx5LCBkaXJuYW1lKSB7XG4gIGlmIChpZ25vcmUpIHtcbiAgICBpZiAoY29udGV4dC5maWxlbmFtZSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb25maWd1cmF0aW9uIGNvbnRhaW5zIGlnbm9yZSBjaGVja3MsIGJ1dCBubyBmaWxlbmFtZSB3YXMgcGFzc2VkIHRvIEJhYmVsYCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3R4ID0gY29udGV4dDtcblxuICAgIGlmIChtYXRjaGVzUGF0dGVybnMoY3R4LCBpZ25vcmUsIGRpcm5hbWUpKSB7XG4gICAgICBkZWJ1ZyhcIklnbm9yZWQgJW8gYmVjYXVzZSBpdCBtYXRjaGVkIG9uZSBvZiAlTyBmcm9tICVvXCIsIGNvbnRleHQuZmlsZW5hbWUsIGlnbm9yZSwgZGlybmFtZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAob25seSkge1xuICAgIGlmIChjb250ZXh0LmZpbGVuYW1lID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbmZpZ3VyYXRpb24gY29udGFpbnMgaWdub3JlIGNoZWNrcywgYnV0IG5vIGZpbGVuYW1lIHdhcyBwYXNzZWQgdG8gQmFiZWxgKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdHggPSBjb250ZXh0O1xuXG4gICAgaWYgKCFtYXRjaGVzUGF0dGVybnMoY3R4LCBvbmx5LCBkaXJuYW1lKSkge1xuICAgICAgZGVidWcoXCJJZ25vcmVkICVvIGJlY2F1c2UgaXQgZmFpbGVkIHRvIG1hdGNoIG9uZSBvZiAlTyBmcm9tICVvXCIsIGNvbnRleHQuZmlsZW5hbWUsIG9ubHksIGRpcm5hbWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVzUGF0dGVybnMoY29udGV4dCwgcGF0dGVybnMsIGRpcm5hbWUsIGFsbG93TmVnYXRpb24gPSB0cnVlKSB7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBjb25zdCBzdHJpbmdzID0gW107XG4gIGNvbnN0IGZucyA9IFtdO1xuICBwYXR0ZXJucy5mb3JFYWNoKHBhdHRlcm4gPT4ge1xuICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikgc3RyaW5ncy5wdXNoKHBhdHRlcm4pO2Vsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcImZ1bmN0aW9uXCIpIGZucy5wdXNoKHBhdHRlcm4pO2Vsc2UgcmVzLnB1c2gocGF0dGVybik7XG4gIH0pO1xuICBjb25zdCBmaWxlbmFtZSA9IGNvbnRleHQuZmlsZW5hbWU7XG4gIGlmIChyZXMuc29tZShyZSA9PiByZS50ZXN0KGNvbnRleHQuZmlsZW5hbWUpKSkgcmV0dXJuIHRydWU7XG4gIGlmIChmbnMuc29tZShmbiA9PiBmbihmaWxlbmFtZSkpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoc3RyaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgcG9zc2libGVEaXJzID0gZ2V0UG9zc2libGVEaXJzKGNvbnRleHQpO1xuICAgIGNvbnN0IGFic29sdXRlUGF0dGVybnMgPSBzdHJpbmdzLm1hcChwYXR0ZXJuID0+IHtcbiAgICAgIGNvbnN0IG5lZ2F0ZSA9IHBhdHRlcm5bMF0gPT09IFwiIVwiO1xuXG4gICAgICBpZiAobmVnYXRlICYmICFhbGxvd05lZ2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTmVnYXRpb24gb2YgZmlsZSBwYXRocyBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVnYXRlKSBwYXR0ZXJuID0gcGF0dGVybi5zbGljZSgxKTtcbiAgICAgIHJldHVybiAobmVnYXRlID8gXCIhXCIgOiBcIlwiKSArIF9wYXRoKCkuZGVmYXVsdC5yZXNvbHZlKGRpcm5hbWUsIHBhdHRlcm4pO1xuICAgIH0pO1xuXG4gICAgaWYgKCgwLCBfbWljcm9tYXRjaCgpLmRlZmF1bHQpKHBvc3NpYmxlRGlycywgYWJzb2x1dGVQYXR0ZXJucywge1xuICAgICAgbm9jYXNlOiB0cnVlLFxuICAgICAgbm9uZWdhdGU6ICFhbGxvd05lZ2F0aW9uXG4gICAgfSkubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5jb25zdCBnZXRQb3NzaWJsZURpcnMgPSAoMCwgX2NhY2hpbmcubWFrZVdlYWtDYWNoZSkoY29udGV4dCA9PiB7XG4gIGxldCBjdXJyZW50ID0gY29udGV4dC5maWxlbmFtZTtcbiAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHJldHVybiBbXTtcbiAgY29uc3QgcG9zc2libGVEaXJzID0gW2N1cnJlbnRdO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgcHJldmlvdXMgPSBjdXJyZW50O1xuICAgIGN1cnJlbnQgPSBfcGF0aCgpLmRlZmF1bHQuZGlybmFtZShjdXJyZW50KTtcbiAgICBpZiAocHJldmlvdXMgPT09IGN1cnJlbnQpIGJyZWFrO1xuICAgIHBvc3NpYmxlRGlycy5wdXNoKGN1cnJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIHBvc3NpYmxlRGlycztcbn0pOyJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/options.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/options.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/options.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/options.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation",
        "sourceFileName": "options.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.validate = validate;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nvar _removed = _interopRequireDefault(require(\"./removed\"));\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nconst ROOT_VALIDATORS = {\n  cwd: _optionAssertions.assertString,\n  root: _optionAssertions.assertString,\n  configFile: _optionAssertions.assertConfigFileSearch,\n  filename: _optionAssertions.assertString,\n  filenameRelative: _optionAssertions.assertString,\n  code: _optionAssertions.assertBoolean,\n  ast: _optionAssertions.assertBoolean,\n  envName: _optionAssertions.assertString };\n\nconst BABELRC_VALIDATORS = {\n  babelrc: _optionAssertions.assertBoolean,\n  babelrcRoots: _optionAssertions.assertBabelrcSearch };\n\nconst NONPRESET_VALIDATORS = {\n  extends: _optionAssertions.assertString,\n  env: assertEnvSet,\n  ignore: _optionAssertions.assertIgnoreList,\n  only: _optionAssertions.assertIgnoreList,\n  overrides: assertOverridesList,\n  test: _optionAssertions.assertConfigApplicableTest,\n  include: _optionAssertions.assertConfigApplicableTest,\n  exclude: _optionAssertions.assertConfigApplicableTest };\n\nconst COMMON_VALIDATORS = {\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\n  presets: _optionAssertions.assertPluginList,\n  plugins: _optionAssertions.assertPluginList,\n  passPerPreset: _optionAssertions.assertBoolean,\n  retainLines: _optionAssertions.assertBoolean,\n  comments: _optionAssertions.assertBoolean,\n  shouldPrintComment: _optionAssertions.assertFunction,\n  compact: _optionAssertions.assertCompact,\n  minified: _optionAssertions.assertBoolean,\n  auxiliaryCommentBefore: _optionAssertions.assertString,\n  auxiliaryCommentAfter: _optionAssertions.assertString,\n  sourceType: _optionAssertions.assertSourceType,\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n  highlightCode: _optionAssertions.assertBoolean,\n  sourceMaps: _optionAssertions.assertSourceMaps,\n  sourceMap: _optionAssertions.assertSourceMaps,\n  sourceFileName: _optionAssertions.assertString,\n  sourceRoot: _optionAssertions.assertString,\n  getModuleId: _optionAssertions.assertFunction,\n  moduleRoot: _optionAssertions.assertString,\n  moduleIds: _optionAssertions.assertBoolean,\n  moduleId: _optionAssertions.assertString,\n  parserOpts: _optionAssertions.assertObject,\n  generatorOpts: _optionAssertions.assertObject };\n\n\nfunction validate(type, opts) {\n  assertNoDuplicateSourcemap(opts);\n  Object.keys(opts).forEach(key => {\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(`.${key} is not allowed in preset options`);\n    }\n\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(`.${key} is only allowed in root programmatic options`);\n    }\n\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(`.${key} is not allowed in .babelrc or \"extend\"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);\n      }\n\n      throw new Error(`.${key} is only allowed in root programmatic options, or babel.config.js/config file options`);\n    }\n\n    if (type === \"env\" && key === \"env\") {\n      throw new Error(`.${key} is not allowed inside another env block`);\n    }\n\n    if (type === \"env\" && key === \"overrides\") {\n      throw new Error(`.${key} is not allowed inside an env block`);\n    }\n\n    if (type === \"override\" && key === \"overrides\") {\n      throw new Error(`.${key} is not allowed inside an overrides block`);\n    }\n\n    const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key];\n    if (validator) validator(key, opts[key]);else throw buildUnknownError(key);\n  });\n  return opts;\n}\n\nfunction buildUnknownError(key) {\n  if (_removed.default[key]) {\n    const _removed$key = _removed.default[key],\n    message = _removed$key.message,\n    _removed$key$version = _removed$key.version,\n    version = _removed$key$version === void 0 ? 5 : _removed$key$version;\n    throw new ReferenceError(`Using removed Babel ${version} option: .${key} - ${message}`);\n  } else {\n    const unknownOptErr = `Unknown option: .${key}. Check out http://babeljs.io/docs/usage/options/ for more information about options.`;\n    throw new ReferenceError(unknownOptErr);\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts) {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(key, value) {\n  const obj = (0, _optionAssertions.assertObject)(key, value);\n\n  if (obj) {\n    var _arr = Object.keys(obj);\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      const key = _arr[_i];\n      const env = (0, _optionAssertions.assertObject)(key, obj[key]);\n      if (env) validate(\"env\", env);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertOverridesList(key, value) {\n  const arr = (0, _optionAssertions.assertArray)(key, value);\n\n  if (arr) {\n    for (var _iterator = arr.entries(), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i2 >= _iterator.length) break;\n        _ref = _iterator[_i2++];\n      } else {\n        _i2 = _iterator.next();\n        if (_i2.done) break;\n        _ref = _i2.value;\n      }\n\n      const _ref2 = _ref,\n      index = _ref2[0],\n      item = _ref2[1];\n      const env = (0, _optionAssertions.assertObject)(`${index}`, item);\n      if (!env) throw new Error(`.${key}[${index}] must be an object`);\n      validate(\"override\", env);\n    }\n  }\n\n  return arr;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/removed.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/removed.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/removed.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/removed.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation",
        "sourceFileName": "removed.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = void 0;\nvar _default = {\n  auxiliaryComment: {\n    message: \"Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`\" },\n\n  blacklist: {\n    message: \"Put the specific transforms you want in the `plugins` option\" },\n\n  breakConfig: {\n    message: \"This is not a necessary option in Babel 6\" },\n\n  experimental: {\n    message: \"Put the specific transforms you want in the `plugins` option\" },\n\n  externalHelpers: {\n    message: \"Use the `external-helpers` plugin instead. \" + \"Check out http://babeljs.io/docs/plugins/external-helpers/\" },\n\n  extra: {\n    message: \"\" },\n\n  jsxPragma: {\n    message: \"use the `pragma` option in the `react-jsx` plugin. \" + \"Check out http://babeljs.io/docs/plugins/transform-react-jsx/\" },\n\n  loose: {\n    message: \"Specify the `loose` option for the relevant plugin you are using \" + \"or use a preset that sets the option.\" },\n\n  metadataUsedHelpers: {\n    message: \"Not required anymore as this is enabled by default\" },\n\n  modules: {\n    message: \"Use the corresponding module transform plugin in the `plugins` option. \" + \"Check out http://babeljs.io/docs/plugins/#modules\" },\n\n  nonStandard: {\n    message: \"Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. \" + \"Also check out the react preset http://babeljs.io/docs/plugins/preset-react/\" },\n\n  optional: {\n    message: \"Put the specific transforms you want in the `plugins` option\" },\n\n  sourceMapName: {\n    message: \"The `sourceMapName` option has been removed because it makes more sense for the \" + \"tooling that calls Babel to assign `map.file` themselves.\" },\n\n  stage: {\n    message: \"Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets\" },\n\n  whitelist: {\n    message: \"Put the specific transforms you want in the `plugins` option\" },\n\n  resolveModuleSource: {\n    version: 6,\n    message: \"Use `babel-plugin-module-resolver@3`'s 'resolvePath' options\" },\n\n  metadata: {\n    version: 6,\n    message: \"Generated plugin metadata is always included in the output result\" },\n\n  sourceMapTarget: {\n    version: 6,\n    message: \"The `sourceMapTarget` option has been removed because it makes more sense for the tooling \" + \"that calls Babel to assign `map.file` themselves.\" } };\n\n\nexports.default = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbW92ZWQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2RlZmF1bHQiLCJhdXhpbGlhcnlDb21tZW50IiwibWVzc2FnZSIsImJsYWNrbGlzdCIsImJyZWFrQ29uZmlnIiwiZXhwZXJpbWVudGFsIiwiZXh0ZXJuYWxIZWxwZXJzIiwiZXh0cmEiLCJqc3hQcmFnbWEiLCJsb29zZSIsIm1ldGFkYXRhVXNlZEhlbHBlcnMiLCJtb2R1bGVzIiwibm9uU3RhbmRhcmQiLCJvcHRpb25hbCIsInNvdXJjZU1hcE5hbWUiLCJzdGFnZSIsIndoaXRlbGlzdCIsInJlc29sdmVNb2R1bGVTb3VyY2UiLCJ2ZXJzaW9uIiwibWV0YWRhdGEiLCJzb3VyY2VNYXBUYXJnZXQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsT0FBUixHQUFrQixLQUFLLENBQXZCO0FBQ0EsSUFBSUMsV0FBVztBQUNiQyxvQkFBa0I7QUFDaEJDLGFBQVMseURBRE8sRUFETDs7QUFJYkMsYUFBVztBQUNURCxhQUFTLDhEQURBLEVBSkU7O0FBT2JFLGVBQWE7QUFDWEYsYUFBUywyQ0FERSxFQVBBOztBQVViRyxnQkFBYztBQUNaSCxhQUFTLDhEQURHLEVBVkQ7O0FBYWJJLG1CQUFpQjtBQUNmSixhQUFTLGdEQUFnRCw0REFEMUMsRUFiSjs7QUFnQmJLLFNBQU87QUFDTEwsYUFBUyxFQURKLEVBaEJNOztBQW1CYk0sYUFBVztBQUNUTixhQUFTLHdEQUF3RCwrREFEeEQsRUFuQkU7O0FBc0JiTyxTQUFPO0FBQ0xQLGFBQVMsc0VBQXNFLHVDQUQxRSxFQXRCTTs7QUF5QmJRLHVCQUFxQjtBQUNuQlIsYUFBUyxvREFEVSxFQXpCUjs7QUE0QmJTLFdBQVM7QUFDUFQsYUFBUyw0RUFBNEUsbURBRDlFLEVBNUJJOztBQStCYlUsZUFBYTtBQUNYVixhQUFTLGlGQUFpRiw4RUFEL0UsRUEvQkE7O0FBa0NiVyxZQUFVO0FBQ1JYLGFBQVMsOERBREQsRUFsQ0c7O0FBcUNiWSxpQkFBZTtBQUNiWixhQUFTLHFGQUFxRiwyREFEakYsRUFyQ0Y7O0FBd0NiYSxTQUFPO0FBQ0xiLGFBQVMscUZBREosRUF4Q007O0FBMkNiYyxhQUFXO0FBQ1RkLGFBQVMsOERBREEsRUEzQ0U7O0FBOENiZSx1QkFBcUI7QUFDbkJDLGFBQVMsQ0FEVTtBQUVuQmhCLGFBQVMsOERBRlUsRUE5Q1I7O0FBa0RiaUIsWUFBVTtBQUNSRCxhQUFTLENBREQ7QUFFUmhCLGFBQVMsbUVBRkQsRUFsREc7O0FBc0Ria0IsbUJBQWlCO0FBQ2ZGLGFBQVMsQ0FETTtBQUVmaEIsYUFBUywrRkFBK0YsbURBRnpGLEVBdERKLEVBQWY7OztBQTJEQUwsUUFBUUUsT0FBUixHQUFrQkMsUUFBbEIiLCJzb3VyY2VSb290IjoiL1VzZXJzL3N0ZXZlbnZhbmR1cm0vRGV2ZWxvcGVyL2VpZ2VuLXJlYWN0LW5hdGl2ZS1BcmR1aW5vL2FwcC9ub2RlX21vZHVsZXMvbWV0cm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9jb3JlL2xpYi9jb25maWcvdmFsaWRhdGlvbiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0ge1xuICBhdXhpbGlhcnlDb21tZW50OiB7XG4gICAgbWVzc2FnZTogXCJVc2UgYGF1eGlsaWFyeUNvbW1lbnRCZWZvcmVgIG9yIGBhdXhpbGlhcnlDb21tZW50QWZ0ZXJgXCJcbiAgfSxcbiAgYmxhY2tsaXN0OiB7XG4gICAgbWVzc2FnZTogXCJQdXQgdGhlIHNwZWNpZmljIHRyYW5zZm9ybXMgeW91IHdhbnQgaW4gdGhlIGBwbHVnaW5zYCBvcHRpb25cIlxuICB9LFxuICBicmVha0NvbmZpZzoge1xuICAgIG1lc3NhZ2U6IFwiVGhpcyBpcyBub3QgYSBuZWNlc3Nhcnkgb3B0aW9uIGluIEJhYmVsIDZcIlxuICB9LFxuICBleHBlcmltZW50YWw6IHtcbiAgICBtZXNzYWdlOiBcIlB1dCB0aGUgc3BlY2lmaWMgdHJhbnNmb3JtcyB5b3Ugd2FudCBpbiB0aGUgYHBsdWdpbnNgIG9wdGlvblwiXG4gIH0sXG4gIGV4dGVybmFsSGVscGVyczoge1xuICAgIG1lc3NhZ2U6IFwiVXNlIHRoZSBgZXh0ZXJuYWwtaGVscGVyc2AgcGx1Z2luIGluc3RlYWQuIFwiICsgXCJDaGVjayBvdXQgaHR0cDovL2JhYmVsanMuaW8vZG9jcy9wbHVnaW5zL2V4dGVybmFsLWhlbHBlcnMvXCJcbiAgfSxcbiAgZXh0cmE6IHtcbiAgICBtZXNzYWdlOiBcIlwiXG4gIH0sXG4gIGpzeFByYWdtYToge1xuICAgIG1lc3NhZ2U6IFwidXNlIHRoZSBgcHJhZ21hYCBvcHRpb24gaW4gdGhlIGByZWFjdC1qc3hgIHBsdWdpbi4gXCIgKyBcIkNoZWNrIG91dCBodHRwOi8vYmFiZWxqcy5pby9kb2NzL3BsdWdpbnMvdHJhbnNmb3JtLXJlYWN0LWpzeC9cIlxuICB9LFxuICBsb29zZToge1xuICAgIG1lc3NhZ2U6IFwiU3BlY2lmeSB0aGUgYGxvb3NlYCBvcHRpb24gZm9yIHRoZSByZWxldmFudCBwbHVnaW4geW91IGFyZSB1c2luZyBcIiArIFwib3IgdXNlIGEgcHJlc2V0IHRoYXQgc2V0cyB0aGUgb3B0aW9uLlwiXG4gIH0sXG4gIG1ldGFkYXRhVXNlZEhlbHBlcnM6IHtcbiAgICBtZXNzYWdlOiBcIk5vdCByZXF1aXJlZCBhbnltb3JlIGFzIHRoaXMgaXMgZW5hYmxlZCBieSBkZWZhdWx0XCJcbiAgfSxcbiAgbW9kdWxlczoge1xuICAgIG1lc3NhZ2U6IFwiVXNlIHRoZSBjb3JyZXNwb25kaW5nIG1vZHVsZSB0cmFuc2Zvcm0gcGx1Z2luIGluIHRoZSBgcGx1Z2luc2Agb3B0aW9uLiBcIiArIFwiQ2hlY2sgb3V0IGh0dHA6Ly9iYWJlbGpzLmlvL2RvY3MvcGx1Z2lucy8jbW9kdWxlc1wiXG4gIH0sXG4gIG5vblN0YW5kYXJkOiB7XG4gICAgbWVzc2FnZTogXCJVc2UgdGhlIGByZWFjdC1qc3hgIGFuZCBgZmxvdy1zdHJpcC10eXBlc2AgcGx1Z2lucyB0byBzdXBwb3J0IEpTWCBhbmQgRmxvdy4gXCIgKyBcIkFsc28gY2hlY2sgb3V0IHRoZSByZWFjdCBwcmVzZXQgaHR0cDovL2JhYmVsanMuaW8vZG9jcy9wbHVnaW5zL3ByZXNldC1yZWFjdC9cIlxuICB9LFxuICBvcHRpb25hbDoge1xuICAgIG1lc3NhZ2U6IFwiUHV0IHRoZSBzcGVjaWZpYyB0cmFuc2Zvcm1zIHlvdSB3YW50IGluIHRoZSBgcGx1Z2luc2Agb3B0aW9uXCJcbiAgfSxcbiAgc291cmNlTWFwTmFtZToge1xuICAgIG1lc3NhZ2U6IFwiVGhlIGBzb3VyY2VNYXBOYW1lYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZCBiZWNhdXNlIGl0IG1ha2VzIG1vcmUgc2Vuc2UgZm9yIHRoZSBcIiArIFwidG9vbGluZyB0aGF0IGNhbGxzIEJhYmVsIHRvIGFzc2lnbiBgbWFwLmZpbGVgIHRoZW1zZWx2ZXMuXCJcbiAgfSxcbiAgc3RhZ2U6IHtcbiAgICBtZXNzYWdlOiBcIkNoZWNrIG91dCB0aGUgY29ycmVzcG9uZGluZyBzdGFnZS14IHByZXNldHMgaHR0cDovL2JhYmVsanMuaW8vZG9jcy9wbHVnaW5zLyNwcmVzZXRzXCJcbiAgfSxcbiAgd2hpdGVsaXN0OiB7XG4gICAgbWVzc2FnZTogXCJQdXQgdGhlIHNwZWNpZmljIHRyYW5zZm9ybXMgeW91IHdhbnQgaW4gdGhlIGBwbHVnaW5zYCBvcHRpb25cIlxuICB9LFxuICByZXNvbHZlTW9kdWxlU291cmNlOiB7XG4gICAgdmVyc2lvbjogNixcbiAgICBtZXNzYWdlOiBcIlVzZSBgYmFiZWwtcGx1Z2luLW1vZHVsZS1yZXNvbHZlckAzYCdzICdyZXNvbHZlUGF0aCcgb3B0aW9uc1wiXG4gIH0sXG4gIG1ldGFkYXRhOiB7XG4gICAgdmVyc2lvbjogNixcbiAgICBtZXNzYWdlOiBcIkdlbmVyYXRlZCBwbHVnaW4gbWV0YWRhdGEgaXMgYWx3YXlzIGluY2x1ZGVkIGluIHRoZSBvdXRwdXQgcmVzdWx0XCJcbiAgfSxcbiAgc291cmNlTWFwVGFyZ2V0OiB7XG4gICAgdmVyc2lvbjogNixcbiAgICBtZXNzYWdlOiBcIlRoZSBgc291cmNlTWFwVGFyZ2V0YCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZCBiZWNhdXNlIGl0IG1ha2VzIG1vcmUgc2Vuc2UgZm9yIHRoZSB0b29saW5nIFwiICsgXCJ0aGF0IGNhbGxzIEJhYmVsIHRvIGFzc2lnbiBgbWFwLmZpbGVgIHRoZW1zZWx2ZXMuXCJcbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/option-assertions.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/option-assertions.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/option-assertions.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/option-assertions.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation",
        "sourceFileName": "option-assertions.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.assertSourceMaps = assertSourceMaps;\nexports.assertCompact = assertCompact;\nexports.assertSourceType = assertSourceType;\nexports.assertInputSourceMap = assertInputSourceMap;\nexports.assertString = assertString;\nexports.assertFunction = assertFunction;\nexports.assertBoolean = assertBoolean;\nexports.assertObject = assertObject;\nexports.assertArray = assertArray;\nexports.assertIgnoreList = assertIgnoreList;\nexports.assertConfigApplicableTest = assertConfigApplicableTest;\nexports.assertConfigFileSearch = assertConfigFileSearch;\nexports.assertBabelrcSearch = assertBabelrcSearch;\nexports.assertPluginList = assertPluginList;\n\nfunction assertSourceMaps(key, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && value !== \"inline\" && value !== \"both\") {\n    throw new Error(`.${key} must be a boolean, \"inline\", \"both\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertCompact(key, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && value !== \"auto\") {\n    throw new Error(`.${key} must be a boolean, \"auto\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertSourceType(key, value) {\n  if (value !== undefined && value !== \"module\" && value !== \"script\" && value !== \"unambiguous\") {\n    throw new Error(`.${key} must be \"module\", \"script\", \"unambiguous\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertInputSourceMap(key, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && (typeof value !== \"object\" || !value)) {\n    throw new Error(\".inputSourceMap must be a boolean, object, or undefined\");\n  }\n\n  return value;\n}\n\nfunction assertString(key, value) {\n  if (value !== undefined && typeof value !== \"string\") {\n    throw new Error(`.${key} must be a string, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertFunction(key, value) {\n  if (value !== undefined && typeof value !== \"function\") {\n    throw new Error(`.${key} must be a function, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertBoolean(key, value) {\n  if (value !== undefined && typeof value !== \"boolean\") {\n    throw new Error(`.${key} must be a boolean, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertObject(key, value) {\n  if (value !== undefined && (typeof value !== \"object\" || Array.isArray(value) || !value)) {\n    throw new Error(`.${key} must be an object, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertArray(key, value) {\n  if (value != null && !Array.isArray(value)) {\n    throw new Error(`.${key} must be an array, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertIgnoreList(key, value) {\n  const arr = assertArray(key, value);\n\n  if (arr) {\n    arr.forEach((item, i) => assertIgnoreItem(key, i, item));\n  }\n\n  return arr;\n}\n\nfunction assertIgnoreItem(key, index, value) {\n  if (typeof value !== \"string\" && typeof value !== \"function\" && !(value instanceof RegExp)) {\n    throw new Error(`.${key}[${index}] must be an array of string/Funtion/RegExp values, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertConfigApplicableTest(key, value) {\n  if (value === undefined) return value;\n\n  if (Array.isArray(value)) {\n    value.forEach((item, i) => {\n      if (!checkValidTest(item)) {\n        throw new Error(`.${key}[${i}] must be a string/Function/RegExp.`);\n      }\n    });\n  } else if (!checkValidTest(value)) {\n    throw new Error(`.${key} must be a string/Function/RegExp, or an array of those`);\n  }\n\n  return value;\n}\n\nfunction checkValidTest(value) {\n  return typeof value === \"string\" || typeof value === \"function\" || value instanceof RegExp;\n}\n\nfunction assertConfigFileSearch(key, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && typeof value !== \"string\") {\n    throw new Error(`.${key} must be a undefined, a boolean, a string, ` + `got ${JSON.stringify(value)}`);\n  }\n\n  return value;\n}\n\nfunction assertBabelrcSearch(key, value) {\n  if (value === undefined || typeof value === \"boolean\") return value;\n\n  if (Array.isArray(value)) {\n    value.forEach((item, i) => {\n      if (typeof item !== \"string\") {\n        throw new Error(`.${key}[${i}] must be a string.`);\n      }\n    });\n  } else if (typeof value !== \"string\") {\n    throw new Error(`.${key} must be a undefined, a boolean, a string, ` + `or an array of strings, got ${JSON.stringify(value)}`);\n  }\n\n  return value;\n}\n\nfunction assertPluginList(key, value) {\n  const arr = assertArray(key, value);\n\n  if (arr) {\n    arr.forEach((item, i) => assertPluginItem(key, i, item));\n  }\n\n  return arr;\n}\n\nfunction assertPluginItem(key, index, value) {\n  if (Array.isArray(value)) {\n    if (value.length === 0) {\n      throw new Error(`.${key}[${index}] must include an object`);\n    }\n\n    if (value.length > 3) {\n      throw new Error(`.${key}[${index}] may only be a two-tuple or three-tuple`);\n    }\n\n    assertPluginTarget(key, index, true, value[0]);\n\n    if (value.length > 1) {\n      const opts = value[1];\n\n      if (opts !== undefined && opts !== false && (typeof opts !== \"object\" || Array.isArray(opts))) {\n        throw new Error(`.${key}[${index}][1] must be an object, false, or undefined`);\n      }\n    }\n\n    if (value.length === 3) {\n      const name = value[2];\n\n      if (name !== undefined && typeof name !== \"string\") {\n        throw new Error(`.${key}[${index}][2] must be a string, or undefined`);\n      }\n    }\n  } else {\n    assertPluginTarget(key, index, false, value);\n  }\n\n  return value;\n}\n\nfunction assertPluginTarget(key, index, inArray, value) {\n  if ((typeof value !== \"object\" || !value) && typeof value !== \"string\" && typeof value !== \"function\") {\n    throw new Error(`.${key}[${index}]${inArray ? `[0]` : \"\"} must be a string, object, function`);\n  }\n\n  return value;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/plugins.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/plugins.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/plugins.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation/plugins.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/validation",
        "sourceFileName": "plugins.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.validatePluginObject = validatePluginObject;\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nconst VALIDATORS = {\n  name: _optionAssertions.assertString,\n  manipulateOptions: _optionAssertions.assertFunction,\n  pre: _optionAssertions.assertFunction,\n  post: _optionAssertions.assertFunction,\n  inherits: _optionAssertions.assertFunction,\n  visitor: assertVisitorMap,\n  parserOverride: _optionAssertions.assertFunction,\n  generatorOverride: _optionAssertions.assertFunction };\n\n\nfunction assertVisitorMap(key, value) {\n  const obj = (0, _optionAssertions.assertObject)(key, value);\n\n  if (obj) {\n    Object.keys(obj).forEach(prop => assertVisitorHandler(prop, obj[prop]));\n\n    if (obj.enter || obj.exit) {\n      throw new Error(`.${key} cannot contain catch-all \"enter\" or \"exit\" handlers. Please target individual nodes.`);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertVisitorHandler(key, value) {\n  if (value && typeof value === \"object\") {\n    Object.keys(value).forEach(handler => {\n      if (handler !== \"enter\" && handler !== \"exit\") {\n        throw new Error(`.visitor[\"${key}\"] may only have .enter and/or .exit handlers.`);\n      }\n    });\n  } else if (typeof value !== \"function\") {\n    throw new Error(`.visitor[\"${key}\"] must be a function`);\n  }\n\n  return value;\n}\n\nfunction validatePluginObject(obj) {\n  Object.keys(obj).forEach(key => {\n    const validator = VALIDATORS[key];\n    if (validator) validator(key, obj[key]);else throw new Error(`.${key} is not a valid Plugin property`);\n  });\n  return obj;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2YWxpZGF0ZVBsdWdpbk9iamVjdCIsIl9vcHRpb25Bc3NlcnRpb25zIiwicmVxdWlyZSIsIlZBTElEQVRPUlMiLCJuYW1lIiwiYXNzZXJ0U3RyaW5nIiwibWFuaXB1bGF0ZU9wdGlvbnMiLCJhc3NlcnRGdW5jdGlvbiIsInByZSIsInBvc3QiLCJpbmhlcml0cyIsInZpc2l0b3IiLCJhc3NlcnRWaXNpdG9yTWFwIiwicGFyc2VyT3ZlcnJpZGUiLCJnZW5lcmF0b3JPdmVycmlkZSIsImtleSIsIm9iaiIsImFzc2VydE9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwicHJvcCIsImFzc2VydFZpc2l0b3JIYW5kbGVyIiwiZW50ZXIiLCJleGl0IiwiRXJyb3IiLCJoYW5kbGVyIiwidmFsaWRhdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU8sSUFEb0MsRUFBN0M7O0FBR0FELFFBQVFFLG9CQUFSLEdBQStCQSxvQkFBL0I7O0FBRUEsSUFBSUMsb0JBQW9CQyxRQUFRLHFCQUFSLENBQXhCOztBQUVBLE1BQU1DLGFBQWE7QUFDakJDLFFBQU1ILGtCQUFrQkksWUFEUDtBQUVqQkMscUJBQW1CTCxrQkFBa0JNLGNBRnBCO0FBR2pCQyxPQUFLUCxrQkFBa0JNLGNBSE47QUFJakJFLFFBQU1SLGtCQUFrQk0sY0FKUDtBQUtqQkcsWUFBVVQsa0JBQWtCTSxjQUxYO0FBTWpCSSxXQUFTQyxnQkFOUTtBQU9qQkMsa0JBQWdCWixrQkFBa0JNLGNBUGpCO0FBUWpCTyxxQkFBbUJiLGtCQUFrQk0sY0FScEIsRUFBbkI7OztBQVdBLFNBQVNLLGdCQUFULENBQTBCRyxHQUExQixFQUErQmhCLEtBQS9CLEVBQXNDO0FBQ3BDLFFBQU1pQixNQUFNLENBQUMsR0FBR2Ysa0JBQWtCZ0IsWUFBdEIsRUFBb0NGLEdBQXBDLEVBQXlDaEIsS0FBekMsQ0FBWjs7QUFFQSxNQUFJaUIsR0FBSixFQUFTO0FBQ1BwQixXQUFPc0IsSUFBUCxDQUFZRixHQUFaLEVBQWlCRyxPQUFqQixDQUF5QkMsUUFBUUMscUJBQXFCRCxJQUFyQixFQUEyQkosSUFBSUksSUFBSixDQUEzQixDQUFqQzs7QUFFQSxRQUFJSixJQUFJTSxLQUFKLElBQWFOLElBQUlPLElBQXJCLEVBQTJCO0FBQ3pCLFlBQU0sSUFBSUMsS0FBSixDQUFXLElBQUdULEdBQUksdUZBQWxCLENBQU47QUFDRDtBQUNGOztBQUVELFNBQU9DLEdBQVA7QUFDRDs7QUFFRCxTQUFTSyxvQkFBVCxDQUE4Qk4sR0FBOUIsRUFBbUNoQixLQUFuQyxFQUEwQztBQUN4QyxNQUFJQSxTQUFTLE9BQU9BLEtBQVAsS0FBaUIsUUFBOUIsRUFBd0M7QUFDdENILFdBQU9zQixJQUFQLENBQVluQixLQUFaLEVBQW1Cb0IsT0FBbkIsQ0FBMkJNLFdBQVc7QUFDcEMsVUFBSUEsWUFBWSxPQUFaLElBQXVCQSxZQUFZLE1BQXZDLEVBQStDO0FBQzdDLGNBQU0sSUFBSUQsS0FBSixDQUFXLGFBQVlULEdBQUksZ0RBQTNCLENBQU47QUFDRDtBQUNGLEtBSkQ7QUFLRCxHQU5ELE1BTU8sSUFBSSxPQUFPaEIsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUN0QyxVQUFNLElBQUl5QixLQUFKLENBQVcsYUFBWVQsR0FBSSx1QkFBM0IsQ0FBTjtBQUNEOztBQUVELFNBQU9oQixLQUFQO0FBQ0Q7O0FBRUQsU0FBU0Msb0JBQVQsQ0FBOEJnQixHQUE5QixFQUFtQztBQUNqQ3BCLFNBQU9zQixJQUFQLENBQVlGLEdBQVosRUFBaUJHLE9BQWpCLENBQXlCSixPQUFPO0FBQzlCLFVBQU1XLFlBQVl2QixXQUFXWSxHQUFYLENBQWxCO0FBQ0EsUUFBSVcsU0FBSixFQUFlQSxVQUFVWCxHQUFWLEVBQWVDLElBQUlELEdBQUosQ0FBZixFQUFmLEtBQTZDLE1BQU0sSUFBSVMsS0FBSixDQUFXLElBQUdULEdBQUksaUNBQWxCLENBQU47QUFDOUMsR0FIRDtBQUlBLFNBQU9DLEdBQVA7QUFDRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvQGJhYmVsL2NvcmUvbGliL2NvbmZpZy92YWxpZGF0aW9uIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnZhbGlkYXRlUGx1Z2luT2JqZWN0ID0gdmFsaWRhdGVQbHVnaW5PYmplY3Q7XG5cbnZhciBfb3B0aW9uQXNzZXJ0aW9ucyA9IHJlcXVpcmUoXCIuL29wdGlvbi1hc3NlcnRpb25zXCIpO1xuXG5jb25zdCBWQUxJREFUT1JTID0ge1xuICBuYW1lOiBfb3B0aW9uQXNzZXJ0aW9ucy5hc3NlcnRTdHJpbmcsXG4gIG1hbmlwdWxhdGVPcHRpb25zOiBfb3B0aW9uQXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbixcbiAgcHJlOiBfb3B0aW9uQXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbixcbiAgcG9zdDogX29wdGlvbkFzc2VydGlvbnMuYXNzZXJ0RnVuY3Rpb24sXG4gIGluaGVyaXRzOiBfb3B0aW9uQXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbixcbiAgdmlzaXRvcjogYXNzZXJ0VmlzaXRvck1hcCxcbiAgcGFyc2VyT3ZlcnJpZGU6IF9vcHRpb25Bc3NlcnRpb25zLmFzc2VydEZ1bmN0aW9uLFxuICBnZW5lcmF0b3JPdmVycmlkZTogX29wdGlvbkFzc2VydGlvbnMuYXNzZXJ0RnVuY3Rpb25cbn07XG5cbmZ1bmN0aW9uIGFzc2VydFZpc2l0b3JNYXAoa2V5LCB2YWx1ZSkge1xuICBjb25zdCBvYmogPSAoMCwgX29wdGlvbkFzc2VydGlvbnMuYXNzZXJ0T2JqZWN0KShrZXksIHZhbHVlKTtcblxuICBpZiAob2JqKSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKHByb3AgPT4gYXNzZXJ0VmlzaXRvckhhbmRsZXIocHJvcCwgb2JqW3Byb3BdKSk7XG5cbiAgICBpZiAob2JqLmVudGVyIHx8IG9iai5leGl0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYC4ke2tleX0gY2Fubm90IGNvbnRhaW4gY2F0Y2gtYWxsIFwiZW50ZXJcIiBvciBcImV4aXRcIiBoYW5kbGVycy4gUGxlYXNlIHRhcmdldCBpbmRpdmlkdWFsIG5vZGVzLmApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFZpc2l0b3JIYW5kbGVyKGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuICAgICAgaWYgKGhhbmRsZXIgIT09IFwiZW50ZXJcIiAmJiBoYW5kbGVyICE9PSBcImV4aXRcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYC52aXNpdG9yW1wiJHtrZXl9XCJdIG1heSBvbmx5IGhhdmUgLmVudGVyIGFuZC9vciAuZXhpdCBoYW5kbGVycy5gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgLnZpc2l0b3JbXCIke2tleX1cIl0gbXVzdCBiZSBhIGZ1bmN0aW9uYCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUGx1Z2luT2JqZWN0KG9iaikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBWQUxJREFUT1JTW2tleV07XG4gICAgaWYgKHZhbGlkYXRvcikgdmFsaWRhdG9yKGtleSwgb2JqW2tleV0pO2Vsc2UgdGhyb3cgbmV3IEVycm9yKGAuJHtrZXl9IGlzIG5vdCBhIHZhbGlkIFBsdWdpbiBwcm9wZXJ0eWApO1xuICB9KTtcbiAgcmV0dXJuIG9iajtcbn0iXX0=",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/partial.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/partial.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/partial.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config/partial.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/config",
        "sourceFileName": "partial.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = loadPrivatePartialConfig;\nexports.loadPartialConfig = loadPartialConfig;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _plugin = _interopRequireDefault(require(\"./plugin\"));\n\nvar _util = require(\"./util\");\n\nvar _item = require(\"./item\");\n\nvar _configChain = require(\"./config-chain\");\n\nvar _environment = require(\"./helpers/environment\");\n\nvar _options = require(\"./validation/options\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction loadPrivatePartialConfig(inputOpts) {\n  if (inputOpts != null && (typeof inputOpts !== \"object\" || Array.isArray(inputOpts))) {\n    throw new Error(\"Babel options must be an object, null, or undefined\");\n  }\n\n  const args = inputOpts ? (0, _options.validate)(\"arguments\", inputOpts) : {};\n  const _args$envName = args.envName,\n  envName = _args$envName === void 0 ? (0, _environment.getEnv)() : _args$envName,\n  _args$cwd = args.cwd,\n  cwd = _args$cwd === void 0 ? \".\" : _args$cwd;\n\n  const absoluteCwd = _path().default.resolve(cwd);\n\n  const context = {\n    filename: args.filename ? _path().default.resolve(cwd, args.filename) : null,\n    cwd: absoluteCwd,\n    envName };\n\n  const configChain = (0, _configChain.buildRootChain)(args, context);\n  if (!configChain) return null;\n  const options = {};\n  configChain.options.forEach(opts => {\n    (0, _util.mergeOptions)(options, opts);\n  });\n  options.babelrc = false;\n  options.configFile = false;\n  options.envName = envName;\n  options.cwd = absoluteCwd;\n  options.passPerPreset = false;\n  options.plugins = configChain.plugins.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor));\n  options.presets = configChain.presets.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor));\n  return {\n    options,\n    context,\n    ignore: configChain.ignore,\n    babelrc: configChain.babelrc,\n    config: configChain.config };\n\n}\n\nfunction loadPartialConfig(inputOpts) {\n  const result = loadPrivatePartialConfig(inputOpts);\n  if (!result) return null;\n  const options = result.options,\n  babelrc = result.babelrc,\n  ignore = result.ignore,\n  config = result.config;\n  (options.plugins || []).forEach(item => {\n    if (item.value instanceof _plugin.default) {\n      throw new Error(\"Passing cached plugin instances is not supported in \" + \"babel.loadPartialConfig()\");\n    }\n  });\n  return new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined);\n}\n\nclass PartialConfig {\n  constructor(options, babelrc, ignore, config) {\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    Object.freeze(this);\n  }\n\n  hasFilesystemConfig() {\n    return this.babelrc !== undefined || this.config !== undefined;\n  }}\n\n\n\nObject.freeze(PartialConfig.prototype);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
        "sourceFileName": "transform.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = void 0;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _transformation = require(\"./transformation\");\n\nvar _transformSync = _interopRequireDefault(require(\"./transform-sync\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nvar transform = function transform(code, opts, callback) {\n  if (typeof opts === \"function\") {\n    opts = undefined;\n    callback = opts;\n  }\n\n  if (callback === undefined) return (0, _transformSync.default)(code, opts);\n  const cb = callback;\n  process.nextTick(() => {\n    let cfg;\n\n    try {\n      cfg = (0, _config.default)(opts);\n      if (cfg === null) return cb(null, null);\n    } catch (err) {\n      return cb(err);\n    }\n\n    (0, _transformation.runAsync)(cfg, code, null, cb);\n  });\n};\n\nexports.default = transform;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdHJhbnNmb3JtYXRpb24iLCJfdHJhbnNmb3JtU3luYyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJ0cmFuc2Zvcm0iLCJjb2RlIiwib3B0cyIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiY2IiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJjZmciLCJlcnIiLCJydW5Bc3luYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxTQUFPLElBRG9DLEVBQTdDOztBQUdBRCxRQUFRRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsVUFBVUMsdUJBQXVCQyxRQUFRLFVBQVIsQ0FBdkIsQ0FBZDs7QUFFQSxJQUFJQyxrQkFBa0JELFFBQVEsa0JBQVIsQ0FBdEI7O0FBRUEsSUFBSUUsaUJBQWlCSCx1QkFBdUJDLFFBQVEsa0JBQVIsQ0FBdkIsQ0FBckI7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NJLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRU4sU0FBU00sR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsSUFBSUUsWUFBWSxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsSUFBekIsRUFBK0JDLFFBQS9CLEVBQXlDO0FBQ3ZELE1BQUksT0FBT0QsSUFBUCxLQUFnQixVQUFwQixFQUFnQztBQUM5QkEsV0FBT0UsU0FBUDtBQUNBRCxlQUFXRCxJQUFYO0FBQ0Q7O0FBRUQsTUFBSUMsYUFBYUMsU0FBakIsRUFBNEIsT0FBTyxDQUFDLEdBQUdQLGVBQWVMLE9BQW5CLEVBQTRCUyxJQUE1QixFQUFrQ0MsSUFBbEMsQ0FBUDtBQUM1QixRQUFNRyxLQUFLRixRQUFYO0FBQ0FHLFVBQVFDLFFBQVIsQ0FBaUIsTUFBTTtBQUNyQixRQUFJQyxHQUFKOztBQUVBLFFBQUk7QUFDRkEsWUFBTSxDQUFDLEdBQUdmLFFBQVFELE9BQVosRUFBcUJVLElBQXJCLENBQU47QUFDQSxVQUFJTSxRQUFRLElBQVosRUFBa0IsT0FBT0gsR0FBRyxJQUFILEVBQVMsSUFBVCxDQUFQO0FBQ25CLEtBSEQsQ0FHRSxPQUFPSSxHQUFQLEVBQVk7QUFDWixhQUFPSixHQUFHSSxHQUFILENBQVA7QUFDRDs7QUFFRCxLQUFDLEdBQUdiLGdCQUFnQmMsUUFBcEIsRUFBOEJGLEdBQTlCLEVBQW1DUCxJQUFuQyxFQUF5QyxJQUF6QyxFQUErQ0ksRUFBL0M7QUFDRCxHQVhEO0FBWUQsQ0FwQkQ7O0FBc0JBZixRQUFRRSxPQUFSLEdBQWtCUSxTQUFsQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvQGJhYmVsL2NvcmUvbGliIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY29uZmlnID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb25maWdcIikpO1xuXG52YXIgX3RyYW5zZm9ybWF0aW9uID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtYXRpb25cIik7XG5cbnZhciBfdHJhbnNmb3JtU3luYyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdHJhbnNmb3JtLXN5bmNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtKGNvZGUsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgb3B0cyA9IHVuZGVmaW5lZDtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gIH1cblxuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkgcmV0dXJuICgwLCBfdHJhbnNmb3JtU3luYy5kZWZhdWx0KShjb2RlLCBvcHRzKTtcbiAgY29uc3QgY2IgPSBjYWxsYmFjaztcbiAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgbGV0IGNmZztcblxuICAgIHRyeSB7XG4gICAgICBjZmcgPSAoMCwgX2NvbmZpZy5kZWZhdWx0KShvcHRzKTtcbiAgICAgIGlmIChjZmcgPT09IG51bGwpIHJldHVybiBjYihudWxsLCBudWxsKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBjYihlcnIpO1xuICAgIH1cblxuICAgICgwLCBfdHJhbnNmb3JtYXRpb24ucnVuQXN5bmMpKGNmZywgY29kZSwgbnVsbCwgY2IpO1xuICB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHRyYW5zZm9ybTsiXX0=",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/index.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/index.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/index.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/index.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.runAsync = runAsync;\nexports.runSync = runSync;\n\nfunction _traverse() {\n  const data = _interopRequireDefault(require(\"@babel/traverse\"));\n\n  _traverse = function _traverse() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _pluginPass = _interopRequireDefault(require(\"./plugin-pass\"));\n\nvar _blockHoistPlugin = _interopRequireDefault(require(\"./block-hoist-plugin\"));\n\nvar _normalizeOpts = _interopRequireDefault(require(\"./normalize-opts\"));\n\nvar _normalizeFile = _interopRequireDefault(require(\"./normalize-file\"));\n\nvar _generate = _interopRequireDefault(require(\"./file/generate\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction runAsync(config, code, ast, callback) {\n  let result;\n\n  try {\n    result = runSync(config, code, ast);\n  } catch (err) {\n    return callback(err);\n  }\n\n  return callback(null, result);\n}\n\nfunction runSync(config, code, ast) {\n  const file = (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast);\n  transformFile(file, config.passes);\n  const opts = file.opts;\n\n  const _ref = opts.code !== false ? (0, _generate.default)(config.passes, file) : {},\n  outputCode = _ref.outputCode,\n  outputMap = _ref.outputMap;\n\n  return {\n    metadata: file.metadata,\n    options: opts,\n    ast: opts.ast === true ? file.ast : null,\n    code: outputCode === undefined ? null : outputCode,\n    map: outputMap === undefined ? null : outputMap,\n    sourceType: file.ast.program.sourceType };\n\n}\n\nfunction transformFile(file, pluginPasses) {\n  for (var _iterator = pluginPasses, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref2 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref2 = _i.value;\n    }\n\n    const pluginPairs = _ref2;\n    const passPairs = [];\n    const passes = [];\n    const visitors = [];\n\n    for (var _iterator2 = pluginPairs.concat([(0, _blockHoistPlugin.default)()]), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref3 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref3 = _i2.value;\n      }\n\n      const plugin = _ref3;\n      const pass = new _pluginPass.default(file, plugin.key, plugin.options);\n      passPairs.push([plugin, pass]);\n      passes.push(pass);\n      visitors.push(plugin.visitor);\n    }\n\n    for (var _i3 = 0; _i3 < passPairs.length; _i3++) {\n      const _passPairs$_i = passPairs[_i3],\n      plugin = _passPairs$_i[0],\n      pass = _passPairs$_i[1];\n      const fn = plugin.pre;\n\n      if (fn) {\n        const result = fn.call(pass, file);\n\n        if (isThenable(result)) {\n          throw new Error(`You appear to be using an plugin with an async .pre, ` + `which your current version of Babel does not support.` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n        }\n      }\n    }\n\n    const visitor = _traverse().default.visitors.merge(visitors, passes, file.opts.wrapPluginVisitorMethod);\n\n    (0, _traverse().default)(file.ast, visitor, file.scope);\n\n    for (var _i4 = 0; _i4 < passPairs.length; _i4++) {\n      const _passPairs$_i2 = passPairs[_i4],\n      plugin = _passPairs$_i2[0],\n      pass = _passPairs$_i2[1];\n      const fn = plugin.post;\n\n      if (fn) {\n        const result = fn.call(pass, file);\n\n        if (isThenable(result)) {\n          throw new Error(`You appear to be using an plugin with an async .post, ` + `which your current version of Babel does not support.` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n        }\n      }\n    }\n  }\n}\n\nfunction isThenable(val) {\n  return !!val && (typeof val === \"object\" || typeof val === \"function\") && typeof val.then === \"function\";\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/plugin-pass.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/plugin-pass.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/plugin-pass.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/plugin-pass.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
        "sourceFileName": "plugin-pass.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = void 0;\n\nclass PluginPass {\n  constructor(file, key, options) {\n    this._map = new Map();\n    this.key = key;\n    this.file = file;\n    this.opts = options || {};\n    this.filename = typeof file.opts.filename === \"string\" ? file.opts.filename : undefined;\n  }\n\n  set(key, val) {\n    this._map.set(key, val);\n  }\n\n  get(key) {\n    return this._map.get(key);\n  }\n\n  addHelper(name) {\n    return this.file.addHelper(name);\n  }\n\n  addImport() {\n    return this.file.addImport();\n  }\n\n  getModuleName() {\n    return this.file.getModuleName();\n  }\n\n  buildCodeFrameError(node, msg, Error) {\n    return this.file.buildCodeFrameError(node, msg, Error);\n  }}\n\n\n\nexports.default = PluginPass;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbi1wYXNzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIlBsdWdpblBhc3MiLCJjb25zdHJ1Y3RvciIsImZpbGUiLCJrZXkiLCJvcHRpb25zIiwiX21hcCIsIk1hcCIsIm9wdHMiLCJmaWxlbmFtZSIsInVuZGVmaW5lZCIsInNldCIsInZhbCIsImdldCIsImFkZEhlbHBlciIsIm5hbWUiLCJhZGRJbXBvcnQiLCJnZXRNb2R1bGVOYW1lIiwiYnVpbGRDb2RlRnJhbWVFcnJvciIsIm5vZGUiLCJtc2ciLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxTQUFPLElBRG9DLEVBQTdDOztBQUdBRCxRQUFRRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsTUFBTUMsVUFBTixDQUFpQjtBQUNmQyxjQUFZQyxJQUFaLEVBQWtCQyxHQUFsQixFQUF1QkMsT0FBdkIsRUFBZ0M7QUFDOUIsU0FBS0MsSUFBTCxHQUFZLElBQUlDLEdBQUosRUFBWjtBQUNBLFNBQUtILEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUtELElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtLLElBQUwsR0FBWUgsV0FBVyxFQUF2QjtBQUNBLFNBQUtJLFFBQUwsR0FBZ0IsT0FBT04sS0FBS0ssSUFBTCxDQUFVQyxRQUFqQixLQUE4QixRQUE5QixHQUF5Q04sS0FBS0ssSUFBTCxDQUFVQyxRQUFuRCxHQUE4REMsU0FBOUU7QUFDRDs7QUFFREMsTUFBSVAsR0FBSixFQUFTUSxHQUFULEVBQWM7QUFDWixTQUFLTixJQUFMLENBQVVLLEdBQVYsQ0FBY1AsR0FBZCxFQUFtQlEsR0FBbkI7QUFDRDs7QUFFREMsTUFBSVQsR0FBSixFQUFTO0FBQ1AsV0FBTyxLQUFLRSxJQUFMLENBQVVPLEdBQVYsQ0FBY1QsR0FBZCxDQUFQO0FBQ0Q7O0FBRURVLFlBQVVDLElBQVYsRUFBZ0I7QUFDZCxXQUFPLEtBQUtaLElBQUwsQ0FBVVcsU0FBVixDQUFvQkMsSUFBcEIsQ0FBUDtBQUNEOztBQUVEQyxjQUFZO0FBQ1YsV0FBTyxLQUFLYixJQUFMLENBQVVhLFNBQVYsRUFBUDtBQUNEOztBQUVEQyxrQkFBZ0I7QUFDZCxXQUFPLEtBQUtkLElBQUwsQ0FBVWMsYUFBVixFQUFQO0FBQ0Q7O0FBRURDLHNCQUFvQkMsSUFBcEIsRUFBMEJDLEdBQTFCLEVBQStCQyxLQUEvQixFQUFzQztBQUNwQyxXQUFPLEtBQUtsQixJQUFMLENBQVVlLG1CQUFWLENBQThCQyxJQUE5QixFQUFvQ0MsR0FBcEMsRUFBeUNDLEtBQXpDLENBQVA7QUFDRCxHQS9CYzs7OztBQW1DakJ2QixRQUFRRSxPQUFSLEdBQWtCQyxVQUFsQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvQGJhYmVsL2NvcmUvbGliL3RyYW5zZm9ybWF0aW9uIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmNsYXNzIFBsdWdpblBhc3Mge1xuICBjb25zdHJ1Y3RvcihmaWxlLCBrZXksIG9wdGlvbnMpIHtcbiAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICB0aGlzLm9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMuZmlsZW5hbWUgPSB0eXBlb2YgZmlsZS5vcHRzLmZpbGVuYW1lID09PSBcInN0cmluZ1wiID8gZmlsZS5vcHRzLmZpbGVuYW1lIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgc2V0KGtleSwgdmFsKSB7XG4gICAgdGhpcy5fbWFwLnNldChrZXksIHZhbCk7XG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5nZXQoa2V5KTtcbiAgfVxuXG4gIGFkZEhlbHBlcihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZS5hZGRIZWxwZXIobmFtZSk7XG4gIH1cblxuICBhZGRJbXBvcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZS5hZGRJbXBvcnQoKTtcbiAgfVxuXG4gIGdldE1vZHVsZU5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZS5nZXRNb2R1bGVOYW1lKCk7XG4gIH1cblxuICBidWlsZENvZGVGcmFtZUVycm9yKG5vZGUsIG1zZywgRXJyb3IpIHtcbiAgICByZXR1cm4gdGhpcy5maWxlLmJ1aWxkQ29kZUZyYW1lRXJyb3Iobm9kZSwgbXNnLCBFcnJvcik7XG4gIH1cblxufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBQbHVnaW5QYXNzOyJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
        "sourceFileName": "block-hoist-plugin.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = loadBlockHoistPlugin;\n\nfunction _sortBy() {\n  const data = _interopRequireDefault(require(\"lodash/sortBy\"));\n\n  _sortBy = function _sortBy() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _config = _interopRequireDefault(require(\"../config\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nlet LOADED_PLUGIN;\n\nfunction loadBlockHoistPlugin() {\n  if (!LOADED_PLUGIN) {\n    const config = (0, _config.default)({\n      babelrc: false,\n      configFile: false,\n      plugins: [blockHoistPlugin] });\n\n    LOADED_PLUGIN = config ? config.passes[0][0] : undefined;\n    if (!LOADED_PLUGIN) throw new Error(\"Assertion failure\");\n  }\n\n  return LOADED_PLUGIN;\n}\n\nconst blockHoistPlugin = {\n  name: \"internal.blockHoist\",\n  visitor: {\n    Block: {\n      exit({\n        node })\n      {\n        let hasChange = false;\n\n        for (let i = 0; i < node.body.length; i++) {\n          const bodyNode = node.body[i];\n\n          if (bodyNode && bodyNode._blockHoist != null) {\n            hasChange = true;\n            break;\n          }\n        }\n\n        if (!hasChange) return;\n        node.body = (0, _sortBy().default)(node.body, function (bodyNode) {\n          let priority = bodyNode && bodyNode._blockHoist;\n          if (priority == null) priority = 1;\n          if (priority === true) priority = 2;\n          return -1 * priority;\n        });\n      } } } };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2NrLWhvaXN0LXBsdWdpbi5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJsb2FkQmxvY2tIb2lzdFBsdWdpbiIsIl9zb3J0QnkiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uZmlnIiwib2JqIiwiX19lc01vZHVsZSIsIkxPQURFRF9QTFVHSU4iLCJjb25maWciLCJiYWJlbHJjIiwiY29uZmlnRmlsZSIsInBsdWdpbnMiLCJibG9ja0hvaXN0UGx1Z2luIiwicGFzc2VzIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJuYW1lIiwidmlzaXRvciIsIkJsb2NrIiwiZXhpdCIsIm5vZGUiLCJoYXNDaGFuZ2UiLCJpIiwiYm9keSIsImxlbmd0aCIsImJvZHlOb2RlIiwiX2Jsb2NrSG9pc3QiLCJwcmlvcml0eSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxTQUFPLElBRG9DLEVBQTdDOztBQUdBRCxRQUFRRSxPQUFSLEdBQWtCQyxvQkFBbEI7O0FBRUEsU0FBU0MsT0FBVCxHQUFtQjtBQUNqQixRQUFNQyxPQUFPQyx1QkFBdUJDLFFBQVEsZUFBUixDQUF2QixDQUFiOztBQUVBSCxZQUFVLFNBQVNBLE9BQVQsR0FBbUI7QUFDM0IsV0FBT0MsSUFBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT0EsSUFBUDtBQUNEOztBQUVELElBQUlHLFVBQVVGLHVCQUF1QkMsUUFBUSxXQUFSLENBQXZCLENBQWQ7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRVAsU0FBU08sR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsSUFBSUUsYUFBSjs7QUFFQSxTQUFTUixvQkFBVCxHQUFnQztBQUM5QixNQUFJLENBQUNRLGFBQUwsRUFBb0I7QUFDbEIsVUFBTUMsU0FBUyxDQUFDLEdBQUdKLFFBQVFOLE9BQVosRUFBcUI7QUFDbENXLGVBQVMsS0FEeUI7QUFFbENDLGtCQUFZLEtBRnNCO0FBR2xDQyxlQUFTLENBQUNDLGdCQUFELENBSHlCLEVBQXJCLENBQWY7O0FBS0FMLG9CQUFnQkMsU0FBU0EsT0FBT0ssTUFBUCxDQUFjLENBQWQsRUFBaUIsQ0FBakIsQ0FBVCxHQUErQkMsU0FBL0M7QUFDQSxRQUFJLENBQUNQLGFBQUwsRUFBb0IsTUFBTSxJQUFJUSxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUNyQjs7QUFFRCxTQUFPUixhQUFQO0FBQ0Q7O0FBRUQsTUFBTUssbUJBQW1CO0FBQ3ZCSSxRQUFNLHFCQURpQjtBQUV2QkMsV0FBUztBQUNQQyxXQUFPO0FBQ0xDLFdBQUs7QUFDSEMsWUFERyxFQUFMO0FBRUc7QUFDRCxZQUFJQyxZQUFZLEtBQWhCOztBQUVBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixLQUFLRyxJQUFMLENBQVVDLE1BQTlCLEVBQXNDRixHQUF0QyxFQUEyQztBQUN6QyxnQkFBTUcsV0FBV0wsS0FBS0csSUFBTCxDQUFVRCxDQUFWLENBQWpCOztBQUVBLGNBQUlHLFlBQVlBLFNBQVNDLFdBQVQsSUFBd0IsSUFBeEMsRUFBOEM7QUFDNUNMLHdCQUFZLElBQVo7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsWUFBSSxDQUFDQSxTQUFMLEVBQWdCO0FBQ2hCRCxhQUFLRyxJQUFMLEdBQVksQ0FBQyxHQUFHdkIsVUFBVUYsT0FBZCxFQUF1QnNCLEtBQUtHLElBQTVCLEVBQWtDLFVBQVVFLFFBQVYsRUFBb0I7QUFDaEUsY0FBSUUsV0FBV0YsWUFBWUEsU0FBU0MsV0FBcEM7QUFDQSxjQUFJQyxZQUFZLElBQWhCLEVBQXNCQSxXQUFXLENBQVg7QUFDdEIsY0FBSUEsYUFBYSxJQUFqQixFQUF1QkEsV0FBVyxDQUFYO0FBQ3ZCLGlCQUFPLENBQUMsQ0FBRCxHQUFLQSxRQUFaO0FBQ0QsU0FMVyxDQUFaO0FBTUQsT0F0QkksRUFEQSxFQUZjLEVBQXpCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvdHJhbnNmb3JtYXRpb24iLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGxvYWRCbG9ja0hvaXN0UGx1Z2luO1xuXG5mdW5jdGlvbiBfc29ydEJ5KCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL3NvcnRCeVwiKSk7XG5cbiAgX3NvcnRCeSA9IGZ1bmN0aW9uIF9zb3J0QnkoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfY29uZmlnID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29uZmlnXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubGV0IExPQURFRF9QTFVHSU47XG5cbmZ1bmN0aW9uIGxvYWRCbG9ja0hvaXN0UGx1Z2luKCkge1xuICBpZiAoIUxPQURFRF9QTFVHSU4pIHtcbiAgICBjb25zdCBjb25maWcgPSAoMCwgX2NvbmZpZy5kZWZhdWx0KSh7XG4gICAgICBiYWJlbHJjOiBmYWxzZSxcbiAgICAgIGNvbmZpZ0ZpbGU6IGZhbHNlLFxuICAgICAgcGx1Z2luczogW2Jsb2NrSG9pc3RQbHVnaW5dXG4gICAgfSk7XG4gICAgTE9BREVEX1BMVUdJTiA9IGNvbmZpZyA/IGNvbmZpZy5wYXNzZXNbMF1bMF0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKCFMT0FERURfUExVR0lOKSB0aHJvdyBuZXcgRXJyb3IoXCJBc3NlcnRpb24gZmFpbHVyZVwiKTtcbiAgfVxuXG4gIHJldHVybiBMT0FERURfUExVR0lOO1xufVxuXG5jb25zdCBibG9ja0hvaXN0UGx1Z2luID0ge1xuICBuYW1lOiBcImludGVybmFsLmJsb2NrSG9pc3RcIixcbiAgdmlzaXRvcjoge1xuICAgIEJsb2NrOiB7XG4gICAgICBleGl0KHtcbiAgICAgICAgbm9kZVxuICAgICAgfSkge1xuICAgICAgICBsZXQgaGFzQ2hhbmdlID0gZmFsc2U7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBib2R5Tm9kZSA9IG5vZGUuYm9keVtpXTtcblxuICAgICAgICAgIGlmIChib2R5Tm9kZSAmJiBib2R5Tm9kZS5fYmxvY2tIb2lzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoYXNDaGFuZ2UpIHJldHVybjtcbiAgICAgICAgbm9kZS5ib2R5ID0gKDAsIF9zb3J0QnkoKS5kZWZhdWx0KShub2RlLmJvZHksIGZ1bmN0aW9uIChib2R5Tm9kZSkge1xuICAgICAgICAgIGxldCBwcmlvcml0eSA9IGJvZHlOb2RlICYmIGJvZHlOb2RlLl9ibG9ja0hvaXN0O1xuICAgICAgICAgIGlmIChwcmlvcml0eSA9PSBudWxsKSBwcmlvcml0eSA9IDE7XG4gICAgICAgICAgaWYgKHByaW9yaXR5ID09PSB0cnVlKSBwcmlvcml0eSA9IDI7XG4gICAgICAgICAgcmV0dXJuIC0xICogcHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfVxuICB9XG59OyJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/normalize-opts.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/normalize-opts.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/normalize-opts.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/normalize-opts.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
        "sourceFileName": "normalize-opts.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = normalizeOptions;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction normalizeOptions(config) {\n  const _config$options = config.options,\n  filename = _config$options.filename,\n  cwd = _config$options.cwd,\n  _config$options$filen = _config$options.filenameRelative,\n  filenameRelative = _config$options$filen === void 0 ? typeof filename === \"string\" ? _path().default.relative(cwd, filename) : \"unknown\" : _config$options$filen,\n  _config$options$sourc = _config$options.sourceType,\n  sourceType = _config$options$sourc === void 0 ? \"module\" : _config$options$sourc,\n  inputSourceMap = _config$options.inputSourceMap,\n  _config$options$sourc2 = _config$options.sourceMaps,\n  sourceMaps = _config$options$sourc2 === void 0 ? !!inputSourceMap : _config$options$sourc2,\n  moduleRoot = _config$options.moduleRoot,\n  _config$options$sourc3 = _config$options.sourceRoot,\n  sourceRoot = _config$options$sourc3 === void 0 ? moduleRoot : _config$options$sourc3,\n  _config$options$sourc4 = _config$options.sourceFileName,\n  sourceFileName = _config$options$sourc4 === void 0 ? _path().default.basename(filenameRelative) : _config$options$sourc4,\n  _config$options$comme = _config$options.comments,\n  comments = _config$options$comme === void 0 ? true : _config$options$comme,\n  _config$options$compa = _config$options.compact,\n  compact = _config$options$compa === void 0 ? \"auto\" : _config$options$compa;\n  const opts = config.options;\n  const options = Object.assign({}, opts, {\n    parserOpts: Object.assign({\n      sourceType: _path().default.extname(filenameRelative) === \".mjs\" ? \"module\" : sourceType,\n      sourceFileName: filename,\n      plugins: [] },\n    opts.parserOpts),\n    generatorOpts: Object.assign({\n      filename,\n      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n      retainLines: opts.retainLines,\n      comments,\n      shouldPrintComment: opts.shouldPrintComment,\n      compact,\n      minified: opts.minified,\n      sourceMaps,\n      sourceRoot,\n      sourceFileName },\n    opts.generatorOpts) });\n\n\n  for (var _iterator = config.passes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    const plugins = _ref;\n\n    for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      const plugin = _ref2;\n\n      if (plugin.manipulateOptions) {\n        plugin.manipulateOptions(options, options.parserOpts);\n      }\n    }\n  }\n\n  return options;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/normalize-file.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/normalize-file.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/normalize-file.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/normalize-file.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation",
        "sourceFileName": "normalize-file.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = normalizeFile;\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function t() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _convertSourceMap() {\n  const data = _interopRequireDefault(require(\"convert-source-map\"));\n\n  _convertSourceMap = function _convertSourceMap() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _babylon() {\n  const data = require(\"babylon\");\n\n  _babylon = function _babylon() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n\n  _codeFrame = function _codeFrame() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = _interopRequireDefault(require(\"./file/file\"));\n\nvar _missingPluginHelper = _interopRequireDefault(require(\"./util/missing-plugin-helper\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}\n\nconst shebangRegex = /^#!.*/;\n\nfunction normalizeFile(pluginPasses, options, code, ast) {\n  code = `${code || \"\"}`;\n  let shebang = null;\n  let inputMap = null;\n\n  if (options.inputSourceMap !== false) {\n    inputMap = _convertSourceMap().default.fromSource(code);\n\n    if (inputMap) {\n      code = _convertSourceMap().default.removeComments(code);\n    } else if (typeof options.inputSourceMap === \"object\") {\n      inputMap = _convertSourceMap().default.fromObject(options.inputSourceMap);\n    }\n  }\n\n  const shebangMatch = shebangRegex.exec(code);\n\n  if (shebangMatch) {\n    shebang = shebangMatch[0];\n    code = code.replace(shebangRegex, \"\");\n  }\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = t().file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n  } else {\n    ast = parser(pluginPasses, options, code);\n  }\n\n  return new _file.default(options, {\n    code,\n    ast,\n    shebang,\n    inputMap });\n\n}\n\nfunction parser(pluginPasses, options, code) {\n  try {\n    const results = [];\n\n    for (var _iterator = pluginPasses, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      const plugins = _ref;\n\n      for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        const plugin = _ref2;\n        const parserOverride = plugin.parserOverride;\n\n        if (parserOverride) {\n          const ast = parserOverride(code, options.parserOpts, _babylon().parse);\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return (0, _babylon().parse)(code, options.parserOpts);\n    } else if (results.length === 1) {\n      if (typeof results[0].then === \"function\") {\n        throw new Error(`You appear to be using an async codegen plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n      }\n\n      return results[0];\n    }\n\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n    }\n\n    const loc = err.loc,\n    missingPlugin = err.missingPlugin;\n\n    if (loc) {\n      const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1 } },\n\n      options);\n\n      if (missingPlugin) {\n        err.message = `${options.filename || \"unknown\"}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${options.filename || \"unknown\"}: ${err.message}\\n\\n` + codeFrame;\n      }\n\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n\n    throw err;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/util\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/util/missing-plugin-helper.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/util",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/util/missing-plugin-helper.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/util/missing-plugin-helper.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/util/missing-plugin-helper.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/util",
        "sourceFileName": "missing-plugin-helper.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = generateMissingPluginMessage;\nconst pluginNameMap = {\n  asyncGenerators: {\n    syntax: {\n      name: \"@babel/plugin-syntax-async-generators\",\n      url: \"https://git.io/vb4SY\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-async-generator-functions\",\n      url: \"https://git.io/vb4yp\" } },\n\n\n  classProperties: {\n    syntax: {\n      name: \"@babel/plugin-syntax-class-properties\",\n      url: \"https://git.io/vb4yQ\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-class-properties\",\n      url: \"https://git.io/vb4SL\" } },\n\n\n  decorators: {\n    syntax: {\n      name: \"@babel/plugin-syntax-decorators\",\n      url: \"https://git.io/vb4y9\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-decorators\",\n      url: \"https://git.io/vb4ST\" } },\n\n\n  doExpressions: {\n    syntax: {\n      name: \"@babel/plugin-syntax-do-expressions\",\n      url: \"https://git.io/vb4yh\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-do-expressions\",\n      url: \"https://git.io/vb4S3\" } },\n\n\n  dynamicImport: {\n    syntax: {\n      name: \"@babel/plugin-syntax-dynamic-import\",\n      url: \"https://git.io/vb4Sv\" } },\n\n\n  exportDefaultFrom: {\n    syntax: {\n      name: \"@babel/plugin-syntax-export-default-from\",\n      url: \"https://git.io/vb4SO\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-export-default-from\",\n      url: \"https://git.io/vb4yH\" } },\n\n\n  exportNamespaceFrom: {\n    syntax: {\n      name: \"@babel/plugin-syntax-export-namespace-from\",\n      url: \"https://git.io/vb4Sf\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-export-namespace-from\",\n      url: \"https://git.io/vb4SG\" } },\n\n\n  flow: {\n    syntax: {\n      name: \"@babel/plugin-syntax-flow\",\n      url: \"https://git.io/vb4yb\" },\n\n    transform: {\n      name: \"@babel/plugin-transform-flow-strip-types\",\n      url: \"https://git.io/vb49g\" } },\n\n\n  functionBind: {\n    syntax: {\n      name: \"@babel/plugin-syntax-function-bind\",\n      url: \"https://git.io/vb4y7\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-function-bind\",\n      url: \"https://git.io/vb4St\" } },\n\n\n  functionSent: {\n    syntax: {\n      name: \"@babel/plugin-syntax-function-sent\",\n      url: \"https://git.io/vb4yN\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-function-sent\",\n      url: \"https://git.io/vb4SZ\" } },\n\n\n  importMeta: {\n    syntax: {\n      name: \"@babel/plugin-syntax-import-meta\",\n      url: \"https://git.io/vbKK6\" } },\n\n\n  jsx: {\n    syntax: {\n      name: \"@babel/plugin-syntax-jsx\",\n      url: \"https://git.io/vb4yA\" },\n\n    transform: {\n      name: \"@babel/plugin-transform-react-jsx\",\n      url: \"https://git.io/vb4yd\" } },\n\n\n  logicalAssignment: {\n    syntax: {\n      name: \"@babel/plugin-syntax-logical-assignment-operators\",\n      url: \"https://git.io/vAlBp\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-logical-assignment-operators\",\n      url: \"https://git.io/vAlRe\" } },\n\n\n  nullishCoalescingOperator: {\n    syntax: {\n      name: \"@babel/plugin-syntax-nullish-coalescing-operator\",\n      url: \"https://git.io/vb4yx\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-nullish-coalescing-operator\",\n      url: \"https://git.io/vb4Se\" } },\n\n\n  numericSeparator: {\n    syntax: {\n      name: \"@babel/plugin-syntax-numeric-separator\",\n      url: \"https://git.io/vb4Sq\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-numeric-separator\",\n      url: \"https://git.io/vb4yS\" } },\n\n\n  objectRestSpread: {\n    syntax: {\n      name: \"@babel/plugin-syntax-object-rest-spread\",\n      url: \"https://git.io/vb4y5\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-object-rest-spread\",\n      url: \"https://git.io/vb4Ss\" } },\n\n\n  optionalCatchBinding: {\n    syntax: {\n      name: \"@babel/plugin-syntax-optional-catch-binding\",\n      url: \"https://git.io/vb4Sn\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-optional-catch-binding\",\n      url: \"https://git.io/vb4SI\" } },\n\n\n  optionalChaining: {\n    syntax: {\n      name: \"@babel/plugin-syntax-optional-chaining\",\n      url: \"https://git.io/vb4Sc\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-optional-chaining\",\n      url: \"https://git.io/vb4Sk\" } },\n\n\n  pipelineOperator: {\n    syntax: {\n      name: \"@babel/plugin-syntax-pipeline-operator\",\n      url: \"https://git.io/vb4yj\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-pipeline-operator\",\n      url: \"https://git.io/vb4SU\" } },\n\n\n  throwExpressions: {\n    syntax: {\n      name: \"@babel/plugin-syntax-throw-expressions\",\n      url: \"https://git.io/vb4SJ\" },\n\n    transform: {\n      name: \"@babel/plugin-proposal-throw-expressions\",\n      url: \"https://git.io/vb4yF\" } },\n\n\n  typescript: {\n    syntax: {\n      name: \"@babel/plugin-syntax-typescript\",\n      url: \"https://git.io/vb4SC\" },\n\n    transform: {\n      name: \"@babel/plugin-transform-typescript\",\n      url: \"https://git.io/vb4Sm\" } } };\n\n\n\n\nconst getNameURLCombination = ({\n  name,\n  url }) =>\n`${name} (${url})`;\n\nfunction generateMissingPluginMessage(missingPluginName, loc, codeFrame) {\n  let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled ` + `(${loc.line}:${loc.column + 1}):\\n\\n` + codeFrame;\n  const pluginInfo = pluginNameMap[missingPluginName];\n\n  if (pluginInfo) {\n    const syntaxPlugin = pluginInfo.syntax,\n    transformPlugin = pluginInfo.transform;\n\n    if (syntaxPlugin) {\n      if (transformPlugin) {\n        const transformPluginInfo = getNameURLCombination(transformPlugin);\n        helpMessage += `\\n\\nAdd ${transformPluginInfo} to the 'plugins' section of your Babel config ` + `to enable transformation.`;\n      } else {\n        const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);\n        helpMessage += `\\n\\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config ` + `to enable parsing.`;\n      }\n    }\n  }\n\n  return helpMessage;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/generate.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/generate.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/generate.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/generate.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file",
        "sourceFileName": "generate.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = generateCode;\n\nfunction _convertSourceMap() {\n  const data = _interopRequireDefault(require(\"convert-source-map\"));\n\n  _convertSourceMap = function _convertSourceMap() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  const data = _interopRequireDefault(require(\"@babel/generator\"));\n\n  _generator = function _generator() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _mergeMap = _interopRequireDefault(require(\"./merge-map\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction generateCode(pluginPasses, file) {\n  const opts = file.opts,\n  ast = file.ast,\n  shebang = file.shebang,\n  code = file.code,\n  inputMap = file.inputMap;\n  const results = [];\n\n  for (var _iterator = pluginPasses, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    const plugins = _ref;\n\n    for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      const plugin = _ref2;\n      const generatorOverride = plugin.generatorOverride;\n\n      if (generatorOverride) {\n        const result = generatorOverride(ast, opts.generatorOpts, code, _generator().default);\n        if (result !== undefined) results.push(result);\n      }\n    }\n  }\n\n  let result;\n\n  if (results.length === 0) {\n    result = (0, _generator().default)(ast, opts.generatorOpts, code);\n  } else if (results.length === 1) {\n    result = results[0];\n\n    if (typeof result.then === \"function\") {\n      throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version.`);\n    }\n  } else {\n    throw new Error(\"More than one plugin attempted to override codegen.\");\n  }\n\n  let _result = result,\n  outputCode = _result.code,\n  outputMap = _result.map;\n\n  if (shebang) {\n    outputCode = `${shebang}\\n${outputCode}`;\n  }\n\n  if (outputMap && inputMap) {\n    outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap);\n  }\n\n  if (opts.sourceMaps === \"inline\" || opts.sourceMaps === \"both\") {\n    outputCode += \"\\n\" + _convertSourceMap().default.fromObject(outputMap).toComment();\n  }\n\n  if (opts.sourceMaps === \"inline\") {\n    outputMap = null;\n  }\n\n  return {\n    outputCode,\n    outputMap };\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImdlbmVyYXRlQ29kZSIsIl9jb252ZXJ0U291cmNlTWFwIiwiZGF0YSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dlbmVyYXRvciIsIl9tZXJnZU1hcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJwbHVnaW5QYXNzZXMiLCJmaWxlIiwib3B0cyIsImFzdCIsInNoZWJhbmciLCJjb2RlIiwiaW5wdXRNYXAiLCJyZXN1bHRzIiwiX2l0ZXJhdG9yIiwiX2lzQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3JlZiIsImxlbmd0aCIsIm5leHQiLCJkb25lIiwicGx1Z2lucyIsIl9pdGVyYXRvcjIiLCJfaXNBcnJheTIiLCJfaTIiLCJfcmVmMiIsInBsdWdpbiIsImdlbmVyYXRvck92ZXJyaWRlIiwicmVzdWx0IiwiZ2VuZXJhdG9yT3B0cyIsInVuZGVmaW5lZCIsInB1c2giLCJ0aGVuIiwiRXJyb3IiLCJfcmVzdWx0Iiwib3V0cHV0Q29kZSIsIm91dHB1dE1hcCIsIm1hcCIsInRvT2JqZWN0Iiwic291cmNlTWFwcyIsImZyb21PYmplY3QiLCJ0b0NvbW1lbnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsT0FBUixHQUFrQkMsWUFBbEI7O0FBRUEsU0FBU0MsaUJBQVQsR0FBNkI7QUFDM0IsUUFBTUMsT0FBT0MsdUJBQXVCQyxRQUFRLG9CQUFSLENBQXZCLENBQWI7O0FBRUFILHNCQUFvQixTQUFTQSxpQkFBVCxHQUE2QjtBQUMvQyxXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csVUFBVCxHQUFzQjtBQUNwQixRQUFNSCxPQUFPQyx1QkFBdUJDLFFBQVEsa0JBQVIsQ0FBdkIsQ0FBYjs7QUFFQUMsZUFBYSxTQUFTQSxVQUFULEdBQXNCO0FBQ2pDLFdBQU9ILElBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9BLElBQVA7QUFDRDs7QUFFRCxJQUFJSSxZQUFZSCx1QkFBdUJDLFFBQVEsYUFBUixDQUF2QixDQUFoQjs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0ksR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFUixTQUFTUSxHQUFYLEVBQXJDLENBQXdEOztBQUUvRixTQUFTUCxZQUFULENBQXNCUyxZQUF0QixFQUFvQ0MsSUFBcEMsRUFBMEM7QUFDeEMsUUFBTUMsT0FBT0QsS0FBS0MsSUFBbEI7QUFDTUMsUUFBTUYsS0FBS0UsR0FEakI7QUFFTUMsWUFBVUgsS0FBS0csT0FGckI7QUFHTUMsU0FBT0osS0FBS0ksSUFIbEI7QUFJTUMsYUFBV0wsS0FBS0ssUUFKdEI7QUFLQSxRQUFNQyxVQUFVLEVBQWhCOztBQUVBLE9BQUssSUFBSUMsWUFBWVIsWUFBaEIsRUFBOEJTLFdBQVdDLE1BQU1DLE9BQU4sQ0FBY0gsU0FBZCxDQUF6QyxFQUFtRUksS0FBSyxDQUF4RSxFQUEyRUosWUFBWUMsV0FBV0QsU0FBWCxHQUF1QkEsVUFBVUssT0FBT0MsUUFBakIsR0FBbkgsSUFBbUo7QUFDakosUUFBSUMsSUFBSjs7QUFFQSxRQUFJTixRQUFKLEVBQWM7QUFDWixVQUFJRyxNQUFNSixVQUFVUSxNQUFwQixFQUE0QjtBQUM1QkQsYUFBT1AsVUFBVUksSUFBVixDQUFQO0FBQ0QsS0FIRCxNQUdPO0FBQ0xBLFdBQUtKLFVBQVVTLElBQVYsRUFBTDtBQUNBLFVBQUlMLEdBQUdNLElBQVAsRUFBYTtBQUNiSCxhQUFPSCxHQUFHdkIsS0FBVjtBQUNEOztBQUVELFVBQU04QixVQUFVSixJQUFoQjs7QUFFQSxTQUFLLElBQUlLLGFBQWFELE9BQWpCLEVBQTBCRSxZQUFZWCxNQUFNQyxPQUFOLENBQWNTLFVBQWQsQ0FBdEMsRUFBaUVFLE1BQU0sQ0FBdkUsRUFBMEVGLGFBQWFDLFlBQVlELFVBQVosR0FBeUJBLFdBQVdQLE9BQU9DLFFBQWxCLEdBQXJILElBQXNKO0FBQ3BKLFVBQUlTLEtBQUo7O0FBRUEsVUFBSUYsU0FBSixFQUFlO0FBQ2IsWUFBSUMsT0FBT0YsV0FBV0osTUFBdEIsRUFBOEI7QUFDOUJPLGdCQUFRSCxXQUFXRSxLQUFYLENBQVI7QUFDRCxPQUhELE1BR087QUFDTEEsY0FBTUYsV0FBV0gsSUFBWCxFQUFOO0FBQ0EsWUFBSUssSUFBSUosSUFBUixFQUFjO0FBQ2RLLGdCQUFRRCxJQUFJakMsS0FBWjtBQUNEOztBQUVELFlBQU1tQyxTQUFTRCxLQUFmO0FBQ0EsWUFBTUUsb0JBQW9CRCxPQUFPQyxpQkFBakM7O0FBRUEsVUFBSUEsaUJBQUosRUFBdUI7QUFDckIsY0FBTUMsU0FBU0Qsa0JBQWtCdEIsR0FBbEIsRUFBdUJELEtBQUt5QixhQUE1QixFQUEyQ3RCLElBQTNDLEVBQWlEVCxhQUFhTixPQUE5RCxDQUFmO0FBQ0EsWUFBSW9DLFdBQVdFLFNBQWYsRUFBMEJyQixRQUFRc0IsSUFBUixDQUFhSCxNQUFiO0FBQzNCO0FBQ0Y7QUFDRjs7QUFFRCxNQUFJQSxNQUFKOztBQUVBLE1BQUluQixRQUFRUyxNQUFSLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3hCVSxhQUFTLENBQUMsR0FBRzlCLGFBQWFOLE9BQWpCLEVBQTBCYSxHQUExQixFQUErQkQsS0FBS3lCLGFBQXBDLEVBQW1EdEIsSUFBbkQsQ0FBVDtBQUNELEdBRkQsTUFFTyxJQUFJRSxRQUFRUyxNQUFSLEtBQW1CLENBQXZCLEVBQTBCO0FBQy9CVSxhQUFTbkIsUUFBUSxDQUFSLENBQVQ7O0FBRUEsUUFBSSxPQUFPbUIsT0FBT0ksSUFBZCxLQUF1QixVQUEzQixFQUF1QztBQUNyQyxZQUFNLElBQUlDLEtBQUosQ0FBVyxpREFBRCxHQUFxRCx3REFBckQsR0FBZ0gsc0NBQWhILEdBQXlKLG1EQUFuSyxDQUFOO0FBQ0Q7QUFDRixHQU5NLE1BTUE7QUFDTCxVQUFNLElBQUlBLEtBQUosQ0FBVSxxREFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSUMsVUFBVU4sTUFBZDtBQUNJTyxlQUFhRCxRQUFRM0IsSUFEekI7QUFFSTZCLGNBQVlGLFFBQVFHLEdBRnhCOztBQUlBLE1BQUkvQixPQUFKLEVBQWE7QUFDWDZCLGlCQUFjLEdBQUU3QixPQUFRLEtBQUk2QixVQUFXLEVBQXZDO0FBQ0Q7O0FBRUQsTUFBSUMsYUFBYTVCLFFBQWpCLEVBQTJCO0FBQ3pCNEIsZ0JBQVksQ0FBQyxHQUFHckMsVUFBVVAsT0FBZCxFQUF1QmdCLFNBQVM4QixRQUFULEVBQXZCLEVBQTRDRixTQUE1QyxDQUFaO0FBQ0Q7O0FBRUQsTUFBSWhDLEtBQUttQyxVQUFMLEtBQW9CLFFBQXBCLElBQWdDbkMsS0FBS21DLFVBQUwsS0FBb0IsTUFBeEQsRUFBZ0U7QUFDOURKLGtCQUFjLE9BQU96QyxvQkFBb0JGLE9BQXBCLENBQTRCZ0QsVUFBNUIsQ0FBdUNKLFNBQXZDLEVBQWtESyxTQUFsRCxFQUFyQjtBQUNEOztBQUVELE1BQUlyQyxLQUFLbUMsVUFBTCxLQUFvQixRQUF4QixFQUFrQztBQUNoQ0gsZ0JBQVksSUFBWjtBQUNEOztBQUVELFNBQU87QUFDTEQsY0FESztBQUVMQyxhQUZLLEVBQVA7O0FBSUQiLCJzb3VyY2VSb290IjoiL1VzZXJzL3N0ZXZlbnZhbmR1cm0vRGV2ZWxvcGVyL2VpZ2VuLXJlYWN0LW5hdGl2ZS1BcmR1aW5vL2FwcC9ub2RlX21vZHVsZXMvbWV0cm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9jb3JlL2xpYi90cmFuc2Zvcm1hdGlvbi9maWxlIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZW5lcmF0ZUNvZGU7XG5cbmZ1bmN0aW9uIF9jb252ZXJ0U291cmNlTWFwKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY29udmVydC1zb3VyY2UtbWFwXCIpKTtcblxuICBfY29udmVydFNvdXJjZU1hcCA9IGZ1bmN0aW9uIF9jb252ZXJ0U291cmNlTWFwKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfZ2VuZXJhdG9yKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL2dlbmVyYXRvclwiKSk7XG5cbiAgX2dlbmVyYXRvciA9IGZ1bmN0aW9uIF9nZW5lcmF0b3IoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfbWVyZ2VNYXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21lcmdlLW1hcFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZShwbHVnaW5QYXNzZXMsIGZpbGUpIHtcbiAgY29uc3Qgb3B0cyA9IGZpbGUub3B0cyxcbiAgICAgICAgYXN0ID0gZmlsZS5hc3QsXG4gICAgICAgIHNoZWJhbmcgPSBmaWxlLnNoZWJhbmcsXG4gICAgICAgIGNvZGUgPSBmaWxlLmNvZGUsXG4gICAgICAgIGlucHV0TWFwID0gZmlsZS5pbnB1dE1hcDtcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IHBsdWdpblBhc3NlcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgX3JlZiA9IF9pdGVyYXRvcltfaSsrXTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgaWYgKF9pLmRvbmUpIGJyZWFrO1xuICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IHBsdWdpbnMgPSBfcmVmO1xuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IHBsdWdpbnMsIF9pc0FycmF5MiA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yMiksIF9pMiA9IDAsIF9pdGVyYXRvcjIgPSBfaXNBcnJheTIgPyBfaXRlcmF0b3IyIDogX2l0ZXJhdG9yMltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICBpZiAoX2lzQXJyYXkyKSB7XG4gICAgICAgIGlmIChfaTIgPj0gX2l0ZXJhdG9yMi5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmMiA9IF9pdGVyYXRvcjJbX2kyKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kyID0gX2l0ZXJhdG9yMi5uZXh0KCk7XG4gICAgICAgIGlmIChfaTIuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYyID0gX2kyLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwbHVnaW4gPSBfcmVmMjtcbiAgICAgIGNvbnN0IGdlbmVyYXRvck92ZXJyaWRlID0gcGx1Z2luLmdlbmVyYXRvck92ZXJyaWRlO1xuXG4gICAgICBpZiAoZ2VuZXJhdG9yT3ZlcnJpZGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2VuZXJhdG9yT3ZlcnJpZGUoYXN0LCBvcHRzLmdlbmVyYXRvck9wdHMsIGNvZGUsIF9nZW5lcmF0b3IoKS5kZWZhdWx0KTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgcmVzdWx0O1xuXG4gIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJlc3VsdCA9ICgwLCBfZ2VuZXJhdG9yKCkuZGVmYXVsdCkoYXN0LCBvcHRzLmdlbmVyYXRvck9wdHMsIGNvZGUpO1xuICB9IGVsc2UgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0c1swXTtcblxuICAgIGlmICh0eXBlb2YgcmVzdWx0LnRoZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgYXBwZWFyIHRvIGJlIHVzaW5nIGFuIGFzeW5jIHBhcnNlciBwbHVnaW4sIGAgKyBgd2hpY2ggeW91ciBjdXJyZW50IHZlcnNpb24gb2YgQmFiZWwgZG9lcyBub3Qgc3VwcG9ydC4gYCArIGBJZiB5b3UncmUgdXNpbmcgYSBwdWJsaXNoZWQgcGx1Z2luLCBgICsgYHlvdSBtYXkgbmVlZCB0byB1cGdyYWRlIHlvdXIgQGJhYmVsL2NvcmUgdmVyc2lvbi5gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIG92ZXJyaWRlIGNvZGVnZW4uXCIpO1xuICB9XG5cbiAgbGV0IF9yZXN1bHQgPSByZXN1bHQsXG4gICAgICBvdXRwdXRDb2RlID0gX3Jlc3VsdC5jb2RlLFxuICAgICAgb3V0cHV0TWFwID0gX3Jlc3VsdC5tYXA7XG5cbiAgaWYgKHNoZWJhbmcpIHtcbiAgICBvdXRwdXRDb2RlID0gYCR7c2hlYmFuZ31cXG4ke291dHB1dENvZGV9YDtcbiAgfVxuXG4gIGlmIChvdXRwdXRNYXAgJiYgaW5wdXRNYXApIHtcbiAgICBvdXRwdXRNYXAgPSAoMCwgX21lcmdlTWFwLmRlZmF1bHQpKGlucHV0TWFwLnRvT2JqZWN0KCksIG91dHB1dE1hcCk7XG4gIH1cblxuICBpZiAob3B0cy5zb3VyY2VNYXBzID09PSBcImlubGluZVwiIHx8IG9wdHMuc291cmNlTWFwcyA9PT0gXCJib3RoXCIpIHtcbiAgICBvdXRwdXRDb2RlICs9IFwiXFxuXCIgKyBfY29udmVydFNvdXJjZU1hcCgpLmRlZmF1bHQuZnJvbU9iamVjdChvdXRwdXRNYXApLnRvQ29tbWVudCgpO1xuICB9XG5cbiAgaWYgKG9wdHMuc291cmNlTWFwcyA9PT0gXCJpbmxpbmVcIikge1xuICAgIG91dHB1dE1hcCA9IG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG91dHB1dENvZGUsXG4gICAgb3V0cHV0TWFwXG4gIH07XG59Il19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/merge-map.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/merge-map.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/merge-map.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file/merge-map.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transformation/file",
        "sourceFileName": "merge-map.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = mergeSourceMap;\n\nfunction _sourceMap() {\n  const data = _interopRequireDefault(require(\"source-map\"));\n\n  _sourceMap = function _sourceMap() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction mergeSourceMap(inputMap, map) {\n  const input = buildMappingData(inputMap);\n  const output = buildMappingData(map);\n  const mergedGenerator = new (_sourceMap().default.SourceMapGenerator)();\n\n  for (var _iterator = input.sources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref2 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref2 = _i.value;\n    }\n\n    const _ref = _ref2;\n    const source = _ref.source;\n\n    if (typeof source.content === \"string\") {\n      mergedGenerator.setSourceContent(source.path, source.content);\n    }\n  }\n\n  if (output.sources.length === 1) {\n    const defaultSource = output.sources[0];\n    const insertedMappings = new Map();\n    eachInputGeneratedRange(input, (generated, original, source) => {\n      eachOverlappingGeneratedOutputRange(defaultSource, generated, item => {\n        const key = makeMappingKey(item);\n        if (insertedMappings.has(key)) return;\n        insertedMappings.set(key, item);\n        mergedGenerator.addMapping({\n          source: source.path,\n          original: {\n            line: original.line,\n            column: original.columnStart },\n\n          generated: {\n            line: item.line,\n            column: item.columnStart },\n\n          name: original.name });\n\n      });\n    });\n\n    for (var _iterator2 = insertedMappings.values(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref3 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref3 = _i2.value;\n      }\n\n      const item = _ref3;\n\n      if (item.columnEnd === Infinity) {\n        continue;\n      }\n\n      const clearItem = {\n        line: item.line,\n        columnStart: item.columnEnd };\n\n      const key = makeMappingKey(clearItem);\n\n      if (insertedMappings.has(key)) {\n        continue;\n      }\n\n      mergedGenerator.addMapping({\n        generated: {\n          line: clearItem.line,\n          column: clearItem.columnStart } });\n\n\n    }\n  }\n\n  const result = mergedGenerator.toJSON();\n\n  if (typeof input.sourceRoot === \"string\") {\n    result.sourceRoot = input.sourceRoot;\n  }\n\n  return result;\n}\n\nfunction makeMappingKey(item) {\n  return JSON.stringify([item.line, item.columnStart]);\n}\n\nfunction eachOverlappingGeneratedOutputRange(outputFile, inputGeneratedRange, callback) {\n  const overlappingOriginal = filterApplicableOriginalRanges(outputFile, inputGeneratedRange);\n\n  for (var _iterator3 = overlappingOriginal, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n    var _ref5;\n\n    if (_isArray3) {\n      if (_i3 >= _iterator3.length) break;\n      _ref5 = _iterator3[_i3++];\n    } else {\n      _i3 = _iterator3.next();\n      if (_i3.done) break;\n      _ref5 = _i3.value;\n    }\n\n    const _ref4 = _ref5;\n    const generated = _ref4.generated;\n\n    for (var _iterator4 = generated, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref6;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref6 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref6 = _i4.value;\n      }\n\n      const item = _ref6;\n      callback(item);\n    }\n  }\n}\n\nfunction filterApplicableOriginalRanges({\n  mappings },\n{\n  line,\n  columnStart,\n  columnEnd })\n{\n  return filterSortedArray(mappings, ({\n    original: outOriginal }) =>\n  {\n    if (line > outOriginal.line) return -1;\n    if (line < outOriginal.line) return 1;\n    if (columnStart >= outOriginal.columnEnd) return -1;\n    if (columnEnd <= outOriginal.columnStart) return 1;\n    return 0;\n  });\n}\n\nfunction eachInputGeneratedRange(map, callback) {\n  for (var _iterator5 = map.sources, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n    var _ref8;\n\n    if (_isArray5) {\n      if (_i5 >= _iterator5.length) break;\n      _ref8 = _iterator5[_i5++];\n    } else {\n      _i5 = _iterator5.next();\n      if (_i5.done) break;\n      _ref8 = _i5.value;\n    }\n\n    const _ref7 = _ref8;\n    const source = _ref7.source,\n    mappings = _ref7.mappings;\n\n    for (var _iterator6 = mappings, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n      var _ref10;\n\n      if (_isArray6) {\n        if (_i6 >= _iterator6.length) break;\n        _ref10 = _iterator6[_i6++];\n      } else {\n        _i6 = _iterator6.next();\n        if (_i6.done) break;\n        _ref10 = _i6.value;\n      }\n\n      const _ref9 = _ref10;\n      const original = _ref9.original,\n      generated = _ref9.generated;\n\n      for (var _iterator7 = generated, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\n        var _ref11;\n\n        if (_isArray7) {\n          if (_i7 >= _iterator7.length) break;\n          _ref11 = _iterator7[_i7++];\n        } else {\n          _i7 = _iterator7.next();\n          if (_i7.done) break;\n          _ref11 = _i7.value;\n        }\n\n        const item = _ref11;\n        callback(item, original, source);\n      }\n    }\n  }\n}\n\nfunction buildMappingData(map) {\n  const consumer = new (_sourceMap().default.SourceMapConsumer)(Object.assign({}, map, {\n    sourceRoot: null }));\n\n  const sources = new Map();\n  const mappings = new Map();\n  let last = null;\n  consumer.computeColumnSpans();\n  consumer.eachMapping(m => {\n    if (m.originalLine === null) return;\n    let source = sources.get(m.source);\n\n    if (!source) {\n      source = {\n        path: m.source,\n        content: consumer.sourceContentFor(m.source, true) };\n\n      sources.set(m.source, source);\n    }\n\n    let sourceData = mappings.get(source);\n\n    if (!sourceData) {\n      sourceData = {\n        source,\n        mappings: [] };\n\n      mappings.set(source, sourceData);\n    }\n\n    const obj = {\n      line: m.originalLine,\n      columnStart: m.originalColumn,\n      columnEnd: Infinity,\n      name: m.name };\n\n\n    if (last && last.source === source && last.mapping.line === m.originalLine) {\n      last.mapping.columnEnd = m.originalColumn;\n    }\n\n    last = {\n      source,\n      mapping: obj };\n\n    sourceData.mappings.push({\n      original: obj,\n      generated: consumer.allGeneratedPositionsFor({\n        source: m.source,\n        line: m.originalLine,\n        column: m.originalColumn }).\n      map(item => ({\n        line: item.line,\n        columnStart: item.column,\n        columnEnd: item.lastColumn + 1 })) });\n\n\n  }, null, _sourceMap().default.SourceMapConsumer.ORIGINAL_ORDER);\n  return {\n    file: map.file,\n    sourceRoot: map.sourceRoot,\n    sources: Array.from(mappings.values()) };\n\n}\n\nfunction findInsertionLocation(array, callback) {\n  let left = 0;\n  let right = array.length;\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    const item = array[mid];\n    const result = callback(item);\n\n    if (result === 0) {\n      left = mid;\n      break;\n    }\n\n    if (result >= 0) {\n      right = mid;\n    } else {\n      left = mid + 1;\n    }\n  }\n\n  let i = left;\n\n  if (i < array.length) {\n    while (i > 0 && callback(array[i]) >= 0) {\n      i--;\n    }\n\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction filterSortedArray(array, callback) {\n  const start = findInsertionLocation(array, callback);\n  const results = [];\n\n  for (let i = start; i < array.length && callback(array[i]) === 0; i++) {\n    results.push(array[i]);\n  }\n\n  return results;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-sync.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-sync.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-sync.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-sync.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
        "sourceFileName": "transform-sync.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = transformSync;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _transformation = require(\"./transformation\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction transformSync(code, opts) {\n  const config = (0, _config.default)(opts);\n  if (config === null) return null;\n  return (0, _transformation.runSync)(config, code);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybS1zeW5jLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInRyYW5zZm9ybVN5bmMiLCJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdHJhbnNmb3JtYXRpb24iLCJvYmoiLCJfX2VzTW9kdWxlIiwiY29kZSIsIm9wdHMiLCJjb25maWciLCJydW5TeW5jIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU8sSUFEb0MsRUFBN0M7O0FBR0FELFFBQVFFLE9BQVIsR0FBa0JDLGFBQWxCOztBQUVBLElBQUlDLFVBQVVDLHVCQUF1QkMsUUFBUSxVQUFSLENBQXZCLENBQWQ7O0FBRUEsSUFBSUMsa0JBQWtCRCxRQUFRLGtCQUFSLENBQXRCOztBQUVBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVOLFNBQVNNLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNMLGFBQVQsQ0FBdUJPLElBQXZCLEVBQTZCQyxJQUE3QixFQUFtQztBQUNqQyxRQUFNQyxTQUFTLENBQUMsR0FBR1IsUUFBUUYsT0FBWixFQUFxQlMsSUFBckIsQ0FBZjtBQUNBLE1BQUlDLFdBQVcsSUFBZixFQUFxQixPQUFPLElBQVA7QUFDckIsU0FBTyxDQUFDLEdBQUdMLGdCQUFnQk0sT0FBcEIsRUFBNkJELE1BQTdCLEVBQXFDRixJQUFyQyxDQUFQO0FBQ0QiLCJzb3VyY2VSb290IjoiL1VzZXJzL3N0ZXZlbnZhbmR1cm0vRGV2ZWxvcGVyL2VpZ2VuLXJlYWN0LW5hdGl2ZS1BcmR1aW5vL2FwcC9ub2RlX21vZHVsZXMvbWV0cm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9jb3JlL2xpYiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdHJhbnNmb3JtU3luYztcblxudmFyIF9jb25maWcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbmZpZ1wiKSk7XG5cbnZhciBfdHJhbnNmb3JtYXRpb24gPSByZXF1aXJlKFwiLi90cmFuc2Zvcm1hdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3luYyhjb2RlLCBvcHRzKSB7XG4gIGNvbnN0IGNvbmZpZyA9ICgwLCBfY29uZmlnLmRlZmF1bHQpKG9wdHMpO1xuICBpZiAoY29uZmlnID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuICgwLCBfdHJhbnNmb3JtYXRpb24ucnVuU3luYykoY29uZmlnLCBjb2RlKTtcbn0iXX0=",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-file.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-file.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-file.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-file.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
        "sourceFileName": "transform-file.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = void 0;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _transformation = require(\"./transformation\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nvar transformFile = function transformFile(filename, opts, callback) {\n  let options;\n\n  if (typeof opts === \"function\") {\n    callback = opts;\n    opts = undefined;\n  }\n\n  if (opts == null) {\n    options = {\n      filename };\n\n  } else if (opts && typeof opts === \"object\") {\n    options = Object.assign({}, opts, {\n      filename });\n\n  }\n\n  process.nextTick(() => {\n    let cfg;\n\n    try {\n      cfg = (0, _config.default)(options);\n      if (cfg === null) return callback(null, null);\n    } catch (err) {\n      return callback(err);\n    }\n\n    const config = cfg;\n\n    _fs().default.readFile(filename, \"utf8\", function (err, code) {\n      if (err) return callback(err, null);\n      (0, _transformation.runAsync)(config, code, null, callback);\n    });\n  });\n};\n\nexports.default = transformFile;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybS1maWxlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9mcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb25maWciLCJfdHJhbnNmb3JtYXRpb24iLCJvYmoiLCJfX2VzTW9kdWxlIiwidHJhbnNmb3JtRmlsZSIsImZpbGVuYW1lIiwib3B0cyIsImNhbGxiYWNrIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsImFzc2lnbiIsInByb2Nlc3MiLCJuZXh0VGljayIsImNmZyIsImVyciIsImNvbmZpZyIsInJlYWRGaWxlIiwiY29kZSIsInJ1bkFzeW5jIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU8sSUFEb0MsRUFBN0M7O0FBR0FELFFBQVFFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxTQUFTQyxHQUFULEdBQWU7QUFDYixRQUFNQyxPQUFPQyx1QkFBdUJDLFFBQVEsSUFBUixDQUF2QixDQUFiOztBQUVBSCxRQUFNLFNBQVNBLEdBQVQsR0FBZTtBQUNuQixXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsSUFBSUcsVUFBVUYsdUJBQXVCQyxRQUFRLFVBQVIsQ0FBdkIsQ0FBZDs7QUFFQSxJQUFJRSxrQkFBa0JGLFFBQVEsa0JBQVIsQ0FBdEI7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NJLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRVAsU0FBU08sR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsSUFBSUUsZ0JBQWdCLFNBQVNBLGFBQVQsQ0FBdUJDLFFBQXZCLEVBQWlDQyxJQUFqQyxFQUF1Q0MsUUFBdkMsRUFBaUQ7QUFDbkUsTUFBSUMsT0FBSjs7QUFFQSxNQUFJLE9BQU9GLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDOUJDLGVBQVdELElBQVg7QUFDQUEsV0FBT0csU0FBUDtBQUNEOztBQUVELE1BQUlILFFBQVEsSUFBWixFQUFrQjtBQUNoQkUsY0FBVTtBQUNSSCxjQURRLEVBQVY7O0FBR0QsR0FKRCxNQUlPLElBQUlDLFFBQVEsT0FBT0EsSUFBUCxLQUFnQixRQUE1QixFQUFzQztBQUMzQ0UsY0FBVWpCLE9BQU9tQixNQUFQLENBQWMsRUFBZCxFQUFrQkosSUFBbEIsRUFBd0I7QUFDaENELGNBRGdDLEVBQXhCLENBQVY7O0FBR0Q7O0FBRURNLFVBQVFDLFFBQVIsQ0FBaUIsTUFBTTtBQUNyQixRQUFJQyxHQUFKOztBQUVBLFFBQUk7QUFDRkEsWUFBTSxDQUFDLEdBQUdiLFFBQVFMLE9BQVosRUFBcUJhLE9BQXJCLENBQU47QUFDQSxVQUFJSyxRQUFRLElBQVosRUFBa0IsT0FBT04sU0FBUyxJQUFULEVBQWUsSUFBZixDQUFQO0FBQ25CLEtBSEQsQ0FHRSxPQUFPTyxHQUFQLEVBQVk7QUFDWixhQUFPUCxTQUFTTyxHQUFULENBQVA7QUFDRDs7QUFFRCxVQUFNQyxTQUFTRixHQUFmOztBQUVBakIsVUFBTUQsT0FBTixDQUFjcUIsUUFBZCxDQUF1QlgsUUFBdkIsRUFBaUMsTUFBakMsRUFBeUMsVUFBVVMsR0FBVixFQUFlRyxJQUFmLEVBQXFCO0FBQzVELFVBQUlILEdBQUosRUFBUyxPQUFPUCxTQUFTTyxHQUFULEVBQWMsSUFBZCxDQUFQO0FBQ1QsT0FBQyxHQUFHYixnQkFBZ0JpQixRQUFwQixFQUE4QkgsTUFBOUIsRUFBc0NFLElBQXRDLEVBQTRDLElBQTVDLEVBQWtEVixRQUFsRDtBQUNELEtBSEQ7QUFJRCxHQWhCRDtBQWlCRCxDQW5DRDs7QUFxQ0FkLFFBQVFFLE9BQVIsR0FBa0JTLGFBQWxCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX2ZzKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZnNcIikpO1xuXG4gIF9mcyA9IGZ1bmN0aW9uIF9mcygpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxudmFyIF9jb25maWcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbmZpZ1wiKSk7XG5cbnZhciBfdHJhbnNmb3JtYXRpb24gPSByZXF1aXJlKFwiLi90cmFuc2Zvcm1hdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHRyYW5zZm9ybUZpbGUgPSBmdW5jdGlvbiB0cmFuc2Zvcm1GaWxlKGZpbGVuYW1lLCBvcHRzLCBjYWxsYmFjaykge1xuICBsZXQgb3B0aW9ucztcblxuICBpZiAodHlwZW9mIG9wdHMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKG9wdHMgPT0gbnVsbCkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBmaWxlbmFtZVxuICAgIH07XG4gIH0gZWxzZSBpZiAob3B0cyAmJiB0eXBlb2Ygb3B0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzLCB7XG4gICAgICBmaWxlbmFtZVxuICAgIH0pO1xuICB9XG5cbiAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgbGV0IGNmZztcblxuICAgIHRyeSB7XG4gICAgICBjZmcgPSAoMCwgX2NvbmZpZy5kZWZhdWx0KShvcHRpb25zKTtcbiAgICAgIGlmIChjZmcgPT09IG51bGwpIHJldHVybiBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IGNmZztcblxuICAgIF9mcygpLmRlZmF1bHQucmVhZEZpbGUoZmlsZW5hbWUsIFwidXRmOFwiLCBmdW5jdGlvbiAoZXJyLCBjb2RlKSB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICgwLCBfdHJhbnNmb3JtYXRpb24ucnVuQXN5bmMpKGNvbmZpZywgY29kZSwgbnVsbCwgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHRyYW5zZm9ybUZpbGU7Il19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-file-sync.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-file-sync.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-file-sync.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-file-sync.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
        "sourceFileName": "transform-file-sync.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = transformFileSync;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _transformation = require(\"./transformation\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction transformFileSync(filename, opts) {\n  let options;\n\n  if (opts == null) {\n    options = {\n      filename };\n\n  } else if (opts && typeof opts === \"object\") {\n    options = Object.assign({}, opts, {\n      filename });\n\n  }\n\n  const config = (0, _config.default)(options);\n  if (config === null) return null;\n  return (0, _transformation.runSync)(config, _fs().default.readFileSync(filename, \"utf8\"));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybS1maWxlLXN5bmMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwidHJhbnNmb3JtRmlsZVN5bmMiLCJfZnMiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uZmlnIiwiX3RyYW5zZm9ybWF0aW9uIiwib2JqIiwiX19lc01vZHVsZSIsImZpbGVuYW1lIiwib3B0cyIsIm9wdGlvbnMiLCJhc3NpZ24iLCJjb25maWciLCJydW5TeW5jIiwicmVhZEZpbGVTeW5jIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU8sSUFEb0MsRUFBN0M7O0FBR0FELFFBQVFFLE9BQVIsR0FBa0JDLGlCQUFsQjs7QUFFQSxTQUFTQyxHQUFULEdBQWU7QUFDYixRQUFNQyxPQUFPQyx1QkFBdUJDLFFBQVEsSUFBUixDQUF2QixDQUFiOztBQUVBSCxRQUFNLFNBQVNBLEdBQVQsR0FBZTtBQUNuQixXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsSUFBSUcsVUFBVUYsdUJBQXVCQyxRQUFRLFVBQVIsQ0FBdkIsQ0FBZDs7QUFFQSxJQUFJRSxrQkFBa0JGLFFBQVEsa0JBQVIsQ0FBdEI7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NJLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRVIsU0FBU1EsR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsU0FBU1AsaUJBQVQsQ0FBMkJTLFFBQTNCLEVBQXFDQyxJQUFyQyxFQUEyQztBQUN6QyxNQUFJQyxPQUFKOztBQUVBLE1BQUlELFFBQVEsSUFBWixFQUFrQjtBQUNoQkMsY0FBVTtBQUNSRixjQURRLEVBQVY7O0FBR0QsR0FKRCxNQUlPLElBQUlDLFFBQVEsT0FBT0EsSUFBUCxLQUFnQixRQUE1QixFQUFzQztBQUMzQ0MsY0FBVWhCLE9BQU9pQixNQUFQLENBQWMsRUFBZCxFQUFrQkYsSUFBbEIsRUFBd0I7QUFDaENELGNBRGdDLEVBQXhCLENBQVY7O0FBR0Q7O0FBRUQsUUFBTUksU0FBUyxDQUFDLEdBQUdSLFFBQVFOLE9BQVosRUFBcUJZLE9BQXJCLENBQWY7QUFDQSxNQUFJRSxXQUFXLElBQWYsRUFBcUIsT0FBTyxJQUFQO0FBQ3JCLFNBQU8sQ0FBQyxHQUFHUCxnQkFBZ0JRLE9BQXBCLEVBQTZCRCxNQUE3QixFQUFxQ1osTUFBTUYsT0FBTixDQUFjZ0IsWUFBZCxDQUEyQk4sUUFBM0IsRUFBcUMsTUFBckMsQ0FBckMsQ0FBUDtBQUNEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRyYW5zZm9ybUZpbGVTeW5jO1xuXG5mdW5jdGlvbiBfZnMoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJmc1wiKSk7XG5cbiAgX2ZzID0gZnVuY3Rpb24gX2ZzKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG52YXIgX2NvbmZpZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29uZmlnXCIpKTtcblxudmFyIF90cmFuc2Zvcm1hdGlvbiA9IHJlcXVpcmUoXCIuL3RyYW5zZm9ybWF0aW9uXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1GaWxlU3luYyhmaWxlbmFtZSwgb3B0cykge1xuICBsZXQgb3B0aW9ucztcblxuICBpZiAob3B0cyA9PSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGZpbGVuYW1lXG4gICAgfTtcbiAgfSBlbHNlIGlmIChvcHRzICYmIHR5cGVvZiBvcHRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMsIHtcbiAgICAgIGZpbGVuYW1lXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBjb25maWcgPSAoMCwgX2NvbmZpZy5kZWZhdWx0KShvcHRpb25zKTtcbiAgaWYgKGNvbmZpZyA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiAoMCwgX3RyYW5zZm9ybWF0aW9uLnJ1blN5bmMpKGNvbmZpZywgX2ZzKCkuZGVmYXVsdC5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsIFwidXRmOFwiKSk7XG59Il19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-ast.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-ast.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-ast.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-ast.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
        "sourceFileName": "transform-ast.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = void 0;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _transformation = require(\"./transformation\");\n\nvar _transformAstSync = _interopRequireDefault(require(\"./transform-ast-sync\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nvar transformFromAst = function transformFromAst(ast, code, opts, callback) {\n  if (typeof opts === \"function\") {\n    opts = undefined;\n    callback = opts;\n  }\n\n  if (callback === undefined) return (0, _transformAstSync.default)(ast, code, opts);\n  const cb = callback;\n  process.nextTick(() => {\n    let cfg;\n\n    try {\n      cfg = (0, _config.default)(opts);\n      if (cfg === null) return cb(null, null);\n    } catch (err) {\n      return cb(err);\n    }\n\n    if (!ast) return cb(new Error(\"No AST given\"));\n    (0, _transformation.runAsync)(cfg, code, ast, cb);\n  });\n};\n\nexports.default = transformFromAst;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybS1hc3QuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2NvbmZpZyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3RyYW5zZm9ybWF0aW9uIiwiX3RyYW5zZm9ybUFzdFN5bmMiLCJvYmoiLCJfX2VzTW9kdWxlIiwidHJhbnNmb3JtRnJvbUFzdCIsImFzdCIsImNvZGUiLCJvcHRzIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJjYiIsInByb2Nlc3MiLCJuZXh0VGljayIsImNmZyIsImVyciIsIkVycm9yIiwicnVuQXN5bmMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsT0FBUixHQUFrQixLQUFLLENBQXZCOztBQUVBLElBQUlDLFVBQVVDLHVCQUF1QkMsUUFBUSxVQUFSLENBQXZCLENBQWQ7O0FBRUEsSUFBSUMsa0JBQWtCRCxRQUFRLGtCQUFSLENBQXRCOztBQUVBLElBQUlFLG9CQUFvQkgsdUJBQXVCQyxRQUFRLHNCQUFSLENBQXZCLENBQXhCOztBQUVBLFNBQVNELHNCQUFULENBQWdDSSxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVOLFNBQVNNLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLElBQUlFLG1CQUFtQixTQUFTQSxnQkFBVCxDQUEwQkMsR0FBMUIsRUFBK0JDLElBQS9CLEVBQXFDQyxJQUFyQyxFQUEyQ0MsUUFBM0MsRUFBcUQ7QUFDMUUsTUFBSSxPQUFPRCxJQUFQLEtBQWdCLFVBQXBCLEVBQWdDO0FBQzlCQSxXQUFPRSxTQUFQO0FBQ0FELGVBQVdELElBQVg7QUFDRDs7QUFFRCxNQUFJQyxhQUFhQyxTQUFqQixFQUE0QixPQUFPLENBQUMsR0FBR1Isa0JBQWtCTCxPQUF0QixFQUErQlMsR0FBL0IsRUFBb0NDLElBQXBDLEVBQTBDQyxJQUExQyxDQUFQO0FBQzVCLFFBQU1HLEtBQUtGLFFBQVg7QUFDQUcsVUFBUUMsUUFBUixDQUFpQixNQUFNO0FBQ3JCLFFBQUlDLEdBQUo7O0FBRUEsUUFBSTtBQUNGQSxZQUFNLENBQUMsR0FBR2hCLFFBQVFELE9BQVosRUFBcUJXLElBQXJCLENBQU47QUFDQSxVQUFJTSxRQUFRLElBQVosRUFBa0IsT0FBT0gsR0FBRyxJQUFILEVBQVMsSUFBVCxDQUFQO0FBQ25CLEtBSEQsQ0FHRSxPQUFPSSxHQUFQLEVBQVk7QUFDWixhQUFPSixHQUFHSSxHQUFILENBQVA7QUFDRDs7QUFFRCxRQUFJLENBQUNULEdBQUwsRUFBVSxPQUFPSyxHQUFHLElBQUlLLEtBQUosQ0FBVSxjQUFWLENBQUgsQ0FBUDtBQUNWLEtBQUMsR0FBR2YsZ0JBQWdCZ0IsUUFBcEIsRUFBOEJILEdBQTlCLEVBQW1DUCxJQUFuQyxFQUF5Q0QsR0FBekMsRUFBOENLLEVBQTlDO0FBQ0QsR0FaRDtBQWFELENBckJEOztBQXVCQWhCLFFBQVFFLE9BQVIsR0FBa0JRLGdCQUFsQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvQGJhYmVsL2NvcmUvbGliIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY29uZmlnID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb25maWdcIikpO1xuXG52YXIgX3RyYW5zZm9ybWF0aW9uID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtYXRpb25cIik7XG5cbnZhciBfdHJhbnNmb3JtQXN0U3luYyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdHJhbnNmb3JtLWFzdC1zeW5jXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHRyYW5zZm9ybUZyb21Bc3QgPSBmdW5jdGlvbiB0cmFuc2Zvcm1Gcm9tQXN0KGFzdCwgY29kZSwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBvcHRzID0gdW5kZWZpbmVkO1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgfVxuXG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSByZXR1cm4gKDAsIF90cmFuc2Zvcm1Bc3RTeW5jLmRlZmF1bHQpKGFzdCwgY29kZSwgb3B0cyk7XG4gIGNvbnN0IGNiID0gY2FsbGJhY2s7XG4gIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgIGxldCBjZmc7XG5cbiAgICB0cnkge1xuICAgICAgY2ZnID0gKDAsIF9jb25maWcuZGVmYXVsdCkob3B0cyk7XG4gICAgICBpZiAoY2ZnID09PSBudWxsKSByZXR1cm4gY2IobnVsbCwgbnVsbCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICB9XG5cbiAgICBpZiAoIWFzdCkgcmV0dXJuIGNiKG5ldyBFcnJvcihcIk5vIEFTVCBnaXZlblwiKSk7XG4gICAgKDAsIF90cmFuc2Zvcm1hdGlvbi5ydW5Bc3luYykoY2ZnLCBjb2RlLCBhc3QsIGNiKTtcbiAgfSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2Zvcm1Gcm9tQXN0OyJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-ast-sync.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-ast-sync.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-ast-sync.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/transform-ast-sync.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
        "sourceFileName": "transform-ast-sync.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = transformFromAstSync;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _transformation = require(\"./transformation\");\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction transformFromAstSync(ast, code, opts) {\n  const config = (0, _config.default)(opts);\n  if (config === null) return null;\n  if (!ast) throw new Error(\"No AST given\");\n  return (0, _transformation.runSync)(config, code, ast);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybS1hc3Qtc3luYy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJ0cmFuc2Zvcm1Gcm9tQXN0U3luYyIsIl9jb25maWciLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90cmFuc2Zvcm1hdGlvbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJhc3QiLCJjb2RlIiwib3B0cyIsImNvbmZpZyIsIkVycm9yIiwicnVuU3luYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxTQUFPLElBRG9DLEVBQTdDOztBQUdBRCxRQUFRRSxPQUFSLEdBQWtCQyxvQkFBbEI7O0FBRUEsSUFBSUMsVUFBVUMsdUJBQXVCQyxRQUFRLFVBQVIsQ0FBdkIsQ0FBZDs7QUFFQSxJQUFJQyxrQkFBa0JELFFBQVEsa0JBQVIsQ0FBdEI7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRU4sU0FBU00sR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsU0FBU0wsb0JBQVQsQ0FBOEJPLEdBQTlCLEVBQW1DQyxJQUFuQyxFQUF5Q0MsSUFBekMsRUFBK0M7QUFDN0MsUUFBTUMsU0FBUyxDQUFDLEdBQUdULFFBQVFGLE9BQVosRUFBcUJVLElBQXJCLENBQWY7QUFDQSxNQUFJQyxXQUFXLElBQWYsRUFBcUIsT0FBTyxJQUFQO0FBQ3JCLE1BQUksQ0FBQ0gsR0FBTCxFQUFVLE1BQU0sSUFBSUksS0FBSixDQUFVLGNBQVYsQ0FBTjtBQUNWLFNBQU8sQ0FBQyxHQUFHUCxnQkFBZ0JRLE9BQXBCLEVBQTZCRixNQUE3QixFQUFxQ0YsSUFBckMsRUFBMkNELEdBQTNDLENBQVA7QUFDRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3RldmVudmFuZHVybS9EZXZlbG9wZXIvZWlnZW4tcmVhY3QtbmF0aXZlLUFyZHVpbm8vYXBwL25vZGVfbW9kdWxlcy9tZXRyby9ub2RlX21vZHVsZXMvQGJhYmVsL2NvcmUvbGliIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2Zvcm1Gcm9tQXN0U3luYztcblxudmFyIF9jb25maWcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbmZpZ1wiKSk7XG5cbnZhciBfdHJhbnNmb3JtYXRpb24gPSByZXF1aXJlKFwiLi90cmFuc2Zvcm1hdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRnJvbUFzdFN5bmMoYXN0LCBjb2RlLCBvcHRzKSB7XG4gIGNvbnN0IGNvbmZpZyA9ICgwLCBfY29uZmlnLmRlZmF1bHQpKG9wdHMpO1xuICBpZiAoY29uZmlnID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgaWYgKCFhc3QpIHRocm93IG5ldyBFcnJvcihcIk5vIEFTVCBnaXZlblwiKTtcbiAgcmV0dXJuICgwLCBfdHJhbnNmb3JtYXRpb24ucnVuU3luYykoY29uZmlnLCBjb2RlLCBhc3QpO1xufSJdfQ==",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/parse.js\",\"configFile\":false,\"envName\":\"test\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/parse.js",
      "configFile": false,
      "envName": "test",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/parse.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib/parse.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/lib",
        "sourceFileName": "parse.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.default = parse;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _normalizeFile = _interopRequireDefault(require(\"./transformation/normalize-file\"));\n\nvar _normalizeOpts = _interopRequireDefault(require(\"./transformation/normalize-opts\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction parse(code, opts) {\n  const config = (0, _config.default)(opts);\n\n  if (config === null) {\n    return null;\n  }\n\n  const file = (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code);\n  return file.ast;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInBhcnNlIiwiX2NvbmZpZyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX25vcm1hbGl6ZUZpbGUiLCJfbm9ybWFsaXplT3B0cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjb2RlIiwib3B0cyIsImNvbmZpZyIsImZpbGUiLCJwYXNzZXMiLCJhc3QiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTyxJQURvQyxFQUE3Qzs7QUFHQUQsUUFBUUUsT0FBUixHQUFrQkMsS0FBbEI7O0FBRUEsSUFBSUMsVUFBVUMsdUJBQXVCQyxRQUFRLFVBQVIsQ0FBdkIsQ0FBZDs7QUFFQSxJQUFJQyxpQkFBaUJGLHVCQUF1QkMsUUFBUSxpQ0FBUixDQUF2QixDQUFyQjs7QUFFQSxJQUFJRSxpQkFBaUJILHVCQUF1QkMsUUFBUSxpQ0FBUixDQUF2QixDQUFyQjs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0ksR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFUCxTQUFTTyxHQUFYLEVBQXJDLENBQXdEOztBQUUvRixTQUFTTixLQUFULENBQWVRLElBQWYsRUFBcUJDLElBQXJCLEVBQTJCO0FBQ3pCLFFBQU1DLFNBQVMsQ0FBQyxHQUFHVCxRQUFRRixPQUFaLEVBQXFCVSxJQUFyQixDQUFmOztBQUVBLE1BQUlDLFdBQVcsSUFBZixFQUFxQjtBQUNuQixXQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNQyxPQUFPLENBQUMsR0FBR1AsZUFBZUwsT0FBbkIsRUFBNEJXLE9BQU9FLE1BQW5DLEVBQTJDLENBQUMsR0FBR1AsZUFBZU4sT0FBbkIsRUFBNEJXLE1BQTVCLENBQTNDLEVBQWdGRixJQUFoRixDQUFiO0FBQ0EsU0FBT0csS0FBS0UsR0FBWjtBQUNEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zdGV2ZW52YW5kdXJtL0RldmVsb3Blci9laWdlbi1yZWFjdC1uYXRpdmUtQXJkdWluby9hcHAvbm9kZV9tb2R1bGVzL21ldHJvL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBhcnNlO1xuXG52YXIgX2NvbmZpZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29uZmlnXCIpKTtcblxudmFyIF9ub3JtYWxpemVGaWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90cmFuc2Zvcm1hdGlvbi9ub3JtYWxpemUtZmlsZVwiKSk7XG5cbnZhciBfbm9ybWFsaXplT3B0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdHJhbnNmb3JtYXRpb24vbm9ybWFsaXplLW9wdHNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBwYXJzZShjb2RlLCBvcHRzKSB7XG4gIGNvbnN0IGNvbmZpZyA9ICgwLCBfY29uZmlnLmRlZmF1bHQpKG9wdHMpO1xuXG4gIGlmIChjb25maWcgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGZpbGUgPSAoMCwgX25vcm1hbGl6ZUZpbGUuZGVmYXVsdCkoY29uZmlnLnBhc3NlcywgKDAsIF9ub3JtYWxpemVPcHRzLmRlZmF1bHQpKGNvbmZpZyksIGNvZGUpO1xuICByZXR1cm4gZmlsZS5hc3Q7XG59Il19",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528221652
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/json5/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/json5/lib/json5.js\",\"configFile\":false,\"envName\":\"development\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:development": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/json5/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/json5/lib/json5.js",
      "configFile": false,
      "envName": "development",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/json5/lib/json5.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/json5/lib/json5.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/@babel/core/node_modules/json5/lib",
        "sourceFileName": "json5.js"
      }
    },
    "ast": null,
    "code": "\"use strict\"; // json5.js\n// Modern JSON. See README.md for details.\n//\n// This file is based directly off of Douglas Crockford's json_parse.js:\n// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js\n\nvar JSON5 = typeof exports === 'object' ? exports : {};\n\nJSON5.parse = function () {\n  \"use strict\";\n\n  // This is a function that can parse a JSON5 text, producing a JavaScript\n  // data structure. It is a simple, recursive descent parser. It does not use\n  // eval or regular expressions, so it can be used as a model for implementing\n  // a JSON5 parser in other languages.\n\n  // We are defining the function inside of another function to avoid creating\n  // global variables.\n\n  var at, // The index of the current character\n  lineNumber, // The current line number\n  columnNumber, // The current column number\n  ch, // The current character\n  escapee = {\n    \"'\": \"'\",\n    '\"': '\"',\n    '\\\\': '\\\\',\n    '/': '/',\n    '\\n': '', // Replace escaped newlines in strings w/ empty string\n    b: '\\b',\n    f: '\\f',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t' },\n\n  ws = [\n  ' ',\n  '\\t',\n  '\\r',\n  '\\n',\n  '\\v',\n  '\\f',\n  '\\xA0',\n  '\\uFEFF'],\n\n  text,\n\n  renderChar = function (chr) {\n    return chr === '' ? 'EOF' : \"'\" + chr + \"'\";\n  },\n\n  error = function (m) {\n\n    // Call error when something is wrong.\n\n    var error = new SyntaxError();\n    // beginning of message suffix to agree with that provided by Gecko - see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\n    error.message = m + \" at line \" + lineNumber + \" column \" + columnNumber + \" of the JSON5 data. Still to read: \" + JSON.stringify(text.substring(at - 1, at + 19));\n    error.at = at;\n    // These two property names have been chosen to agree with the ones in Gecko, the only popular\n    // environment which seems to supply this info on JSON.parse\n    error.lineNumber = lineNumber;\n    error.columnNumber = columnNumber;\n    throw error;\n  },\n\n  next = function (c) {\n\n    // If a c parameter is provided, verify that it matches the current character.\n\n    if (c && c !== ch) {\n      error(\"Expected \" + renderChar(c) + \" instead of \" + renderChar(ch));\n    }\n\n    // Get the next character. When there are no more characters,\n    // return the empty string.\n\n    ch = text.charAt(at);\n    at++;\n    columnNumber++;\n    if (ch === '\\n' || ch === '\\r' && peek() !== '\\n') {\n      lineNumber++;\n      columnNumber = 0;\n    }\n    return ch;\n  },\n\n  peek = function () {\n\n    // Get the next character without consuming it or\n    // assigning it to the ch varaible.\n\n    return text.charAt(at);\n  },\n\n  identifier = function () {\n\n    // Parse an identifier. Normally, reserved words are disallowed here, but we\n    // only use this for unquoted object keys, where reserved words are allowed,\n    // so we don't check for those here. References:\n    // - http://es5.github.com/#x7.6\n    // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables\n    // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm\n    // TODO Identifiers can have Unicode \"letters\" in them; add support for those.\n\n    var key = ch;\n\n    // Identifiers must start with a letter, _ or $.\n    if (ch !== '_' && ch !== '$' && (\n    ch < 'a' || ch > 'z') && (\n    ch < 'A' || ch > 'Z')) {\n      error(\"Bad identifier as unquoted key\");\n    }\n\n    // Subsequent characters can contain digits.\n    while (next() && (\n    ch === '_' || ch === '$' ||\n    ch >= 'a' && ch <= 'z' ||\n    ch >= 'A' && ch <= 'Z' ||\n    ch >= '0' && ch <= '9')) {\n      key += ch;\n    }\n\n    return key;\n  },\n\n  number = function () {\n\n    // Parse a number value.\n\n    var number,\n    sign = '',\n    string = '',\n    base = 10;\n\n    if (ch === '-' || ch === '+') {\n      sign = ch;\n      next(ch);\n    }\n\n    // support for Infinity (could tweak to allow other words):\n    if (ch === 'I') {\n      number = word();\n      if (typeof number !== 'number' || isNaN(number)) {\n        error('Unexpected word for number');\n      }\n      return sign === '-' ? -number : number;\n    }\n\n    // support for NaN\n    if (ch === 'N') {\n      number = word();\n      if (!isNaN(number)) {\n        error('expected word to be NaN');\n      }\n      // ignore sign as -NaN also is NaN\n      return number;\n    }\n\n    if (ch === '0') {\n      string += ch;\n      next();\n      if (ch === 'x' || ch === 'X') {\n        string += ch;\n        next();\n        base = 16;\n      } else if (ch >= '0' && ch <= '9') {\n        error('Octal literal');\n      }\n    }\n\n    switch (base) {\n      case 10:\n        while (ch >= '0' && ch <= '9') {\n          string += ch;\n          next();\n        }\n        if (ch === '.') {\n          string += '.';\n          while (next() && ch >= '0' && ch <= '9') {\n            string += ch;\n          }\n        }\n        if (ch === 'e' || ch === 'E') {\n          string += ch;\n          next();\n          if (ch === '-' || ch === '+') {\n            string += ch;\n            next();\n          }\n          while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n          }\n        }\n        break;\n      case 16:\n        while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {\n          string += ch;\n          next();\n        }\n        break;}\n\n\n    if (sign === '-') {\n      number = -string;\n    } else {\n      number = +string;\n    }\n\n    if (!isFinite(number)) {\n      error(\"Bad number\");\n    } else {\n      return number;\n    }\n  },\n\n  string = function () {\n\n    // Parse a string value.\n\n    var hex,\n    i,\n    string = '',\n    delim, // double quote or single quote\n    uffff;\n\n    // When parsing for string values, we must look for ' or \" and \\ characters.\n\n    if (ch === '\"' || ch === \"'\") {\n      delim = ch;\n      while (next()) {\n        if (ch === delim) {\n          next();\n          return string;\n        } else if (ch === '\\\\') {\n          next();\n          if (ch === 'u') {\n            uffff = 0;\n            for (i = 0; i < 4; i += 1) {\n              hex = parseInt(next(), 16);\n              if (!isFinite(hex)) {\n                break;\n              }\n              uffff = uffff * 16 + hex;\n            }\n            string += String.fromCharCode(uffff);\n          } else if (ch === '\\r') {\n            if (peek() === '\\n') {\n              next();\n            }\n          } else if (typeof escapee[ch] === 'string') {\n            string += escapee[ch];\n          } else {\n            break;\n          }\n        } else if (ch === '\\n') {\n          // unescaped newlines are invalid; see:\n          // https://github.com/aseemk/json5/issues/24\n          // TODO this feels special-cased; are there other\n          // invalid unescaped chars?\n          break;\n        } else {\n          string += ch;\n        }\n      }\n    }\n    error(\"Bad string\");\n  },\n\n  inlineComment = function () {\n\n    // Skip an inline comment, assuming this is one. The current character should\n    // be the second / character in the // pair that begins this inline comment.\n    // To finish the inline comment, we look for a newline or the end of the text.\n\n    if (ch !== '/') {\n      error(\"Not an inline comment\");\n    }\n\n    do {\n      next();\n      if (ch === '\\n' || ch === '\\r') {\n        next();\n        return;\n      }\n    } while (ch);\n  },\n\n  blockComment = function () {\n\n    // Skip a block comment, assuming this is one. The current character should be\n    // the * character in the /* pair that begins this block comment.\n    // To finish the block comment, we look for an ending */ pair of characters,\n    // but we also watch for the end of text before the comment is terminated.\n\n    if (ch !== '*') {\n      error(\"Not a block comment\");\n    }\n\n    do {\n      next();\n      while (ch === '*') {\n        next('*');\n        if (ch === '/') {\n          next('/');\n          return;\n        }\n      }\n    } while (ch);\n\n    error(\"Unterminated block comment\");\n  },\n\n  comment = function () {\n\n    // Skip a comment, whether inline or block-level, assuming this is one.\n    // Comments always begin with a / character.\n\n    if (ch !== '/') {\n      error(\"Not a comment\");\n    }\n\n    next('/');\n\n    if (ch === '/') {\n      inlineComment();\n    } else if (ch === '*') {\n      blockComment();\n    } else {\n      error(\"Unrecognized comment\");\n    }\n  },\n\n  white = function () {\n\n    // Skip whitespace and comments.\n    // Note that we're detecting comments by only a single / character.\n    // This works since regular expressions are not valid JSON(5), but this will\n    // break if there are other valid values that begin with a / character!\n\n    while (ch) {\n      if (ch === '/') {\n        comment();\n      } else if (ws.indexOf(ch) >= 0) {\n        next();\n      } else {\n        return;\n      }\n    }\n  },\n\n  word = function () {\n\n    // true, false, or null.\n\n    switch (ch) {\n      case 't':\n        next('t');\n        next('r');\n        next('u');\n        next('e');\n        return true;\n      case 'f':\n        next('f');\n        next('a');\n        next('l');\n        next('s');\n        next('e');\n        return false;\n      case 'n':\n        next('n');\n        next('u');\n        next('l');\n        next('l');\n        return null;\n      case 'I':\n        next('I');\n        next('n');\n        next('f');\n        next('i');\n        next('n');\n        next('i');\n        next('t');\n        next('y');\n        return Infinity;\n      case 'N':\n        next('N');\n        next('a');\n        next('N');\n        return NaN;}\n\n    error(\"Unexpected \" + renderChar(ch));\n  },\n\n  value, // Place holder for the value function.\n\n  array = function () {\n\n    // Parse an array value.\n\n    var array = [];\n\n    if (ch === '[') {\n      next('[');\n      white();\n      while (ch) {\n        if (ch === ']') {\n          next(']');\n          return array; // Potentially empty array\n        }\n        // ES5 allows omitting elements in arrays, e.g. [,] and\n        // [,null]. We don't allow this in JSON5.\n        if (ch === ',') {\n          error(\"Missing array element\");\n        } else {\n          array.push(value());\n        }\n        white();\n        // If there's no comma after this value, this needs to\n        // be the end of the array.\n        if (ch !== ',') {\n          next(']');\n          return array;\n        }\n        next(',');\n        white();\n      }\n    }\n    error(\"Bad array\");\n  },\n\n  object = function () {\n\n    // Parse an object value.\n\n    var key,\n    object = {};\n\n    if (ch === '{') {\n      next('{');\n      white();\n      while (ch) {\n        if (ch === '}') {\n          next('}');\n          return object; // Potentially empty object\n        }\n\n        // Keys can be unquoted. If they are, they need to be\n        // valid JS identifiers.\n        if (ch === '\"' || ch === \"'\") {\n          key = string();\n        } else {\n          key = identifier();\n        }\n\n        white();\n        next(':');\n        object[key] = value();\n        white();\n        // If there's no comma after this pair, this needs to be\n        // the end of the object.\n        if (ch !== ',') {\n          next('}');\n          return object;\n        }\n        next(',');\n        white();\n      }\n    }\n    error(\"Bad object\");\n  };\n\n  value = function () {\n\n    // Parse a JSON value. It could be an object, an array, a string, a number,\n    // or a word.\n\n    white();\n    switch (ch) {\n      case '{':\n        return object();\n      case '[':\n        return array();\n      case '\"':\n      case \"'\":\n        return string();\n      case '-':\n      case '+':\n      case '.':\n        return number();\n      default:\n        return ch >= '0' && ch <= '9' ? number() : word();}\n\n  };\n\n  // Return the json_parse function. It will have access to all of the above\n  // functions and variables.\n\n  return function (source, reviver) {\n    var result;\n\n    text = String(source);\n    at = 0;\n    lineNumber = 1;\n    columnNumber = 1;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n      error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? function walk(holder, key) {\n      var k,v,value = holder[key];\n      if (value && typeof value === 'object') {\n        for (k in value) {\n          if (Object.prototype.hasOwnProperty.call(value, k)) {\n            v = walk(value, k);\n            if (v !== undefined) {\n              value[k] = v;\n            } else {\n              delete value[k];\n            }\n          }\n        }\n      }\n      return reviver.call(holder, key, value);\n    }({ '': result }, '') : result;\n  };\n}();\n\n// JSON5 stringify will not quote keys where appropriate\nJSON5.stringify = function (obj, replacer, space) {\n  if (replacer && typeof replacer !== \"function\" && !isArray(replacer)) {\n    throw new Error('Replacer must be a function or an array');\n  }\n  var getReplacedValueOrUndefined = function (holder, key, isTopLevel) {\n    var value = holder[key];\n\n    // Replace the value with its toJSON value first, if possible\n    if (value && value.toJSON && typeof value.toJSON === \"function\") {\n      value = value.toJSON();\n    }\n\n    // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for\n    // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).\n    if (typeof replacer === \"function\") {\n      return replacer.call(holder, key, value);\n    } else if (replacer) {\n      if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {\n        return value;\n      } else {\n        return undefined;\n      }\n    } else {\n      return value;\n    }\n  };\n\n  function isWordChar(c) {\n    return c >= 'a' && c <= 'z' ||\n    c >= 'A' && c <= 'Z' ||\n    c >= '0' && c <= '9' ||\n    c === '_' || c === '$';\n  }\n\n  function isWordStart(c) {\n    return c >= 'a' && c <= 'z' ||\n    c >= 'A' && c <= 'Z' ||\n    c === '_' || c === '$';\n  }\n\n  function isWord(key) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n    if (!isWordStart(key[0])) {\n      return false;\n    }\n    var i = 1,length = key.length;\n    while (i < length) {\n      if (!isWordChar(key[i])) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  }\n\n  // export for use in tests\n  JSON5.isWord = isWord;\n\n  // polyfills\n  function isArray(obj) {\n    if (Array.isArray) {\n      return Array.isArray(obj);\n    } else {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    }\n  }\n\n  function isDate(obj) {\n    return Object.prototype.toString.call(obj) === '[object Date]';\n  }\n\n  var objStack = [];\n  function checkForCircular(obj) {\n    for (var i = 0; i < objStack.length; i++) {\n      if (objStack[i] === obj) {\n        throw new TypeError(\"Converting circular structure to JSON\");\n      }\n    }\n  }\n\n  function makeIndent(str, num, noNewLine) {\n    if (!str) {\n      return \"\";\n    }\n    // indentation no more than 10 chars\n    if (str.length > 10) {\n      str = str.substring(0, 10);\n    }\n\n    var indent = noNewLine ? \"\" : \"\\n\";\n    for (var i = 0; i < num; i++) {\n      indent += str;\n    }\n\n    return indent;\n  }\n\n  var indentStr;\n  if (space) {\n    if (typeof space === \"string\") {\n      indentStr = space;\n    } else if (typeof space === \"number\" && space >= 0) {\n      indentStr = makeIndent(\" \", space, true);\n    } else {\n      // ignore space parameter\n    }\n  }\n\n  // Copied from Crokford's implementation of JSON\n  // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195\n  // Begin\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n  escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n  meta = { // table of character substitutions\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\' };\n\n  function escapeString(string) {\n\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n      var c = meta[a];\n      return typeof c === 'string' ?\n      c :\n      '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n  }\n  // End\n\n  function internalStringify(holder, key, isTopLevel) {\n    var buffer, res;\n\n    // Replace the value, if necessary\n    var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);\n\n    if (obj_part && !isDate(obj_part)) {\n      // unbox objects\n      // don't unbox dates, since will turn it into number\n      obj_part = obj_part.valueOf();\n    }\n    switch (typeof obj_part) {\n      case \"boolean\":\n        return obj_part.toString();\n\n      case \"number\":\n        if (isNaN(obj_part) || !isFinite(obj_part)) {\n          return \"null\";\n        }\n        return obj_part.toString();\n\n      case \"string\":\n        return escapeString(obj_part.toString());\n\n      case \"object\":\n        if (obj_part === null) {\n          return \"null\";\n        } else if (isArray(obj_part)) {\n          checkForCircular(obj_part);\n          buffer = \"[\";\n          objStack.push(obj_part);\n\n          for (var i = 0; i < obj_part.length; i++) {\n            res = internalStringify(obj_part, i, false);\n            buffer += makeIndent(indentStr, objStack.length);\n            if (res === null || typeof res === \"undefined\") {\n              buffer += \"null\";\n            } else {\n              buffer += res;\n            }\n            if (i < obj_part.length - 1) {\n              buffer += \",\";\n            } else if (indentStr) {\n              buffer += \"\\n\";\n            }\n          }\n          objStack.pop();\n          if (obj_part.length) {\n            buffer += makeIndent(indentStr, objStack.length, true);\n          }\n          buffer += \"]\";\n        } else {\n          checkForCircular(obj_part);\n          buffer = \"{\";\n          var nonEmpty = false;\n          objStack.push(obj_part);\n          for (var prop in obj_part) {\n            if (obj_part.hasOwnProperty(prop)) {\n              var value = internalStringify(obj_part, prop, false);\n              isTopLevel = false;\n              if (typeof value !== \"undefined\" && value !== null) {\n                buffer += makeIndent(indentStr, objStack.length);\n                nonEmpty = true;\n                key = isWord(prop) ? prop : escapeString(prop);\n                buffer += key + \":\" + (indentStr ? ' ' : '') + value + \",\";\n              }\n            }\n          }\n          objStack.pop();\n          if (nonEmpty) {\n            buffer = buffer.substring(0, buffer.length - 1) + makeIndent(indentStr, objStack.length) + \"}\";\n          } else {\n            buffer = '{}';\n          }\n        }\n        return buffer;\n      default:\n        // functions and undefined should be ignored\n        return undefined;}\n\n  }\n\n  // special case...when undefined is used inside of\n  // a compound object/array, return null.\n  // but when top-level, return undefined\n  var topLevelHolder = { \"\": obj };\n  if (obj === undefined) {\n    return getReplacedValueOrUndefined(topLevelHolder, '', true);\n  }\n  return internalStringify(topLevelHolder, '', true);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528223222
  },
  "{\"sourceRoot\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/babylon/lib\",\"babelrc\":false,\"retainLines\":true,\"sourceMaps\":\"inline\",\"cwd\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app\",\"filename\":\"/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/babylon/lib/index.js\",\"configFile\":false,\"envName\":\"development\",\"passPerPreset\":false,\"plugins\":[{\"key\":\"base$0\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$1\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$2\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"base$3\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"base$4\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.0.0-beta.47:development": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/babylon/lib",
      "babelrc": false,
      "retainLines": true,
      "sourceMaps": "inline",
      "cwd": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app",
      "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/babylon/lib/index.js",
      "configFile": false,
      "envName": "development",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "base$0",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$1",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$2",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "base$3",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "base$4",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/babylon/lib/index.js",
        "plugins": [
          "flow",
          "objectRestSpread",
          "classProperties",
          "classPrivateProperties",
          "optionalChaining"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/babylon/lib/index.js",
        "retainLines": true,
        "comments": true,
        "compact": "auto",
        "sourceMaps": "inline",
        "sourceRoot": "/Users/stevenvandurm/Developer/eigen-react-native-Arduino/app/node_modules/metro/node_modules/babylon/lib",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _AwaitValue(value) {\n  this.wrapped = value;\n}\n\nfunction _AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null };\n\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof _AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(\"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true });\n\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false });\n\n        break;}\n\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen.return !== \"function\") {\n    this.return = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\n_AsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\n_AsyncGenerator.prototype.throw = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\n_AsyncGenerator.prototype.return = function (arg) {\n  return this._invoke(\"return\", arg);\n};\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype.__proto__ = superClass && superClass.prototype;\n  subClass.__proto__ = superClass;\n}\n\nvar defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false };\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var key in defaultOptions) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\nvar TokenType = function TokenType(label, conf) {\n  if (conf === void 0) {\n    conf = {};\n  }\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop === 0 ? 0 : conf.binop || null;\n  this.updateContext = null;\n};\n\nvar KeywordTokenType = function (_TokenType) {\n  function KeywordTokenType(name, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.keyword = name;\n    return _TokenType.call(this, name, options) || this;\n  }\n\n  _inheritsLoose(KeywordTokenType, _TokenType);\n\n  return KeywordTokenType;\n}(TokenType);\n\nvar BinopTokenType = function (_TokenType2) {\n  function BinopTokenType(name, prec) {\n    return _TokenType2.call(this, name, {\n      beforeExpr: beforeExpr,\n      binop: prec }) ||\n    this;\n  }\n\n  _inheritsLoose(BinopTokenType, _TokenType2);\n\n  return BinopTokenType;\n}(TokenType);\nvar types = {\n  num: new TokenType(\"num\", {\n    startsExpr: startsExpr }),\n\n  bigint: new TokenType(\"bigint\", {\n    startsExpr: startsExpr }),\n\n  regexp: new TokenType(\"regexp\", {\n    startsExpr: startsExpr }),\n\n  string: new TokenType(\"string\", {\n    startsExpr: startsExpr }),\n\n  name: new TokenType(\"name\", {\n    startsExpr: startsExpr }),\n\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr }),\n\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr }),\n\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr }),\n\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr }),\n\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr: beforeExpr }),\n\n  semi: new TokenType(\";\", {\n    beforeExpr: beforeExpr }),\n\n  colon: new TokenType(\":\", {\n    beforeExpr: beforeExpr }),\n\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr: beforeExpr }),\n\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr: beforeExpr }),\n\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr: beforeExpr }),\n\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr: beforeExpr }),\n\n  backQuote: new TokenType(\"`\", {\n    startsExpr: startsExpr }),\n\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr }),\n\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign }),\n\n  assign: new TokenType(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign }),\n\n  incDec: new TokenType(\"++/--\", {\n    prefix: prefix,\n    postfix: postfix,\n    startsExpr: startsExpr }),\n\n  bang: new TokenType(\"!\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr }),\n\n  tilde: new TokenType(\"~\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr }),\n\n  pipeline: new BinopTokenType(\"|>\", 0),\n  nullishCoalescing: new BinopTokenType(\"??\", 1),\n  logicalOR: new BinopTokenType(\"||\", 1),\n  logicalAND: new BinopTokenType(\"&&\", 2),\n  bitwiseOR: new BinopTokenType(\"|\", 3),\n  bitwiseXOR: new BinopTokenType(\"^\", 4),\n  bitwiseAND: new BinopTokenType(\"&\", 5),\n  equality: new BinopTokenType(\"==/!=\", 6),\n  relational: new BinopTokenType(\"</>\", 7),\n  bitShift: new BinopTokenType(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr: beforeExpr,\n    binop: 9,\n    prefix: prefix,\n    startsExpr: startsExpr }),\n\n  modulo: new BinopTokenType(\"%\", 10),\n  star: new BinopTokenType(\"*\", 10),\n  slash: new BinopTokenType(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr: beforeExpr,\n    binop: 11,\n    rightAssociative: true }) };\n\n\nvar keywords = {\n  break: new KeywordTokenType(\"break\"),\n  case: new KeywordTokenType(\"case\", {\n    beforeExpr: beforeExpr }),\n\n  catch: new KeywordTokenType(\"catch\"),\n  continue: new KeywordTokenType(\"continue\"),\n  debugger: new KeywordTokenType(\"debugger\"),\n  default: new KeywordTokenType(\"default\", {\n    beforeExpr: beforeExpr }),\n\n  do: new KeywordTokenType(\"do\", {\n    isLoop: isLoop,\n    beforeExpr: beforeExpr }),\n\n  else: new KeywordTokenType(\"else\", {\n    beforeExpr: beforeExpr }),\n\n  finally: new KeywordTokenType(\"finally\"),\n  for: new KeywordTokenType(\"for\", {\n    isLoop: isLoop }),\n\n  function: new KeywordTokenType(\"function\", {\n    startsExpr: startsExpr }),\n\n  if: new KeywordTokenType(\"if\"),\n  return: new KeywordTokenType(\"return\", {\n    beforeExpr: beforeExpr }),\n\n  switch: new KeywordTokenType(\"switch\"),\n  throw: new KeywordTokenType(\"throw\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr }),\n\n  try: new KeywordTokenType(\"try\"),\n  var: new KeywordTokenType(\"var\"),\n  let: new KeywordTokenType(\"let\"),\n  const: new KeywordTokenType(\"const\"),\n  while: new KeywordTokenType(\"while\", {\n    isLoop: isLoop }),\n\n  with: new KeywordTokenType(\"with\"),\n  new: new KeywordTokenType(\"new\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr }),\n\n  this: new KeywordTokenType(\"this\", {\n    startsExpr: startsExpr }),\n\n  super: new KeywordTokenType(\"super\", {\n    startsExpr: startsExpr }),\n\n  class: new KeywordTokenType(\"class\"),\n  extends: new KeywordTokenType(\"extends\", {\n    beforeExpr: beforeExpr }),\n\n  export: new KeywordTokenType(\"export\"),\n  import: new KeywordTokenType(\"import\", {\n    startsExpr: startsExpr }),\n\n  yield: new KeywordTokenType(\"yield\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr }),\n\n  null: new KeywordTokenType(\"null\", {\n    startsExpr: startsExpr }),\n\n  true: new KeywordTokenType(\"true\", {\n    startsExpr: startsExpr }),\n\n  false: new KeywordTokenType(\"false\", {\n    startsExpr: startsExpr }),\n\n  in: new KeywordTokenType(\"in\", {\n    beforeExpr: beforeExpr,\n    binop: 7 }),\n\n  instanceof: new KeywordTokenType(\"instanceof\", {\n    beforeExpr: beforeExpr,\n    binop: 7 }),\n\n  typeof: new KeywordTokenType(\"typeof\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr }),\n\n  void: new KeywordTokenType(\"void\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr }),\n\n  delete: new KeywordTokenType(\"delete\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr }) };\n\n\nObject.keys(keywords).forEach(function (name) {\n  types[\"_\" + name] = keywords[name];\n});\n\nfunction makePredicate(words) {\n  var wordsArr = words.split(\" \");\n  return function (str) {\n    return wordsArr.indexOf(str) >= 0;\n  };\n}\n\nvar reservedWords = {\n  \"6\": makePredicate(\"enum await\"),\n  strict: makePredicate(\"implements interface let package private protected public static yield\"),\n  strictBind: makePredicate(\"eval arguments\") };\n\nvar isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super\");\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA900-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 257, 0, 11, 39, 8, 0, 22, 0, 12, 39, 3, 3, 55, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 698, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 1, 31, 6124, 20, 754, 9486, 286, 82, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 280, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 19719, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];\n\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;\n}\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\nvar types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", true),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  functionExpression: new TokContext(\"function\", true) };\n\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  var out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext() === types$1.functionExpression) {\n    this.state.context.pop();\n    this.state.exprAllowed = false;\n  } else if (out === types$1.templateQuasi) {\n    this.state.exprAllowed = true;\n  } else {\n    this.state.exprAllowed = !out.isExpr;\n  }\n};\n\ntypes.name.updateContext = function (prevType) {\n  if (this.state.value === \"of\" && this.curContext() === types$1.parenStatement) {\n    this.state.exprAllowed = !prevType.beforeExpr;\n    return;\n  }\n\n  this.state.exprAllowed = false;\n\n  if (prevType === types._let || prevType === types._const || prevType === types._var) {\n    if (lineBreak.test(this.input.slice(this.state.end))) {\n      this.state.exprAllowed = true;\n    }\n  }\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = function (prevType) {\n  if (this.state.exprAllowed && !this.braceIsBlock(prevType)) {\n    this.state.context.push(types$1.functionExpression);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\nvar SourceLocation = function SourceLocation(start, end) {\n  this.start = start;\n  this.end = end;\n};\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n\n  throw new Error(\"Unreachable\");\n}\n\nvar BaseParser = function () {\n  function BaseParser() {\n    this.sawUnambiguousESM = false;\n  }\n\n  var _proto = BaseParser.prototype;\n\n  _proto.isReservedWord = function isReservedWord(word) {\n    if (word === \"await\") {\n      return this.inModule;\n    } else {\n      return reservedWords[6](word);\n    }\n  };\n\n  _proto.hasPlugin = function hasPlugin(name) {\n    return !!this.plugins[name];\n  };\n\n  return BaseParser;\n}();\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nvar CommentsParser = function (_BaseParser) {\n  function CommentsParser() {\n    return _BaseParser.apply(this, arguments) || this;\n  }\n\n  var _proto = CommentsParser.prototype;\n\n  _proto.addComment = function addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  };\n\n  _proto.processComment = function processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    var stack = this.state.commentStack;\n    var firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      var lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild && this.state.leadingComments.length > 0) {\n      var lastComment = last(this.state.leadingComments);\n\n      if (firstChild.type === \"ObjectProperty\") {\n        if (lastComment.start >= node.start) {\n          if (this.state.commentPreviousNode) {\n            for (j = 0; j < this.state.leadingComments.length; j++) {\n              if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n                this.state.leadingComments.splice(j, 1);\n                j--;\n              }\n            }\n\n            if (this.state.leadingComments.length > 0) {\n              firstChild.trailingComments = this.state.leadingComments;\n              this.state.leadingComments = [];\n            }\n          }\n        }\n      } else if (node.type === \"CallExpression\" && node.arguments && node.arguments.length) {\n        var lastArg = last(node.arguments);\n\n        if (lastArg && lastComment.start >= lastArg.start && lastComment.end <= node.end) {\n          if (this.state.commentPreviousNode) {\n            if (this.state.leadingComments.length > 0) {\n              lastArg.trailingComments = this.state.leadingComments;\n              this.state.leadingComments = [];\n            }\n          }\n        }\n      }\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        var leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  };\n\n  _inheritsLoose(CommentsParser, _BaseParser);\n\n  return CommentsParser;\n}(BaseParser);\n\nvar LocationParser = function (_CommentsParser) {\n  function LocationParser() {\n    return _CommentsParser.apply(this, arguments) || this;\n  }\n\n  var _proto = LocationParser.prototype;\n\n  _proto.raise = function raise(pos, message, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n    missingPluginNames = _ref.missingPluginNames,\n    code = _ref.code;\n\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos;\n    err.loc = loc;\n\n    if (missingPluginNames) {\n      err.missingPlugin = missingPluginNames;\n    }\n\n    if (code !== undefined) {\n      err.code = code;\n    }\n\n    throw err;\n  };\n\n  _inheritsLoose(LocationParser, _CommentsParser);\n\n  return LocationParser;\n}(CommentsParser);\n\nvar State = function () {\n  function State() {}\n\n  var _proto = State.prototype;\n\n  _proto.init = function init(options, input) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.input = input;\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inMethod = false;\n    this.inFunction = false;\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.inGenerator = false;\n    this.inAsync = false;\n    this.inPropertyName = false;\n    this.inType = false;\n    this.inClassProperty = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.classLevel = 0;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldInPossibleArrowParameters = null;\n    this.tokens = [];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = this.lineStart = 0;\n    this.curLine = options.startLine;\n    this.type = types.eof;\n    this.value = null;\n    this.start = this.end = this.pos;\n    this.startLoc = this.endLoc = this.curPosition();\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = this.containsOctal = false;\n    this.octalPosition = null;\n    this.invalidTemplateEscapePosition = null;\n    this.exportedIdentifiers = [];\n  };\n\n  _proto.curPosition = function curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  };\n\n  _proto.clone = function clone(skipArrays) {\n    var _this = this;\n\n    var state = new State();\n    Object.keys(this).forEach(function (key) {\n      var val = _this[key];\n\n      if ((!skipArrays || key === \"context\") && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    });\n    return state;\n  };\n\n  return State;\n}();\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nvar VALID_REGEX_FLAGS = \"gmsiyu\";\nvar forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120] };\n\nvar allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = allowedNumericSeparatorSiblings.bin.concat([50, 51, 52, 53, 54, 55]);\nallowedNumericSeparatorSiblings.dec = allowedNumericSeparatorSiblings.oct.concat([56, 57]);\nallowedNumericSeparatorSiblings.hex = allowedNumericSeparatorSiblings.dec.concat([65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]);\nvar Token = function Token(state) {\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n};\n\nfunction codePointToString(code) {\n  if (code <= 0xffff) {\n    return String.fromCharCode(code);\n  } else {\n    return String.fromCharCode((code - 0x10000 >> 10) + 0xd800, (code - 0x10000 & 1023) + 0xdc00);\n  }\n}\n\nvar Tokenizer = function (_LocationParser) {\n  function Tokenizer(options, input) {\n    var _this;\n\n    _this = _LocationParser.call(this) || this;\n    _this.state = new State();\n\n    _this.state.init(options, input);\n\n    _this.isLookahead = false;\n    return _this;\n  }\n\n  var _proto = Tokenizer.prototype;\n\n  _proto.next = function next() {\n    if (this.options.tokens && !this.isLookahead) {\n      this.state.tokens.push(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  };\n\n  _proto.eat = function eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto.match = function match(type) {\n    return this.state.type === type;\n  };\n\n  _proto.isKeyword = function isKeyword$$1(word) {\n    return isKeyword(word);\n  };\n\n  _proto.lookahead = function lookahead() {\n    var old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    var curr = this.state;\n    this.state = old;\n    return curr;\n  };\n\n  _proto.setStrict = function setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  };\n\n  _proto.curContext = function curContext() {\n    return this.state.context[this.state.context.length - 1];\n  };\n\n  _proto.nextToken = function nextToken() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.input.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    if (curContext.override) {\n      curContext.override(this);\n    } else {\n      this.readToken(this.fullCharCodeAtPos());\n    }\n  };\n\n  _proto.readToken = function readToken(code) {\n    if (isIdentifierStart(code) || code === 92) {\n      this.readWord();\n    } else {\n      this.getTokenFromCode(code);\n    }\n  };\n\n  _proto.fullCharCodeAtPos = function fullCharCodeAtPos() {\n    var code = this.input.charCodeAt(this.state.pos);\n    if (code <= 0xd7ff || code >= 0xe000) return code;\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    return (code << 10) + next - 0x35fdc00;\n  };\n\n  _proto.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc) };\n\n\n    if (!this.isLookahead) {\n      if (this.options.tokens) this.state.tokens.push(comment);\n      this.state.comments.push(comment);\n      this.addComment(comment);\n    }\n  };\n\n  _proto.skipBlockComment = function skipBlockComment() {\n    var startLoc = this.state.curPosition();\n    var start = this.state.pos;\n    var end = this.input.indexOf(\"*/\", this.state.pos += 2);\n    if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    var match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  };\n\n  _proto.skipLineComment = function skipLineComment(startSkip) {\n    var start = this.state.pos;\n    var startLoc = this.state.curPosition();\n    var ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.input.length) {\n      while (ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233 && ++this.state.pos < this.input.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  };\n\n  _proto.skipSpace = function skipSpace() {\n    loop: while (this.state.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;}\n\n\n          break;\n\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }}\n\n\n    }\n  };\n\n  _proto.finishToken = function finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    var prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    this.updateContext(prevType);\n  };\n\n  _proto.readToken_dot = function readToken_dot() {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    var next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 46 && next2 === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  };\n\n  _proto.readToken_slash = function readToken_slash() {\n    if (this.state.exprAllowed) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  };\n\n  _proto.readToken_mult_modulo = function readToken_mult_modulo(code) {\n    var type = code === 42 ? types.star : types.modulo;\n    var width = 1;\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    var exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  };\n\n  _proto.readToken_pipe_amp = function readToken_pipe_amp(code) {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      } else if (next === 125 && this.hasPlugin(\"flow\")) {\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  };\n\n  _proto.readToken_caret = function readToken_caret() {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  };\n\n  _proto.readToken_plus_min = function readToken_plus_min(code) {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  };\n\n  _proto.readToken_lt_gt = function readToken_lt_gt(code) {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    var size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  };\n\n  _proto.readToken_eq_excl = function readToken_eq_excl(code) {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  };\n\n  _proto.readToken_question = function readToken_question() {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    var next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  };\n\n  _proto.getTokenFromCode = function getTokenFromCode(code) {\n    switch (code) {\n      case 35:\n        if ((this.hasPlugin(\"classPrivateProperties\") || this.hasPlugin(\"classPrivateMethods\")) && this.state.classLevel > 0) {\n          ++this.state.pos;\n          this.finishToken(types.hash);\n          return;\n        } else {\n          this.raise(this.state.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n        }\n\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        ++this.state.pos;\n        this.finishToken(types.bracketL);\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"flow\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          this.finishOp(types.braceBarL, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          var next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;}\n\n\n    this.raise(this.state.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  _proto.finishOp = function finishOp(type, size) {\n    var str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  };\n\n  _proto.readRegexp = function readRegexp() {\n    var start = this.state.pos;\n    var escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.input.length) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n\n      var ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    var content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    var mods = \"\";\n\n    while (this.state.pos < this.input.length) {\n      var char = this.input[this.state.pos];\n      var charCode = this.fullCharCodeAtPos();\n\n      if (VALID_REGEX_FLAGS.indexOf(char) > -1) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, \"Duplicate regular expression flag\");\n        }\n\n        ++this.state.pos;\n        mods += char;\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, \"Invalid regular expression flag\");\n      } else {\n        break;\n      }\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods });\n\n  };\n\n  _proto.readInt = function readInt(radix, len) {\n    var start = this.state.pos;\n    var forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    var allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    var total = 0;\n\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this.input.charCodeAt(this.state.pos);\n      var val = void 0;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        var prev = this.input.charCodeAt(this.state.pos - 1);\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 95) {\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, \"Invalid or unexpected token\");\n          }\n\n          if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, \"Invalid or unexpected token\");\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) break;\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len) {\n      return null;\n    }\n\n    return total;\n  };\n\n  _proto.readRadixNumber = function readRadixNumber(radix) {\n    var start = this.state.pos;\n    var isBigInt = false;\n    this.state.pos += 2;\n    var val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.fullCharCodeAtPos())) {\n      this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    if (isBigInt) {\n      var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  };\n\n  _proto.readNumber = function readNumber(startsWithDot) {\n    var start = this.state.pos;\n    var octal = this.input.charCodeAt(start) === 48;\n    var isFloat = false;\n    var isBigInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, \"Invalid number\");\n    }\n\n    if (octal && this.state.pos == start + 1) octal = false;\n    var next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === 110) {\n        if (isFloat || octal) this.raise(start, \"Invalid BigIntLiteral\");\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.fullCharCodeAtPos())) {\n      this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    var val;\n\n    if (isFloat) {\n      val = parseFloat(str);\n    } else if (!octal || str.length === 1) {\n      val = parseInt(str, 10);\n    } else if (this.state.strict) {\n      this.raise(start, \"Invalid number\");\n    } else if (/[89]/.test(str)) {\n      val = parseInt(str, 10);\n    } else {\n      val = parseInt(str, 8);\n    }\n\n    this.finishToken(types.num, val);\n  };\n\n  _proto.readCodePoint = function readCodePoint(throwOnInvalid) {\n    var ch = this.input.charCodeAt(this.state.pos);\n    var code;\n\n    if (ch === 123) {\n      var codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code === null) {\n        --this.state.invalidTemplateEscapePosition;\n      } else if (code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, throwOnInvalid);\n    }\n\n    return code;\n  };\n\n  _proto.readString = function readString(quote) {\n    var out = \"\",\n    chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.input.length) {\n        this.raise(this.state.start, \"Unterminated string constant\");\n      }\n\n      var ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else {\n        if (isNewLine(ch)) {\n          this.raise(this.state.start, \"Unterminated string constant\");\n        }\n\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  };\n\n  _proto.readTmplToken = function readTmplToken() {\n    var out = \"\",\n    chunkStart = this.state.pos,\n    containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.input.length) {\n        this.raise(this.state.start, \"Unterminated template\");\n      }\n\n      var ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        var escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;}\n\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  };\n\n  _proto.readEscapedChar = function readEscapedChar(inTemplate) {\n    var throwOnInvalid = !inTemplate;\n    var ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          var code = this.readHexChar(2, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          var _code = this.readCodePoint(throwOnInvalid);\n\n          return _code === null ? null : codePointToString(_code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\x0B\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n        return \"\";\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          var codePos = this.state.pos - 1;\n          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          var octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          if (octal > 0) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n\n          this.state.pos += octalStr.length - 1;\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);}\n\n  };\n\n  _proto.readHexChar = function readHexChar(len, throwOnInvalid) {\n    var codePos = this.state.pos;\n    var n = this.readInt(16, len);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n\n    return n;\n  };\n\n  _proto.readWord1 = function readWord1() {\n    this.state.containsEsc = false;\n    var word = \"\",\n    first = true,\n    chunkStart = this.state.pos;\n\n    while (this.state.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        this.state.pos += 1;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        var escStart = this.state.pos;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        }\n\n        ++this.state.pos;\n        var esc = this.readCodePoint(true);\n\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, true)) {\n          this.raise(escStart, \"Invalid Unicode escape\");\n        }\n\n        word += codePointToString(esc);\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n\n      first = false;\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  };\n\n  _proto.isIterator = function isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  };\n\n  _proto.readWord = function readWord() {\n    var word = this.readWord1();\n    var type = types.name;\n\n    if (this.isKeyword(word)) {\n      if (this.state.containsEsc) {\n        this.raise(this.state.pos, \"Escape sequence in keyword \" + word);\n      }\n\n      type = keywords[word];\n    }\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, \"Invalid identifier \" + word);\n    }\n\n    this.finishToken(type, word);\n  };\n\n  _proto.braceIsBlock = function braceIsBlock(prevType) {\n    if (prevType === types.colon) {\n      var parent = this.curContext();\n\n      if (parent === types$1.braceStatement || parent === types$1.braceExpression) {\n        return !parent.isExpr;\n      }\n    }\n\n    if (prevType === types._return) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return this.curContext() === types$1.braceStatement;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  };\n\n  _proto.updateContext = function updateContext(prevType) {\n    var type = this.state.type;\n    var update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  };\n\n  _inheritsLoose(Tokenizer, _LocationParser);\n\n  return Tokenizer;\n}(LocationParser);\n\nvar UtilParser = function (_Tokenizer) {\n  function UtilParser() {\n    return _Tokenizer.apply(this, arguments) || this;\n  }\n\n  var _proto = UtilParser.prototype;\n\n  _proto.addExtra = function addExtra(node, key, val) {\n    if (!node) return;\n    var extra = node.extra = node.extra || {};\n    extra[key] = val;\n  };\n\n  _proto.isRelational = function isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  };\n\n  _proto.expectRelational = function expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  };\n\n  _proto.eatRelational = function eatRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.isContextual = function isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  };\n\n  _proto.isLookaheadContextual = function isLookaheadContextual(name) {\n    var l = this.lookahead();\n    return l.type === types.name && l.value === name;\n  };\n\n  _proto.eatContextual = function eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  };\n\n  _proto.expectContextual = function expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  };\n\n  _proto.canInsertSemicolon = function canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  };\n\n  _proto.hasPrecedingLineBreak = function hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  };\n\n  _proto.isLineTerminator = function isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  };\n\n  _proto.semicolon = function semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  };\n\n  _proto.expect = function expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  };\n\n  _proto.unexpected = function unexpected(pos, messageOrType) {\n    if (messageOrType === void 0) {\n      messageOrType = \"Unexpected token\";\n    }\n\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = \"Unexpected token, expected \\\"\" + messageOrType.label + \"\\\"\";\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  };\n\n  _proto.expectPlugin = function expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raise(pos != null ? pos : this.state.start, \"This experimental syntax requires enabling the parser plugin: '\" + name + \"'\", {\n        missingPluginNames: [name] });\n\n    }\n\n    return true;\n  };\n\n  _proto.expectOnePlugin = function expectOnePlugin(names, pos) {\n    var _this = this;\n\n    if (!names.some(function (n) {\n      return _this.hasPlugin(n);\n    })) {\n      throw this.raise(pos != null ? pos : this.state.start, \"This experimental syntax requires enabling one of the following parser plugin(s): '\" + names.join(\", \") + \"'\", {\n        missingPluginNames: names });\n\n    }\n  };\n\n  _inheritsLoose(UtilParser, _Tokenizer);\n\n  return UtilParser;\n}(Tokenizer);\n\nvar commentKeys = [\"leadingComments\", \"trailingComments\", \"innerComments\"];\n\nvar Node = function () {\n  function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  var _proto = Node.prototype;\n\n  _proto.__clone = function __clone() {\n    var _this = this;\n\n    var node2 = new Node();\n    Object.keys(this).forEach(function (key) {\n      if (commentKeys.indexOf(key) < 0) {\n        node2[key] = _this[key];\n      }\n    });\n    return node2;\n  };\n\n  return Node;\n}();\n\nvar NodeUtils = function (_UtilParser) {\n  function NodeUtils() {\n    return _UtilParser.apply(this, arguments) || this;\n  }\n\n  var _proto2 = NodeUtils.prototype;\n\n  _proto2.startNode = function startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  };\n\n  _proto2.startNodeAt = function startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  };\n\n  _proto2.startNodeAtNode = function startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  };\n\n  _proto2.finishNode = function finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  };\n\n  _proto2.finishNodeAt = function finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  };\n\n  _proto2.resetStartLocationFromNode = function resetStartLocationFromNode(node, locationNode) {\n    node.start = locationNode.start;\n    node.loc.start = locationNode.loc.start;\n    if (this.options.ranges) node.range[0] = locationNode.range[0];\n  };\n\n  _inheritsLoose(NodeUtils, _UtilParser);\n\n  return NodeUtils;\n}(UtilParser);\n\nvar LValParser = function (_NodeUtils) {\n  function LValParser() {\n    return _NodeUtils.apply(this, arguments) || this;\n  }\n\n  var _proto = LValParser.prototype;\n\n  _proto.toAssignable = function toAssignable(node, isBinding, contextDescription) {\n    if (node) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (var index = 0; index < node.properties.length; index++) {\n            var prop = node.properties[index];\n            var isLast = index === node.properties.length - 1;\n            this.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value, isBinding, contextDescription);\n          break;\n\n        case \"SpreadElement\":\n          {\n            this.checkToRestConversion(node);\n            node.type = \"RestElement\";\n            var arg = node.argument;\n            this.toAssignable(arg, isBinding, contextDescription);\n            break;\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, isBinding, contextDescription);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator === \"=\") {\n            node.type = \"AssignmentPattern\";\n            delete node.operator;\n          } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n          }\n\n          break;\n\n        case \"MemberExpression\":\n          if (!isBinding) break;\n\n        default:\n          {\n            var message = \"Invalid left-hand side\" + (contextDescription ? \" in \" + contextDescription : \"expression\");\n            this.raise(node.start, message);\n          }}\n\n    }\n\n    return node;\n  };\n\n  _proto.toAssignableObjectExpressionProp = function toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      var error = prop.kind === \"get\" || prop.kind === \"set\" ? \"Object pattern can't contain getter or setter\" : \"Object pattern can't contain methods\";\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(prop.start, \"The rest element has to be the last element when destructuring\");\n    } else {\n      this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n    }\n  };\n\n  _proto.toAssignableList = function toAssignableList(exprList, isBinding, contextDescription) {\n    var end = exprList.length;\n\n    if (end) {\n      var last = exprList[end - 1];\n\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        var arg = last.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n\n        if ([\"Identifier\", \"MemberExpression\", \"ArrayPattern\", \"ObjectPattern\"].indexOf(arg.type) === -1) {\n          this.unexpected(arg.start);\n        }\n\n        --end;\n      }\n    }\n\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i];\n\n      if (elt && elt.type === \"SpreadElement\") {\n        this.raise(elt.start, \"The rest element has to be the last element when destructuring\");\n      }\n\n      if (elt) this.toAssignable(elt, isBinding, contextDescription);\n    }\n\n    return exprList;\n  };\n\n  _proto.toReferencedList = function toReferencedList(exprList) {\n    return exprList;\n  };\n\n  _proto.parseSpread = function parseSpread(refShorthandDefaultPos, refNeedsArrowPos) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  };\n\n  _proto.parseRest = function parseRest() {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  };\n\n  _proto.shouldAllowYieldIdentifier = function shouldAllowYieldIdentifier() {\n    return this.match(types._yield) && !this.state.strict && !this.state.inGenerator;\n  };\n\n  _proto.parseBindingIdentifier = function parseBindingIdentifier() {\n    return this.parseIdentifier(this.shouldAllowYieldIdentifier());\n  };\n\n  _proto.parseBindingAtom = function parseBindingAtom() {\n    switch (this.state.type) {\n      case types._yield:\n      case types.name:\n        return this.parseBindingIdentifier();\n\n      case types.bracketL:\n        {\n          var node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObj(true);\n\n      default:\n        throw this.unexpected();}\n\n  };\n\n  _proto.parseBindingList = function parseBindingList(close, allowEmpty, allowModifiers) {\n    var elts = [];\n    var first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRest()));\n        this.expect(close);\n        break;\n      } else {\n        var decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, \"Stage 2 decorators cannot be used to decorate parameters\");\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  };\n\n  _proto.parseAssignableListItem = function parseAssignableListItem(allowModifiers, decorators) {\n    var left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  };\n\n  _proto.parseAssignableListItemTypes = function parseAssignableListItemTypes(param) {\n    return param;\n  };\n\n  _proto.parseMaybeDefault = function parseMaybeDefault(startPos, startLoc, left) {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  };\n\n  _proto.checkLVal = function checkLVal(expr, isBinding, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"Identifier\":\n        this.checkReservedWord(expr.name, expr.start, false, true);\n\n        if (checkClashes) {\n          var _key = \"_\" + expr.name;\n\n          if (checkClashes[_key]) {\n            this.raise(expr.start, \"Argument name clash in strict mode\");\n          } else {\n            checkClashes[_key] = true;\n          }\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (isBinding) this.raise(expr.start, \"Binding member expression\");\n        break;\n\n      case \"ObjectPattern\":\n        for (var _i2 = 0, _expr$properties2 = expr.properties; _i2 < _expr$properties2.length; _i2++) {\n          var prop = _expr$properties2[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          this.checkLVal(prop, isBinding, checkClashes, \"object destructuring pattern\");\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (var _i4 = 0, _expr$elements2 = expr.elements; _i4 < _expr$elements2.length; _i4++) {\n          var elem = _expr$elements2[_i4];\n\n          if (elem) {\n            this.checkLVal(elem, isBinding, checkClashes, \"array destructuring pattern\");\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, isBinding, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, isBinding, checkClashes, \"rest element\");\n        break;\n\n      default:\n        {\n          var message = (isBinding ? \"Binding invalid\" : \"Invalid\") + \" left-hand side\" + (contextDescription ? \" in \" + contextDescription : \"expression\");\n          this.raise(expr.start, message);\n        }}\n\n  };\n\n  _proto.checkToRestConversion = function checkToRestConversion(node) {\n    var validArgumentTypes = [\"Identifier\", \"MemberExpression\"];\n\n    if (validArgumentTypes.indexOf(node.argument.type) !== -1) {\n      return;\n    }\n\n    this.raise(node.argument.start, \"Invalid rest operator's argument\");\n  };\n\n  _inheritsLoose(LValParser, _NodeUtils);\n\n  return LValParser;\n}(NodeUtils);\n\nvar ExpressionParser = function (_LValParser) {\n  function ExpressionParser() {\n    return _LValParser.apply(this, arguments) || this;\n  }\n\n  var _proto = ExpressionParser.prototype;\n\n  _proto.checkPropClash = function checkPropClash(prop, propHash) {\n    if (prop.computed || prop.kind) return;\n    var key = prop.key;\n    var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (propHash.proto) {\n        this.raise(key.start, \"Redefinition of __proto__ property\");\n      }\n\n      propHash.proto = true;\n    }\n  };\n\n  _proto.getExpression = function getExpression() {\n    this.nextToken();\n    var expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    return expr;\n  };\n\n  _proto.parseExpression = function parseExpression(noIn, refShorthandDefaultPos) {\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n\n    if (this.match(types.comma)) {\n      var _node = this.startNodeAt(startPos, startLoc);\n\n      _node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        _node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n      }\n\n      this.toReferencedList(_node.expressions);\n      return this.finishNode(_node, \"SequenceExpression\");\n    }\n\n    return expr;\n  };\n\n  _proto.parseMaybeAssign = function parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n\n    if (this.match(types._yield) && this.state.inGenerator) {\n      var _left = this.parseYield();\n\n      if (afterLeftParse) {\n        _left = afterLeftParse.call(this, _left, startPos, startLoc);\n      }\n\n      return _left;\n    }\n\n    var failOnShorthandAssign;\n\n    if (refShorthandDefaultPos) {\n      failOnShorthandAssign = false;\n    } else {\n      refShorthandDefaultPos = {\n        start: 0 };\n\n      failOnShorthandAssign = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name) || this.match(types._yield)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      var _node2 = this.startNodeAt(startPos, startLoc);\n\n      var operator = this.state.value;\n      _node2.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"nullishCoalescingOperator\");\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      _node2.left = this.match(types.eq) ? this.toAssignable(left, undefined, \"assignment expression\") : left;\n      refShorthandDefaultPos.start = 0;\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      if (left.extra && left.extra.parenthesized) {\n        var errorMsg;\n\n        if (left.type === \"ObjectPattern\") {\n          errorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n        } else if (left.type === \"ArrayPattern\") {\n          errorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n        }\n\n        if (errorMsg) {\n          this.raise(left.start, \"You're trying to assign to a parenthesized expression, eg. instead of \" + errorMsg);\n        }\n      }\n\n      this.next();\n      _node2.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(_node2, \"AssignmentExpression\");\n    } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    return left;\n  };\n\n  _proto.parseMaybeConditional = function parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos) {\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    var potentialArrowAt = this.state.potentialArrowAt;\n    var expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n    return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n  };\n\n  _proto.parseConditional = function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      var _node3 = this.startNodeAt(startPos, startLoc);\n\n      _node3.test = expr;\n      _node3.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      _node3.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(_node3, \"ConditionalExpression\");\n    }\n\n    return expr;\n  };\n\n  _proto.parseExprOps = function parseExprOps(noIn, refShorthandDefaultPos) {\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    var potentialArrowAt = this.state.potentialArrowAt;\n    var expr = this.parseMaybeUnary(refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  };\n\n  _proto.parseExprOp = function parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.state.type.binop;\n\n    if (prec != null && (!noIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        var _node4 = this.startNodeAt(leftStartPos, leftStartLoc);\n\n        var operator = this.state.value;\n        _node4.left = left;\n        _node4.operator = operator;\n\n        if (operator === \"**\" && left.type === \"UnaryExpression\" && left.extra && !left.extra.parenthesizedArgument && !left.extra.parenthesized) {\n          this.raise(left.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n        }\n\n        var op = this.state.type;\n\n        if (op === types.nullishCoalescing) {\n          this.expectPlugin(\"nullishCoalescingOperator\");\n        } else if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n        }\n\n        this.next();\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n\n        if (op === types.pipeline) {\n          if (this.match(types.name) && this.state.value === \"await\" && this.state.inAsync) {\n            throw this.raise(this.state.start, \"Unexpected \\\"await\\\" after pipeline body; await must have parentheses in minimal proposal\");\n          }\n        }\n\n        _node4.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n        this.finishNode(_node4, op === types.logicalOR || op === types.logicalAND || op === types.nullishCoalescing ? \"LogicalExpression\" : \"BinaryExpression\");\n        return this.parseExprOp(_node4, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }\n\n    return left;\n  };\n\n  _proto.parseMaybeUnary = function parseMaybeUnary(refShorthandDefaultPos) {\n    if (this.state.type.prefix) {\n      var _node5 = this.startNode();\n\n      var update = this.match(types.incDec);\n      _node5.operator = this.state.value;\n      _node5.prefix = true;\n\n      if (_node5.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      this.next();\n      var argType = this.state.type;\n      _node5.argument = this.parseMaybeUnary();\n      this.addExtra(_node5, \"parenthesizedArgument\", argType === types.parenL && (!_node5.argument.extra || !_node5.argument.extra.parenthesized));\n\n      if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n        this.unexpected(refShorthandDefaultPos.start);\n      }\n\n      if (update) {\n        this.checkLVal(_node5.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && _node5.operator === \"delete\") {\n        var arg = _node5.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(_node5.start, \"Deleting local variable in strict mode\");\n        } else if (arg.type === \"MemberExpression\" && arg.property.type === \"PrivateName\") {\n          this.raise(_node5.start, \"Deleting a private field is not allowed\");\n        }\n      }\n\n      return this.finishNode(_node5, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    }\n\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    var expr = this.parseExprSubscripts(refShorthandDefaultPos);\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      var _node6 = this.startNodeAt(startPos, startLoc);\n\n      _node6.operator = this.state.value;\n      _node6.prefix = false;\n      _node6.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(_node6, \"UpdateExpression\");\n    }\n\n    return expr;\n  };\n\n  _proto.parseExprSubscripts = function parseExprSubscripts(refShorthandDefaultPos) {\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    var potentialArrowAt = this.state.potentialArrowAt;\n    var expr = this.parseExprAtom(refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  };\n\n  _proto.parseSubscripts = function parseSubscripts(base, startPos, startLoc, noCalls) {\n    var state = {\n      optionalChainMember: false,\n      stop: false };\n\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n    } while (!state.stop);\n\n    return base;\n  };\n\n  _proto.parseSubscript = function parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      var _node7 = this.startNodeAt(startPos, startLoc);\n\n      _node7.object = base;\n      _node7.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(_node7, \"BindExpression\"), startPos, startLoc, noCalls);\n    } else if (this.match(types.questionDot)) {\n      this.expectPlugin(\"optionalChaining\");\n      state.optionalChainMember = true;\n\n      if (noCalls && this.lookahead().type == types.parenL) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n\n      var _node8 = this.startNodeAt(startPos, startLoc);\n\n      if (this.eat(types.bracketL)) {\n        _node8.object = base;\n        _node8.property = this.parseExpression();\n        _node8.computed = true;\n        _node8.optional = true;\n        this.expect(types.bracketR);\n        return this.finishNode(_node8, \"OptionalMemberExpression\");\n      } else if (this.eat(types.parenL)) {\n        var possibleAsync = this.atPossibleAsync(base);\n        _node8.callee = base;\n        _node8.arguments = this.parseCallExpressionArguments(types.parenR, possibleAsync);\n        _node8.optional = true;\n        return this.finishNode(_node8, \"OptionalCallExpression\");\n      } else {\n        _node8.object = base;\n        _node8.property = this.parseIdentifier(true);\n        _node8.computed = false;\n        _node8.optional = true;\n        return this.finishNode(_node8, \"OptionalMemberExpression\");\n      }\n    } else if (this.eat(types.dot)) {\n      var _node9 = this.startNodeAt(startPos, startLoc);\n\n      _node9.object = base;\n      _node9.property = this.parseMaybePrivateName();\n      _node9.computed = false;\n\n      if (state.optionalChainMember) {\n        _node9.optional = false;\n        return this.finishNode(_node9, \"OptionalMemberExpression\");\n      }\n\n      return this.finishNode(_node9, \"MemberExpression\");\n    } else if (this.eat(types.bracketL)) {\n      var _node10 = this.startNodeAt(startPos, startLoc);\n\n      _node10.object = base;\n      _node10.property = this.parseExpression();\n      _node10.computed = true;\n      this.expect(types.bracketR);\n\n      if (state.optionalChainMember) {\n        _node10.optional = false;\n        return this.finishNode(_node10, \"OptionalMemberExpression\");\n      }\n\n      return this.finishNode(_node10, \"MemberExpression\");\n    } else if (!noCalls && this.match(types.parenL)) {\n      var _possibleAsync = this.atPossibleAsync(base);\n\n      this.next();\n\n      var _node11 = this.startNodeAt(startPos, startLoc);\n\n      _node11.callee = base;\n      var refTrailingCommaPos = {\n        start: -1 };\n\n      _node11.arguments = this.parseCallExpressionArguments(types.parenR, _possibleAsync, refTrailingCommaPos);\n\n      if (!state.optionalChainMember) {\n        this.finishCallExpression(_node11);\n      } else {\n        this.finishOptionalCallExpression(_node11);\n      }\n\n      if (_possibleAsync && this.shouldParseAsyncArrow()) {\n        state.stop = true;\n\n        if (refTrailingCommaPos.start > -1) {\n          this.raise(refTrailingCommaPos.start, \"A trailing comma is not permitted after the rest element\");\n        }\n\n        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node11);\n      } else {\n        this.toReferencedList(_node11.arguments);\n      }\n\n      return _node11;\n    } else if (this.match(types.backQuote)) {\n      var _node12 = this.startNodeAt(startPos, startLoc);\n\n      _node12.tag = base;\n      _node12.quasi = this.parseTemplate(true);\n\n      if (state.optionalChainMember) {\n        this.raise(startPos, \"Tagged Template Literals are not allowed in optionalChain\");\n      }\n\n      return this.finishNode(_node12, \"TaggedTemplateExpression\");\n    } else {\n      state.stop = true;\n      return base;\n    }\n  };\n\n  _proto.atPossibleAsync = function atPossibleAsync(base) {\n    return !this.state.containsEsc && this.state.potentialArrowAt === base.start && base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon();\n  };\n\n  _proto.finishCallExpression = function finishCallExpression(node) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      }\n\n      var importArg = node.arguments[0];\n\n      if (importArg && importArg.type === \"SpreadElement\") {\n        this.raise(importArg.start, \"... is not allowed in import()\");\n      }\n    }\n\n    return this.finishNode(node, \"CallExpression\");\n  };\n\n  _proto.finishOptionalCallExpression = function finishOptionalCallExpression(node) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      }\n\n      var importArg = node.arguments[0];\n\n      if (importArg && importArg.type === \"SpreadElement\") {\n        this.raise(importArg.start, \"... is not allowed in import()\");\n      }\n    }\n\n    return this.finishNode(node, \"OptionalCallExpression\");\n  };\n\n  _proto.parseCallExpressionArguments = function parseCallExpressionArguments(close, possibleAsyncArrow, refTrailingCommaPos) {\n    var elts = [];\n    var innerParenStart;\n    var first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(close)) break;\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? {\n        start: 0 } :\n      undefined, possibleAsyncArrow ? {\n        start: 0 } :\n      undefined, possibleAsyncArrow ? refTrailingCommaPos : undefined));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    return elts;\n  };\n\n  _proto.shouldParseAsyncArrow = function shouldParseAsyncArrow() {\n    return this.match(types.arrow);\n  };\n\n  _proto.parseAsyncArrowFromCallExpression = function parseAsyncArrowFromCallExpression(node, call) {\n    var oldYield = this.state.yieldInPossibleArrowParameters;\n    this.state.yieldInPossibleArrowParameters = null;\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true);\n    this.state.yieldInPossibleArrowParameters = oldYield;\n    return node;\n  };\n\n  _proto.parseNoCallExpr = function parseNoCallExpr() {\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  };\n\n  _proto.parseExprAtom = function parseExprAtom(refShorthandDefaultPos) {\n    var canBeArrow = this.state.potentialArrowAt === this.state.start;\n    var node;\n\n    switch (this.state.type) {\n      case types._super:\n        if (!this.state.inMethod && !this.state.inClassProperty && !this.options.allowSuperOutsideMethod) {\n          this.raise(this.state.start, \"super is only allowed in object methods and classes\");\n        }\n\n        node = this.startNode();\n        this.next();\n\n        if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n          this.unexpected();\n        }\n\n        if (this.match(types.parenL) && this.state.inMethod !== \"constructor\" && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, \"super() is only valid inside a class constructor. \" + \"Make sure the method name is spelled exactly as 'constructor'.\");\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case types._import:\n        if (this.lookahead().type === types.dot) {\n          return this.parseImportMetaProperty();\n        }\n\n        this.expectPlugin(\"dynamicImport\");\n        node = this.startNode();\n        this.next();\n\n        if (!this.match(types.parenL)) {\n          this.unexpected(null, types.parenL);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types._yield:\n        if (this.state.inGenerator) this.unexpected();\n\n      case types.name:\n        {\n          node = this.startNode();\n          var allowAwait = this.state.value === \"await\" && (this.state.inAsync || !this.state.inFunction && this.options.allowAwaitOutsideFunction);\n          var containsEsc = this.state.containsEsc;\n          var allowYield = this.shouldAllowYieldIdentifier();\n          var id = this.parseIdentifier(allowAwait || allowYield);\n\n          if (id.name === \"await\") {\n            if (this.state.inAsync || this.inModule || !this.state.inFunction && this.options.allowAwaitOutsideFunction) {\n              return this.parseAwait(node);\n            }\n          } else if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseFunction(node, false, false, true);\n          } else if (canBeArrow && id.name === \"async\" && this.match(types.name)) {\n            var oldYield = this.state.yieldInPossibleArrowParameters;\n            this.state.yieldInPossibleArrowParameters = null;\n            var params = [this.parseIdentifier()];\n            this.expect(types.arrow);\n            this.parseArrowExpression(node, params, true);\n            this.state.yieldInPossibleArrowParameters = oldYield;\n            return node;\n          }\n\n          if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n            var _oldYield = this.state.yieldInPossibleArrowParameters;\n            this.state.yieldInPossibleArrowParameters = null;\n            this.parseArrowExpression(node, [id]);\n            this.state.yieldInPossibleArrowParameters = _oldYield;\n            return node;\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          this.expectPlugin(\"doExpressions\");\n\n          var _node13 = this.startNode();\n\n          this.next();\n          var oldInFunction = this.state.inFunction;\n          var oldLabels = this.state.labels;\n          this.state.labels = [];\n          this.state.inFunction = false;\n          _node13.body = this.parseBlock(false);\n          this.state.inFunction = oldInFunction;\n          this.state.labels = oldLabels;\n          return this.finishNode(_node13, \"DoExpression\");\n        }\n\n      case types.regexp:\n        {\n          var value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketL:\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(types.bracketR, true, refShorthandDefaultPos);\n        this.toReferencedList(node.elements);\n        return this.finishNode(node, \"ArrayExpression\");\n\n      case types.braceL:\n        return this.parseObj(false, refShorthandDefaultPos);\n\n      case types._function:\n        return this.parseFunctionExpression();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNew();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          var callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, \"Binding should be performed on object property.\");\n          }\n        }\n\n      default:\n        throw this.unexpected();}\n\n  };\n\n  _proto.parseBooleanLiteral = function parseBooleanLiteral() {\n    var node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  };\n\n  _proto.parseMaybePrivateName = function parseMaybePrivateName() {\n    var isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      var _node14 = this.startNode();\n\n      this.next();\n      _node14.id = this.parseIdentifier(true);\n      return this.finishNode(_node14, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  };\n\n  _proto.parseFunctionExpression = function parseFunctionExpression() {\n    var node = this.startNode();\n    var meta = this.parseIdentifier(true);\n\n    if (this.state.inGenerator && this.eat(types.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node, false);\n  };\n\n  _proto.parseMetaProperty = function parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    var containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, \"The only valid meta property for \" + meta.name + \" is \" + meta.name + \".\" + propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  };\n\n  _proto.parseImportMetaProperty = function parseImportMetaProperty() {\n    var node = this.startNode();\n    var id = this.parseIdentifier(true);\n    this.expect(types.dot);\n\n    if (id.name === \"import\") {\n      if (this.isContextual(\"meta\")) {\n        this.expectPlugin(\"importMeta\");\n      } else if (!this.hasPlugin(\"importMeta\")) {\n        this.raise(id.start, \"Dynamic imports require a parameter: import('a.js').then\");\n      }\n    }\n\n    if (!this.inModule) {\n      this.raise(id.start, \"import.meta may appear only with 'sourceType: \\\"module\\\"'\", {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" });\n\n    }\n\n    this.sawUnambiguousESM = true;\n    return this.parseMetaProperty(node, id, \"meta\");\n  };\n\n  _proto.parseLiteral = function parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    var node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  };\n\n  _proto.parseParenExpression = function parseParenExpression() {\n    this.expect(types.parenL);\n    var val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  };\n\n  _proto.parseParenAndDistinguishExpression = function parseParenAndDistinguishExpression(canBeArrow) {\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    var val;\n    this.expect(types.parenL);\n    var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    var oldYield = this.state.yieldInPossibleArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldInPossibleArrowParameters = null;\n    var innerStartPos = this.state.start;\n    var innerStartLoc = this.state.startLoc;\n    var exprList = [];\n    var refShorthandDefaultPos = {\n      start: 0 };\n\n    var refNeedsArrowPos = {\n      start: 0 };\n\n    var first = true;\n    var spreadStart;\n    var optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        var spreadNodeStartPos = this.state.start;\n        var spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartPos, spreadNodeStartLoc));\n\n        if (this.match(types.comma) && this.lookahead().type === types.parenR) {\n          this.raise(this.state.start, \"A trailing comma is not permitted after the rest element\");\n        }\n\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    var innerEndPos = this.state.start;\n    var innerEndLoc = this.state.startLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    var arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      for (var _i2 = 0; _i2 < exprList.length; _i2++) {\n        var param = exprList[_i2];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList);\n      this.state.yieldInPossibleArrowParameters = oldYield;\n      return arrowNode;\n    }\n\n    this.state.yieldInPossibleArrowParameters = oldYield;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n\n    if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.toReferencedList(val.expressions);\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    this.addExtra(val, \"parenthesized\", true);\n    this.addExtra(val, \"parenStart\", startPos);\n    return val;\n  };\n\n  _proto.shouldParseArrow = function shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  };\n\n  _proto.parseArrow = function parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  };\n\n  _proto.parseParenItem = function parseParenItem(node, startPos, startLoc) {\n    return node;\n  };\n\n  _proto.parseNew = function parseNew() {\n    var node = this.startNode();\n    var meta = this.parseIdentifier(true);\n\n    if (this.eat(types.dot)) {\n      var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.state.inFunction && !this.state.inClassProperty) {\n        var error = \"new.target can only be used in functions\";\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, \"constructors in/after an Optional Chain are not allowed\");\n    }\n\n    if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, \"constructors in/after an Optional Chain are not allowed\");\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  };\n\n  _proto.parseNewArguments = function parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      var args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  };\n\n  _proto.parseTemplateElement = function parseTemplateElement(isTagged) {\n    var elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.invalidTemplateEscapePosition || 0, \"Invalid escape sequence in template\");\n      } else {\n        this.state.invalidTemplateEscapePosition = null;\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value };\n\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  };\n\n  _proto.parseTemplate = function parseTemplate(isTagged) {\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  };\n\n  _proto.parseObj = function parseObj(isPattern, refShorthandDefaultPos) {\n    var decorators = [];\n    var propHash = Object.create(null);\n    var first = true;\n    var node = this.startNode();\n    node.properties = [];\n    this.next();\n    var firstRestLocation = null;\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      if (this.match(types.at)) {\n        if (this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, \"Stage 2 decorators disallow object literal property decorators\");\n        } else {\n          while (this.match(types.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n      }\n\n      var prop = this.startNode(),\n      isGenerator = false,\n      _isAsync = false,\n      startPos = void 0,\n      startLoc = void 0;\n\n      if (decorators.length) {\n        prop.decorators = decorators;\n        decorators = [];\n      }\n\n      if (this.match(types.ellipsis)) {\n        this.expectPlugin(\"objectRestSpread\");\n        prop = this.parseSpread(isPattern ? {\n          start: 0 } :\n        undefined);\n\n        if (isPattern) {\n          this.toAssignable(prop, true, \"object pattern\");\n        }\n\n        node.properties.push(prop);\n\n        if (isPattern) {\n          var position = this.state.start;\n\n          if (firstRestLocation !== null) {\n            this.unexpected(firstRestLocation, \"Cannot have multiple rest elements when destructuring\");\n          } else if (this.eat(types.braceR)) {\n            break;\n          } else if (this.match(types.comma) && this.lookahead().type === types.braceR) {\n            this.unexpected(position, \"A trailing comma is not permitted after the rest element\");\n          } else {\n            firstRestLocation = position;\n            continue;\n          }\n        } else {\n          continue;\n        }\n      }\n\n      prop.method = false;\n\n      if (isPattern || refShorthandDefaultPos) {\n        startPos = this.state.start;\n        startLoc = this.state.startLoc;\n      }\n\n      if (!isPattern) {\n        isGenerator = this.eat(types.star);\n      }\n\n      var containsEsc = this.state.containsEsc;\n\n      if (!isPattern && this.isContextual(\"async\")) {\n        if (isGenerator) this.unexpected();\n        var asyncId = this.parseIdentifier();\n\n        if (this.match(types.colon) || this.match(types.parenL) || this.match(types.braceR) || this.match(types.eq) || this.match(types.comma)) {\n          prop.key = asyncId;\n          prop.computed = false;\n        } else {\n          _isAsync = true;\n\n          if (this.match(types.star)) {\n            this.expectPlugin(\"asyncGenerators\");\n            this.next();\n            isGenerator = true;\n          }\n\n          this.parsePropertyName(prop);\n        }\n      } else {\n        this.parsePropertyName(prop);\n      }\n\n      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, _isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n      this.checkPropClash(prop, propHash);\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    if (firstRestLocation !== null) {\n      this.unexpected(firstRestLocation, \"The rest element has to be the last element when destructuring\");\n    }\n\n    if (decorators.length) {\n      this.raise(this.state.start, \"You have trailing decorators with no property\");\n    }\n\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n  };\n\n  _proto.isGetterOrSetterMethod = function isGetterOrSetterMethod(prop, isPattern) {\n    return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || this.match(types.num) || this.match(types.bracketL) || this.match(types.name) || !!this.state.type.keyword);\n  };\n\n  _proto.checkGetterSetterParams = function checkGetterSetterParams(method) {\n    var paramCount = method.kind === \"get\" ? 0 : 1;\n    var start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[0].type === \"RestElement\") {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  };\n\n  _proto.parseObjectMethod = function parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, \"ObjectMethod\");\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      this.parseMethod(prop, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  };\n\n  _proto.parseObjectProperty = function parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refShorthandDefaultPos) {\n        if (!refShorthandDefaultPos.start) {\n          refShorthandDefaultPos.start = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  };\n\n  _proto.parseObjPropValue = function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n    var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n    if (!node) this.unexpected();\n    return node;\n  };\n\n  _proto.parsePropertyName = function parsePropertyName(prop) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n    } else {\n      var oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseMaybePrivateName();\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  };\n\n  _proto.initFunction = function initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  };\n\n  _proto.parseMethod = function parseMethod(node, isGenerator, isAsync, isConstructor, type) {\n    var oldInFunc = this.state.inFunction;\n    var oldInMethod = this.state.inMethod;\n    var oldInGenerator = this.state.inGenerator;\n    this.state.inFunction = true;\n    this.state.inMethod = node.kind || true;\n    this.state.inGenerator = isGenerator;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    var allowModifiers = isConstructor;\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type);\n    this.state.inFunction = oldInFunc;\n    this.state.inMethod = oldInMethod;\n    this.state.inGenerator = oldInGenerator;\n    return node;\n  };\n\n  _proto.parseArrowExpression = function parseArrowExpression(node, params, isAsync) {\n    if (this.state.yieldInPossibleArrowParameters) {\n      this.raise(this.state.yieldInPossibleArrowParameters.start, \"yield is not allowed in the parameters of an arrow function\" + \" inside a generator\");\n    }\n\n    var oldInFunc = this.state.inFunction;\n    this.state.inFunction = true;\n    this.initFunction(node, isAsync);\n    if (params) this.setArrowFunctionParameters(node, params);\n    var oldInGenerator = this.state.inGenerator;\n    var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.inGenerator = false;\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.state.inGenerator = oldInGenerator;\n    this.state.inFunction = oldInFunc;\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  };\n\n  _proto.setArrowFunctionParameters = function setArrowFunctionParameters(node, params) {\n    node.params = this.toAssignableList(params, true, \"arrow function parameters\");\n  };\n\n  _proto.isStrictBody = function isStrictBody(node) {\n    var isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.directives.length) {\n      for (var _i4 = 0, _node$body$directives2 = node.body.directives; _i4 < _node$body$directives2.length; _i4++) {\n        var directive = _node$body$directives2[_i4];\n\n        if (directive.value.value === \"use strict\") {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  _proto.parseFunctionBodyAndFinish = function parseFunctionBodyAndFinish(node, type, allowExpressionBody) {\n    this.parseFunctionBody(node, allowExpressionBody);\n    this.finishNode(node, type);\n  };\n\n  _proto.parseFunctionBody = function parseFunctionBody(node, allowExpression) {\n    var isExpression = allowExpression && !this.match(types.braceL);\n    var oldInParameters = this.state.inParameters;\n    var oldInAsync = this.state.inAsync;\n    this.state.inParameters = false;\n    this.state.inAsync = node.async;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n    } else {\n      var oldInGen = this.state.inGenerator;\n      var oldInFunc = this.state.inFunction;\n      var oldLabels = this.state.labels;\n      this.state.inGenerator = node.generator;\n      this.state.inFunction = true;\n      this.state.labels = [];\n      node.body = this.parseBlock(true);\n      this.state.inFunction = oldInFunc;\n      this.state.inGenerator = oldInGen;\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inAsync = oldInAsync;\n    this.checkFunctionNameAndParams(node, allowExpression);\n    this.state.inParameters = oldInParameters;\n  };\n\n  _proto.checkFunctionNameAndParams = function checkFunctionNameAndParams(node, isArrowFunction) {\n    var isStrict = this.isStrictBody(node);\n    var checkLVal = this.state.strict || isStrict || isArrowFunction;\n    var oldStrict = this.state.strict;\n    if (isStrict) this.state.strict = isStrict;\n\n    if (checkLVal) {\n      var nameHash = Object.create(null);\n\n      if (node.id) {\n        this.checkLVal(node.id, true, undefined, \"function name\");\n      }\n\n      for (var _i6 = 0, _node$params2 = node.params; _i6 < _node$params2.length; _i6++) {\n        var param = _node$params2[_i6];\n\n        if (isStrict && param.type !== \"Identifier\") {\n          this.raise(param.start, \"Non-simple parameter in strict mode\");\n        }\n\n        this.checkLVal(param, true, nameHash, \"function parameter list\");\n      }\n    }\n\n    this.state.strict = oldStrict;\n  };\n\n  _proto.parseExprList = function parseExprList(close, allowEmpty, refShorthandDefaultPos) {\n    var elts = [];\n    var first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(close)) break;\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n    }\n\n    return elts;\n  };\n\n  _proto.parseExprListItem = function parseExprListItem(allowEmpty, refShorthandDefaultPos, refNeedsArrowPos, refTrailingCommaPos) {\n    var elt;\n\n    if (allowEmpty && this.match(types.comma)) {\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      var spreadNodeStartPos = this.state.start;\n      var spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n\n      if (refTrailingCommaPos && this.match(types.comma)) {\n        refTrailingCommaPos.start = this.state.start;\n      }\n    } else {\n      elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  };\n\n  _proto.parseIdentifier = function parseIdentifier(liberal) {\n    var node = this.startNode();\n    var name = this.parseIdentifierName(node.start, liberal);\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  };\n\n  _proto.parseIdentifierName = function parseIdentifierName(pos, liberal) {\n    if (!liberal) {\n      this.checkReservedWord(this.state.value, this.state.start, !!this.state.type.keyword, false);\n    }\n\n    var name;\n\n    if (this.match(types.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n    } else {\n      throw this.unexpected();\n    }\n\n    if (!liberal && name === \"await\" && this.state.inAsync) {\n      this.raise(pos, \"invalid use of await inside of an async function\");\n    }\n\n    this.next();\n    return name;\n  };\n\n  _proto.checkReservedWord = function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.state.strict && (reservedWords.strict(word) || isBinding && reservedWords.strictBind(word))) {\n      this.raise(startLoc, word + \" is a reserved word in strict mode\");\n    }\n\n    if (this.state.inGenerator && word === \"yield\") {\n      this.raise(startLoc, \"yield is a reserved word inside generator functions\");\n    }\n\n    if (this.state.inClassProperty && word === \"arguments\") {\n      this.raise(startLoc, \"'arguments' is not allowed in class field initializer\");\n    }\n\n    if (this.isReservedWord(word) || checkKeywords && this.isKeyword(word)) {\n      this.raise(startLoc, word + \" is a reserved word\");\n    }\n  };\n\n  _proto.parseAwait = function parseAwait(node) {\n    if (!this.state.inAsync && (this.state.inFunction || !this.options.allowAwaitOutsideFunction)) {\n      this.unexpected();\n    }\n\n    if (this.match(types.star)) {\n      this.raise(node.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\");\n    }\n\n    node.argument = this.parseMaybeUnary();\n    return this.finishNode(node, \"AwaitExpression\");\n  };\n\n  _proto.parseYield = function parseYield() {\n    var node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"yield is not allowed in generator parameters\");\n    }\n\n    if (this.state.maybeInArrowParameters && !this.state.yieldInPossibleArrowParameters) {\n      this.state.yieldInPossibleArrowParameters = node;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || this.canInsertSemicolon() || !this.match(types.star) && !this.state.type.startsExpr) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  };\n\n  _inheritsLoose(ExpressionParser, _LValParser);\n\n  return ExpressionParser;\n}(LValParser);\n\nvar empty = [];\nvar loopLabel = {\n  kind: \"loop\" };\n\nvar switchLabel = {\n  kind: \"switch\" };\n\n\nvar StatementParser = function (_ExpressionParser) {\n  function StatementParser() {\n    return _ExpressionParser.apply(this, arguments) || this;\n  }\n\n  var _proto = StatementParser.prototype;\n\n  _proto.parseTopLevel = function parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    this.parseBlockBody(program, true, true, types.eof);\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.state.tokens;\n    return this.finishNode(file, \"File\");\n  };\n\n  _proto.stmtToDirective = function stmtToDirective(stmt) {\n    var expr = stmt.expression;\n    var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    var directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    var raw = this.input.slice(expr.start, expr.end);\n    var val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  };\n\n  _proto.parseStatement = function parseStatement(declaration, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(declaration, topLevel);\n  };\n\n  _proto.parseStatementContent = function parseStatementContent(declaration, topLevel) {\n    var starttype = this.state.type;\n    var node = this.startNode();\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookahead().type === types.dot) break;\n        if (!declaration) this.unexpected();\n        return this.parseFunctionStatement(node);\n\n      case types._class:\n        if (!declaration) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._let:\n      case types._const:\n        if (!declaration) this.unexpected();\n\n      case types._var:\n        return this.parseVarStatement(node, starttype);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._export:\n      case types._import:\n        {\n          var nextToken = this.lookahead();\n\n          if (nextToken.type === types.parenL || nextToken.type === types.dot) {\n            break;\n          }\n\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\");\n          }\n\n          this.next();\n          var result;\n\n          if (starttype == types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      case types.name:\n        if (this.isContextual(\"async\")) {\n          var state = this.state.clone();\n          this.next();\n\n          if (this.match(types._function) && !this.canInsertSemicolon()) {\n            this.expect(types._function);\n            return this.parseFunction(node, true, false, true);\n          } else {\n            this.state = state;\n          }\n        }}\n\n\n\n    var maybeName = this.state.value;\n    var expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  };\n\n  _proto.assertModuleNodeAllowed = function assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\", {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" });\n\n    }\n  };\n\n  _proto.takeDecorators = function takeDecorators(node) {\n    var decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  };\n\n  _proto.canHaveLeadingDecorator = function canHaveLeadingDecorator() {\n    return this.match(types._class);\n  };\n\n  _proto.parseDecorators = function parseDecorators(allowExport) {\n    if (this.hasPlugin(\"decorators\")) {\n      allowExport = false;\n    }\n\n    var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      var decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (allowExport) {\n        return;\n      } else {\n        this.raise(this.state.start, \"Using the export keyword between a decorator and a class is not allowed. \" + \"Please use `export @dec class` instead\");\n      }\n    }\n\n    if (!this.canHaveLeadingDecorator()) {\n      this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n    }\n  };\n\n  _proto.parseDecorator = function parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    var node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n\n      if (this.eat(types.parenL)) {\n        node.callee = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          var _node = this.startNodeAt(startPos, startLoc);\n\n          _node.object = expr;\n          _node.property = this.parseIdentifier(true);\n          _node.computed = false;\n          expr = this.finishNode(_node, \"MemberExpression\");\n        }\n\n        node.callee = expr;\n      }\n\n      if (this.eat(types.parenL)) {\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        this.toReferencedList(node.arguments);\n      }\n\n      this.state.decoratorStack.pop();\n    } else {\n      node.callee = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  };\n\n  _proto.parseBreakContinueStatement = function parseBreakContinueStatement(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else if (!this.match(types.name)) {\n      this.unexpected();\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    var i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      var lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, \"Unsyntactic \" + keyword);\n    }\n\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  };\n\n  _proto.parseDebuggerStatement = function parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  };\n\n  _proto.parseDoStatement = function parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.parseStatement(false);\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseParenExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  };\n\n  _proto.parseForStatement = function parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    var forAwait = false;\n\n    if (this.state.inAsync && this.isContextual(\"await\")) {\n      this.expectPlugin(\"asyncGenerators\");\n      forAwait = true;\n      this.next();\n    }\n\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (forAwait) {\n        this.unexpected();\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    if (this.match(types._var) || this.match(types._let) || this.match(types._const)) {\n      var _init = this.startNode();\n\n      var varKind = this.state.type;\n      this.next();\n      this.parseVar(_init, true, varKind);\n      this.finishNode(_init, \"VariableDeclaration\");\n\n      if (this.match(types._in) || this.isContextual(\"of\")) {\n        if (_init.declarations.length === 1) {\n          var declaration = _init.declarations[0];\n          var isForInInitializer = varKind === types._var && declaration.init && declaration.id.type != \"ObjectPattern\" && declaration.id.type != \"ArrayPattern\" && !this.isContextual(\"of\");\n\n          if (this.state.strict && isForInInitializer) {\n            this.raise(this.state.start, \"for-in initializer in strict mode\");\n          } else if (isForInInitializer || !declaration.init) {\n            return this.parseForIn(node, _init, forAwait);\n          }\n        }\n      }\n\n      if (forAwait) {\n        this.unexpected();\n      }\n\n      return this.parseFor(node, _init);\n    }\n\n    var refShorthandDefaultPos = {\n      start: 0 };\n\n    var init = this.parseExpression(true, refShorthandDefaultPos);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      var description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.toAssignable(init, undefined, description);\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, forAwait);\n    } else if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (forAwait) {\n      this.unexpected();\n    }\n\n    return this.parseFor(node, init);\n  };\n\n  _proto.parseFunctionStatement = function parseFunctionStatement(node) {\n    this.next();\n    return this.parseFunction(node, true);\n  };\n\n  _proto.parseIfStatement = function parseIfStatement(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    node.consequent = this.parseStatement(false);\n    node.alternate = this.eat(types._else) ? this.parseStatement(false) : null;\n    return this.finishNode(node, \"IfStatement\");\n  };\n\n  _proto.parseReturnStatement = function parseReturnStatement(node) {\n    if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, \"'return' outside of function\");\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  };\n\n  _proto.parseSwitchStatement = function parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    var cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    var cur;\n\n    for (var sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        var isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(true));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  };\n\n  _proto.parseThrowStatement = function parseThrowStatement(node) {\n    this.next();\n\n    if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) {\n      this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  };\n\n  _proto.parseTryStatement = function parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      var clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseBindingAtom();\n        var clashes = Object.create(null);\n        this.checkLVal(clause.param, true, clashes, \"catch clause\");\n        this.expect(types.parenR);\n      } else {\n        this.expectPlugin(\"optionalCatchBinding\");\n        clause.param = null;\n      }\n\n      clause.body = this.parseBlock();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.guardedHandlers = empty;\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, \"Missing catch or finally clause\");\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  };\n\n  _proto.parseVarStatement = function parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  };\n\n  _proto.parseWhileStatement = function parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.parseStatement(false);\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  };\n\n  _proto.parseWithStatement = function parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, \"'with' in strict mode\");\n    }\n\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(false);\n    return this.finishNode(node, \"WithStatement\");\n  };\n\n  _proto.parseEmptyStatement = function parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  };\n\n  _proto.parseLabeledStatement = function parseLabeledStatement(node, maybeName, expr) {\n    for (var _i2 = 0, _this$state$labels2 = this.state.labels; _i2 < _this$state$labels2.length; _i2++) {\n      var label = _this$state$labels2[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n      }\n    }\n\n    var kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (var i = this.state.labels.length - 1; i >= 0; i--) {\n      var _label = this.state.labels[i];\n\n      if (_label.statementStart === node.start) {\n        _label.statementStart = this.state.start;\n        _label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start });\n\n    node.body = this.parseStatement(true);\n\n    if (node.body.type == \"ClassDeclaration\" || node.body.type == \"VariableDeclaration\" && node.body.kind !== \"var\" || node.body.type == \"FunctionDeclaration\" && (this.state.strict || node.body.generator || node.body.async)) {\n      this.raise(node.body.start, \"Invalid labeled declaration\");\n    }\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  };\n\n  _proto.parseExpressionStatement = function parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  };\n\n  _proto.parseBlock = function parseBlock(allowDirectives) {\n    var node = this.startNode();\n    this.expect(types.braceL);\n    this.parseBlockBody(node, allowDirectives, false, types.braceR);\n    return this.finishNode(node, \"BlockStatement\");\n  };\n\n  _proto.isValidDirective = function isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  };\n\n  _proto.parseBlockBody = function parseBlockBody(node, allowDirectives, topLevel, end) {\n    var body = node.body = [];\n    var directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end);\n  };\n\n  _proto.parseBlockOrModuleBlockBody = function parseBlockOrModuleBlockBody(body, directives, topLevel, end) {\n    var parsedNonDirective = false;\n    var oldStrict;\n    var octalPosition;\n\n    while (!this.eat(end)) {\n      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n        octalPosition = this.state.octalPosition;\n      }\n\n      var stmt = this.parseStatement(true, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        var directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === undefined && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n\n          if (octalPosition) {\n            this.raise(octalPosition, \"Octal literal in strict mode\");\n          }\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  };\n\n  _proto.parseFor = function parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.parseStatement(false);\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  };\n\n  _proto.parseForIn = function parseForIn(node, init, forAwait) {\n    var type = this.match(types._in) ? \"ForInStatement\" : \"ForOfStatement\";\n\n    if (forAwait) {\n      this.eatContextual(\"of\");\n    } else {\n      this.next();\n    }\n\n    if (type === \"ForOfStatement\") {\n      node.await = !!forAwait;\n    }\n\n    node.left = init;\n    node.right = this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.parseStatement(false);\n    this.state.labels.pop();\n    return this.finishNode(node, type);\n  };\n\n  _proto.parseVar = function parseVar(node, isFor, kind) {\n    var declarations = node.declarations = [];\n    node.kind = kind.keyword;\n\n    for (;;) {\n      var decl = this.startNode();\n      this.parseVarHead(decl);\n\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (kind === types._const && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!this.hasPlugin(\"typescript\")) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  };\n\n  _proto.parseVarHead = function parseVarHead(decl) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, true, undefined, \"variable declaration\");\n  };\n\n  _proto.parseFunction = function parseFunction(node, isStatement, allowExpressionBody, isAsync, optionalId) {\n    var oldInFunc = this.state.inFunction;\n    var oldInMethod = this.state.inMethod;\n    var oldInGenerator = this.state.inGenerator;\n    var oldInClassProperty = this.state.inClassProperty;\n    this.state.inFunction = true;\n    this.state.inMethod = false;\n    this.state.inClassProperty = false;\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star)) {\n      if (node.async) {\n        this.expectPlugin(\"asyncGenerators\");\n      }\n\n      node.generator = true;\n      this.next();\n    }\n\n    if (isStatement && !optionalId && !this.match(types.name) && !this.match(types._yield)) {\n      this.unexpected();\n    }\n\n    if (!isStatement) this.state.inGenerator = node.generator;\n\n    if (this.match(types.name) || this.match(types._yield)) {\n      node.id = this.parseBindingIdentifier();\n    }\n\n    if (isStatement) this.state.inGenerator = node.generator;\n    this.parseFunctionParams(node);\n    this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\", allowExpressionBody);\n    this.state.inFunction = oldInFunc;\n    this.state.inMethod = oldInMethod;\n    this.state.inGenerator = oldInGenerator;\n    this.state.inClassProperty = oldInClassProperty;\n    return node;\n  };\n\n  _proto.parseFunctionParams = function parseFunctionParams(node, allowModifiers) {\n    var oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n  };\n\n  _proto.parseClass = function parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    this.parseClassBody(node);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  };\n\n  _proto.isClassProperty = function isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  };\n\n  _proto.isClassMethod = function isClassMethod() {\n    return this.match(types.parenL);\n  };\n\n  _proto.isNonstaticConstructor = function isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  };\n\n  _proto.parseClassBody = function parseClassBody(node) {\n    var oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.state.classLevel++;\n    var state = {\n      hadConstructor: false };\n\n    var decorators = [];\n    var classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (this.eat(types.semi)) {\n        if (decorators.length > 0) {\n          this.raise(this.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n        }\n\n        continue;\n      }\n\n      if (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n        continue;\n      }\n\n      var member = this.startNode();\n\n      if (decorators.length) {\n        member.decorators = decorators;\n        this.resetStartLocationFromNode(member, decorators[0]);\n        decorators = [];\n      }\n\n      this.parseClassMember(classBody, member, state);\n\n      if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n        this.raise(member.start, \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\");\n      }\n    }\n\n    if (decorators.length) {\n      this.raise(this.state.start, \"You have trailing decorators with no method\");\n    }\n\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.state.classLevel--;\n    this.state.strict = oldStrict;\n  };\n\n  _proto.parseClassMember = function parseClassMember(classBody, member, state) {\n    var isStatic = false;\n    var containsEsc = this.state.containsEsc;\n\n    if (this.match(types.name) && this.state.value === \"static\") {\n      var key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        var method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false);\n        return;\n      } else if (this.isClassProperty()) {\n        var prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  };\n\n  _proto.parseClassMemberWithIsStatic = function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    var publicMethod = member;\n    var privateMethod = member;\n    var publicProp = member;\n    var privateProp = member;\n    var method = publicMethod;\n    var publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, \"Constructor can't be a generator\");\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false);\n      return;\n    }\n\n    var key = this.parseClassPropertyName(member);\n    var isPrivate = key.type === \"PrivateName\";\n    var isSimple = key.type === \"Identifier\";\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      var isConstructor = this.isNonstaticConstructor(publicMethod);\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (publicMethod.decorators) {\n          this.raise(publicMethod.start, \"You can't attach decorators to a class constructor\");\n        }\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, \"Duplicate constructor in the same class\");\n        }\n\n        state.hadConstructor = true;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !this.isLineTerminator()) {\n      var isGenerator = this.match(types.star);\n\n      if (isGenerator) {\n        this.expectPlugin(\"asyncGenerators\");\n        this.next();\n      }\n\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, \"Constructor can't be an async function\");\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !(this.isLineTerminator() && this.match(types.star))) {\n      method.kind = key.name;\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, \"Constructor can't have get/set modifier\");\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  };\n\n  _proto.parseClassPropertyName = function parseClassPropertyName(member) {\n    var key = this.parsePropertyName(member);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, \"Classes may not have static property named prototype\");\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, \"Classes may not have a private field named '#constructor'\");\n    }\n\n    return key;\n  };\n\n  _proto.pushClassProperty = function pushClassProperty(classBody, prop) {\n    if (this.isNonstaticConstructor(prop)) {\n      this.raise(prop.key.start, \"Classes may not have a non-static field named 'constructor'\");\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  };\n\n  _proto.pushClassPrivateProperty = function pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    classBody.body.push(this.parseClassPrivateProperty(prop));\n  };\n\n  _proto.pushClassMethod = function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, \"ClassMethod\"));\n  };\n\n  _proto.pushClassPrivateMethod = function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, false, \"ClassPrivateMethod\"));\n  };\n\n  _proto.parsePostMemberNameModifiers = function parsePostMemberNameModifiers(methodOrProp) {};\n\n  _proto.parseAccessModifier = function parseAccessModifier() {\n    return undefined;\n  };\n\n  _proto.parseClassPrivateProperty = function parseClassPrivateProperty(node) {\n    var oldInMethod = this.state.inMethod;\n    this.state.inMethod = false;\n    this.state.inClassProperty = true;\n    node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.state.inClassProperty = false;\n    this.state.inMethod = oldInMethod;\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  };\n\n  _proto.parseClassProperty = function parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    var oldInMethod = this.state.inMethod;\n    this.state.inMethod = false;\n    this.state.inClassProperty = true;\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.state.inClassProperty = false;\n    this.state.inMethod = oldInMethod;\n    return this.finishNode(node, \"ClassProperty\");\n  };\n\n  _proto.parseClassId = function parseClassId(node, isStatement, optionalId) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    }\n  };\n\n  _proto.parseClassSuper = function parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  };\n\n  _proto.parseExport = function parseExport(node) {\n    if (this.shouldParseExportStar()) {\n      this.parseExportStar(node);\n      if (node.type === \"ExportAllDeclaration\") return node;\n    } else if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      var specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      var specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      node.specifiers = specifiers;\n\n      if (this.match(types.comma) && this.lookahead().type === types.star) {\n        this.expect(types.comma);\n\n        var _specifier = this.startNode();\n\n        this.expect(types.star);\n        this.expectContextual(\"as\");\n        _specifier.exported = this.parseIdentifier();\n        specifiers.push(this.finishNode(_specifier, \"ExportNamespaceSpecifier\"));\n      } else {\n        this.parseExportSpecifiersMaybe(node);\n      }\n\n      this.parseExportFrom(node, true);\n    } else if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    } else if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        var next = this.lookahead();\n\n        if (next.type !== types._function) {\n          this.unexpected(next.start, \"Unexpected token, expected \\\"function\\\"\");\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n    } else {\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifiers();\n      this.parseExportFrom(node);\n    }\n\n    this.checkExport(node, true);\n    return this.finishNode(node, \"ExportNamedDeclaration\");\n  };\n\n  _proto.parseExportDefaultExpression = function parseExportDefaultExpression() {\n    var expr = this.startNode();\n\n    if (this.eat(types._function)) {\n      return this.parseFunction(expr, true, false, false, true);\n    } else if (this.isContextual(\"async\") && this.lookahead().type === types._function) {\n      this.eatContextual(\"async\");\n      this.eat(types._function);\n      return this.parseFunction(expr, true, false, true, true);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._let) || this.match(types._const) || this.match(types._var)) {\n      return this.raise(this.state.start, \"Only expressions, functions or classes are allowed as the `default` export.\");\n    } else {\n      var res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  };\n\n  _proto.parseExportDeclaration = function parseExportDeclaration(node) {\n    return this.parseStatement(true);\n  };\n\n  _proto.isExportDefaultSpecifier = function isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      return this.state.value !== \"async\";\n    }\n\n    if (!this.match(types._default)) {\n      return false;\n    }\n\n    var lookahead = this.lookahead();\n    return lookahead.type === types.comma || lookahead.type === types.name && lookahead.value === \"from\";\n  };\n\n  _proto.parseExportSpecifiersMaybe = function parseExportSpecifiersMaybe(node) {\n    if (this.eat(types.comma)) {\n      node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());\n    }\n  };\n\n  _proto.parseExportFrom = function parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.match(types.string) ? this.parseExprAtom() : this.unexpected();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  };\n\n  _proto.shouldParseExportStar = function shouldParseExportStar() {\n    return this.match(types.star);\n  };\n\n  _proto.parseExportStar = function parseExportStar(node) {\n    this.expect(types.star);\n\n    if (this.isContextual(\"as\")) {\n      this.parseExportNamespace(node);\n    } else {\n      this.parseExportFrom(node, true);\n      this.finishNode(node, \"ExportAllDeclaration\");\n    }\n  };\n\n  _proto.parseExportNamespace = function parseExportNamespace(node) {\n    this.expectPlugin(\"exportNamespaceFrom\");\n    var specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n    this.next();\n    specifier.exported = this.parseIdentifier(true);\n    node.specifiers = [this.finishNode(specifier, \"ExportNamespaceSpecifier\")];\n    this.parseExportSpecifiersMaybe(node);\n    this.parseExportFrom(node, true);\n  };\n\n  _proto.shouldParseExportDeclaration = function shouldParseExportDeclaration() {\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"let\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isContextual(\"async\") || this.match(types.at) && this.expectPlugin(\"decorators\");\n  };\n\n  _proto.checkExport = function checkExport(node, checkNames, isDefault) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        for (var _i4 = 0, _node$specifiers2 = node.specifiers; _i4 < _node$specifiers2.length; _i4++) {\n          var specifier = _node$specifiers2[_i4];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          var id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (var _i6 = 0, _node$declaration$dec2 = node.declaration.declarations; _i6 < _node$declaration$dec2.length; _i6++) {\n            var declaration = _node$declaration$dec2[_i6];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      var isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, \"You can only use decorators on an export when exporting a class\");\n      }\n\n      this.takeDecorators(node.declaration);\n    }\n  };\n\n  _proto.checkDeclaration = function checkDeclaration(node) {\n    if (node.type === \"ObjectPattern\") {\n      for (var _i8 = 0, _node$properties2 = node.properties; _i8 < _node$properties2.length; _i8++) {\n        var prop = _node$properties2[_i8];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (var _i10 = 0, _node$elements2 = node.elements; _i10 < _node$elements2.length; _i10++) {\n        var elem = _node$elements2[_i10];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    }\n  };\n\n  _proto.checkDuplicateExports = function checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raiseDuplicateExportError(node, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  };\n\n  _proto.raiseDuplicateExportError = function raiseDuplicateExportError(node, name) {\n    throw this.raise(node.start, name === \"default\" ? \"Only one default export allowed per module.\" : \"`\" + name + \"` has already been exported. Exported identifiers must be unique.\");\n  };\n\n  _proto.parseExportSpecifiers = function parseExportSpecifiers() {\n    var nodes = [];\n    var first = true;\n    var needsFrom;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      var isDefault = this.match(types._default);\n      if (isDefault && !needsFrom) needsFrom = true;\n      var node = this.startNode();\n      node.local = this.parseIdentifier(isDefault);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    if (needsFrom && !this.isContextual(\"from\")) {\n      this.unexpected();\n    }\n\n    return nodes;\n  };\n\n  _proto.parseImport = function parseImport(node) {\n    if (this.match(types.string)) {\n      node.specifiers = [];\n      node.source = this.parseExprAtom();\n    } else {\n      node.specifiers = [];\n      this.parseImportSpecifiers(node);\n      this.expectContextual(\"from\");\n      node.source = this.match(types.string) ? this.parseExprAtom() : this.unexpected();\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  };\n\n  _proto.shouldParseDefaultImport = function shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  };\n\n  _proto.parseImportSpecifierLocal = function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, true, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  };\n\n  _proto.parseImportSpecifiers = function parseImportSpecifiers(node) {\n    var first = true;\n\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      if (!this.eat(types.comma)) return;\n    }\n\n    if (this.match(types.star)) {\n      var specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return;\n    }\n\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          this.unexpected(null, \"ES2015 named imports do not destructure. \" + \"Use another statement for destructuring after the import.\");\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  };\n\n  _proto.parseImportSpecifier = function parseImportSpecifier(node) {\n    var specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  };\n\n  _inheritsLoose(StatementParser, _ExpressionParser);\n\n  return StatementParser;\n}(ExpressionParser);\n\nvar plugins = {};\n\nvar Parser = function (_StatementParser) {\n  function Parser(options, input) {\n    var _this;\n\n    options = getOptions(options);\n    _this = _StatementParser.call(this, options, input) || this;\n    _this.options = options;\n    _this.inModule = _this.options.sourceType === \"module\";\n    _this.input = input;\n    _this.plugins = pluginsMap(_this.options.plugins);\n    _this.filename = options.sourceFilename;\n\n    if (_this.state.pos === 0 && _this.input[0] === \"#\" && _this.input[1] === \"!\") {\n      _this.skipLineComment(2);\n    }\n\n    return _this;\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto.parse = function parse() {\n    var file = this.startNode();\n    var program = this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(file, program);\n  };\n\n  _inheritsLoose(Parser, _StatementParser);\n\n  return Parser;\n}(StatementParser);\n\nfunction pluginsMap(pluginList) {\n  var pluginMap = {};\n\n  for (var _i2 = 0; _i2 < pluginList.length; _i2++) {\n    var _name = pluginList[_i2];\n    pluginMap[_name] = true;\n  }\n\n  return pluginMap;\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estreePlugin = function (superClass) {\n  return function (_superClass) {\n    function _class() {\n      return _superClass.apply(this, arguments) || this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.estreeParseRegExpLiteral = function estreeParseRegExpLiteral(_ref) {\n      var pattern = _ref.pattern,\n      flags = _ref.flags;\n      var regex = null;\n\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {}\n\n      var node = this.estreeParseLiteral(regex);\n      node.regex = {\n        pattern: pattern,\n        flags: flags };\n\n      return node;\n    };\n\n    _proto.estreeParseLiteral = function estreeParseLiteral(value) {\n      return this.parseLiteral(value, \"Literal\");\n    };\n\n    _proto.directiveToStmt = function directiveToStmt(directive) {\n      var directiveLiteral = directive.value;\n      var stmt = this.startNodeAt(directive.start, directive.loc.start);\n      var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n      stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n    };\n\n    _proto.initFunction = function initFunction(node, isAsync) {\n      _superClass.prototype.initFunction.call(this, node, isAsync);\n\n      node.expression = false;\n    };\n\n    _proto.checkDeclaration = function checkDeclaration(node) {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(node.value);\n      } else {\n        _superClass.prototype.checkDeclaration.call(this, node);\n      }\n    };\n\n    _proto.checkGetterSetterParams = function checkGetterSetterParams(method) {\n      var prop = method;\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n      var start = prop.start;\n\n      if (prop.value.params.length !== paramCount) {\n        if (prop.kind === \"get\") {\n          this.raise(start, \"getter must not have any formal parameters\");\n        } else {\n          this.raise(start, \"setter must have exactly one formal parameter\");\n        }\n      }\n\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n        this.raise(start, \"setter function argument must not be a rest parameter\");\n      }\n    };\n\n    _proto.checkLVal = function checkLVal(expr, isBinding, checkClashes, contextDescription) {\n      var _this = this;\n\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(function (prop) {\n            _this.checkLVal(prop.type === \"Property\" ? prop.value : prop, isBinding, checkClashes, \"object destructuring pattern\");\n          });\n          break;\n\n        default:\n          _superClass.prototype.checkLVal.call(this, expr, isBinding, checkClashes, contextDescription);}\n\n\n    };\n\n    _proto.checkPropClash = function checkPropClash(prop, propHash) {\n      if (prop.computed || !isSimpleProperty(prop)) return;\n      var key = prop.key;\n      var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\") {\n        if (propHash.proto) {\n          this.raise(key.start, \"Redefinition of __proto__ property\");\n        }\n\n        propHash.proto = true;\n      }\n    };\n\n    _proto.isStrictBody = function isStrictBody(node) {\n      var isBlockStatement = node.body.type === \"BlockStatement\";\n\n      if (isBlockStatement && node.body.body.length > 0) {\n        for (var _i2 = 0, _node$body$body2 = node.body.body; _i2 < _node$body$body2.length; _i2++) {\n          var directive = _node$body$body2[_i2];\n\n          if (directive.type === \"ExpressionStatement\" && directive.expression.type === \"Literal\") {\n            if (directive.expression.value === \"use strict\") return true;\n          } else {\n            break;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto.isValidDirective = function isValidDirective(stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n    };\n\n    _proto.stmtToDirective = function stmtToDirective(stmt) {\n      var directive = _superClass.prototype.stmtToDirective.call(this, stmt);\n\n      var value = stmt.expression.value;\n      directive.value.value = value;\n      return directive;\n    };\n\n    _proto.parseBlockBody = function parseBlockBody(node, allowDirectives, topLevel, end) {\n      var _this2 = this;\n\n      _superClass.prototype.parseBlockBody.call(this, node, allowDirectives, topLevel, end);\n\n      var directiveStatements = node.directives.map(function (d) {\n        return _this2.directiveToStmt(d);\n      });\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    };\n\n    _proto.pushClassMethod = function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor) {\n      this.parseMethod(method, isGenerator, isAsync, isConstructor, \"MethodDefinition\");\n\n      if (method.typeParameters) {\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n\n      classBody.body.push(method);\n    };\n\n    _proto.parseExprAtom = function parseExprAtom(refShorthandDefaultPos) {\n      switch (this.state.type) {\n        case types.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case types.num:\n        case types.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case types._null:\n          return this.estreeParseLiteral(null);\n\n        case types._true:\n          return this.estreeParseLiteral(true);\n\n        case types._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return _superClass.prototype.parseExprAtom.call(this, refShorthandDefaultPos);}\n\n    };\n\n    _proto.parseLiteral = function parseLiteral(value, type, startPos, startLoc) {\n      var node = _superClass.prototype.parseLiteral.call(this, value, type, startPos, startLoc);\n\n      node.raw = node.extra.raw;\n      delete node.extra;\n      return node;\n    };\n\n    _proto.parseFunctionBody = function parseFunctionBody(node, allowExpression) {\n      _superClass.prototype.parseFunctionBody.call(this, node, allowExpression);\n\n      node.expression = node.body.type !== \"BlockStatement\";\n    };\n\n    _proto.parseMethod = function parseMethod(node, isGenerator, isAsync, isConstructor, type) {\n      var funcNode = this.startNode();\n      funcNode.kind = node.kind;\n      funcNode = _superClass.prototype.parseMethod.call(this, funcNode, isGenerator, isAsync, isConstructor, \"FunctionExpression\");\n      delete funcNode.kind;\n      node.value = funcNode;\n      return this.finishNode(node, type);\n    };\n\n    _proto.parseObjectMethod = function parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n      var node = _superClass.prototype.parseObjectMethod.call(this, prop, isGenerator, isAsync, isPattern, containsEsc);\n\n      if (node) {\n        node.type = \"Property\";\n        if (node.kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return node;\n    };\n\n    _proto.parseObjectProperty = function parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n      var node = _superClass.prototype.parseObjectProperty.call(this, prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node;\n    };\n\n    _proto.toAssignable = function toAssignable(node, isBinding, contextDescription) {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value, isBinding, contextDescription);\n        return node;\n      }\n\n      return _superClass.prototype.toAssignable.call(this, node, isBinding, contextDescription);\n    };\n\n    _proto.toAssignableObjectExpressionProp = function toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n      } else if (prop.method) {\n        this.raise(prop.key.start, \"Object pattern can't contain methods\");\n      } else {\n        _superClass.prototype.toAssignableObjectExpressionProp.call(this, prop, isBinding, isLast);\n      }\n    };\n\n    _inheritsLoose(_class, _superClass);\n\n    return _class;\n  }(superClass);\n};\n\nvar primitiveTypes = [\"any\", \"bool\", \"boolean\", \"empty\", \"false\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"];\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nvar exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\" };\n\n\nfunction partition(list, test) {\n  var list1 = [];\n  var list2 = [];\n\n  for (var i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nvar flowPlugin = function (superClass) {\n  return function (_superClass) {\n    function _class() {\n      return _superClass.apply(this, arguments) || this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.flowParseTypeInitialiser = function flowParseTypeInitialiser(tok) {\n      var oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || types.colon);\n      var type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    };\n\n    _proto.flowParsePredicate = function flowParsePredicate() {\n      var node = this.startNode();\n      var moduloLoc = this.state.startLoc;\n      var moduloPos = this.state.start;\n      this.expect(types.modulo);\n      var checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n\n      if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n        this.raise(moduloPos, \"Spaces between ´%´ and ´checks´ are not allowed here.\");\n      }\n\n      if (this.eat(types.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    };\n\n    _proto.flowParseTypeAndPredicateInitialiser = function flowParseTypeAndPredicateInitialiser() {\n      var oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(types.colon);\n      var type = null;\n      var predicate = null;\n\n      if (this.match(types.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n\n        if (this.match(types.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n\n      return [type, predicate];\n    };\n\n    _proto.flowParseDeclareClass = function flowParseDeclareClass(node) {\n      this.next();\n      this.flowParseInterfaceish(node, true);\n      return this.finishNode(node, \"DeclareClass\");\n    };\n\n    _proto.flowParseDeclareFunction = function flowParseDeclareFunction(node) {\n      this.next();\n      var id = node.id = this.parseIdentifier();\n      var typeNode = this.startNode();\n      var typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(types.parenL);\n      var tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(types.parenR);\n\n      var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n\n      typeNode.returnType = _this$flowParseTypeAn[0];\n      node.predicate = _this$flowParseTypeAn[1];\n      typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n      this.finishNode(id, id.type);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareFunction\");\n    };\n\n    _proto.flowParseDeclare = function flowParseDeclare(node, insideModule) {\n      if (this.match(types._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(types._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(types._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.isContextual(\"module\")) {\n        if (this.lookahead().type === types.dot) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.unexpected(null, \"`declare module` cannot be used inside another `declare module`\");\n          }\n\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(types._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    };\n\n    _proto.flowParseDeclareVariable = function flowParseDeclareVariable(node) {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(true);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    };\n\n    _proto.flowParseDeclareModule = function flowParseDeclareModule(node) {\n      var _this = this;\n\n      this.next();\n\n      if (this.match(types.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      var bodyNode = node.body = this.startNode();\n      var body = bodyNode.body = [];\n      this.expect(types.braceL);\n\n      while (!this.match(types.braceR)) {\n        var _bodyNode = this.startNode();\n\n        if (this.match(types._import)) {\n          var lookahead = this.lookahead();\n\n          if (lookahead.value !== \"type\" && lookahead.value !== \"typeof\") {\n            this.unexpected(null, \"Imports within a `declare module` body must always be `import type` or `import typeof`\");\n          }\n\n          this.next();\n          this.parseImport(_bodyNode);\n        } else {\n          this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\");\n          _bodyNode = this.flowParseDeclare(_bodyNode, true);\n        }\n\n        body.push(_bodyNode);\n      }\n\n      this.expect(types.braceR);\n      this.finishNode(bodyNode, \"BlockStatement\");\n      var kind = null;\n      var hasModuleExport = false;\n      var errorMessage = \"Found both `declare module.exports` and `declare export` in the same module. \" + \"Modules can only have 1 since they are either an ES module or they are a CommonJS module\";\n      body.forEach(function (bodyElement) {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            _this.unexpected(bodyElement.start, errorMessage);\n          }\n\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            _this.unexpected(bodyElement.start, \"Duplicate `declare module.exports` statement\");\n          }\n\n          if (kind === \"ES\") _this.unexpected(bodyElement.start, errorMessage);\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    };\n\n    _proto.flowParseDeclareExportDeclaration = function flowParseDeclareExportDeclaration(node, insideModule) {\n      this.expect(types._export);\n\n      if (this.eat(types._default)) {\n        if (this.match(types._function) || this.match(types._class)) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n\n        node.default = true;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (this.match(types._const) || this.match(types._let) || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n          var label = this.state.value;\n          var suggestion = exportSuggestions[label];\n          this.unexpected(this.state.start, \"`declare export \" + label + \"` is not supported. Use `\" + suggestion + \"` instead\");\n        }\n\n        if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    };\n\n    _proto.flowParseDeclareModuleExports = function flowParseDeclareModuleExports(node) {\n      this.expectContextual(\"module\");\n      this.expect(types.dot);\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n      return this.finishNode(node, \"DeclareModuleExports\");\n    };\n\n    _proto.flowParseDeclareTypeAlias = function flowParseDeclareTypeAlias(node) {\n      this.next();\n      this.flowParseTypeAlias(node);\n      return this.finishNode(node, \"DeclareTypeAlias\");\n    };\n\n    _proto.flowParseDeclareOpaqueType = function flowParseDeclareOpaqueType(node) {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      return this.finishNode(node, \"DeclareOpaqueType\");\n    };\n\n    _proto.flowParseDeclareInterface = function flowParseDeclareInterface(node) {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    };\n\n    _proto.flowParseInterfaceish = function flowParseInterfaceish(node, isClass) {\n      node.id = this.flowParseRestrictedIdentifier(!isClass);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType(true, false, false);\n    };\n\n    _proto.flowParseInterfaceExtends = function flowParseInterfaceExtends() {\n      var node = this.startNode();\n      node.id = this.flowParseQualifiedTypeIdentifier();\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    };\n\n    _proto.flowParseInterface = function flowParseInterface(node) {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    };\n\n    _proto.checkReservedType = function checkReservedType(word, startLoc) {\n      if (primitiveTypes.indexOf(word) > -1) {\n        this.raise(startLoc, \"Cannot overwrite primitive type \" + word);\n      }\n    };\n\n    _proto.flowParseRestrictedIdentifier = function flowParseRestrictedIdentifier(liberal) {\n      this.checkReservedType(this.state.value, this.state.start);\n      return this.parseIdentifier(liberal);\n    };\n\n    _proto.flowParseTypeAlias = function flowParseTypeAlias(node) {\n      node.id = this.flowParseRestrictedIdentifier();\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(types.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TypeAlias\");\n    };\n\n    _proto.flowParseOpaqueType = function flowParseOpaqueType(node, declare) {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(true);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.supertype = null;\n\n      if (this.match(types.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(types.colon);\n      }\n\n      node.impltype = null;\n\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(types.eq);\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"OpaqueType\");\n    };\n\n    _proto.flowParseTypeParameter = function flowParseTypeParameter(allowDefault, requireDefault) {\n      if (allowDefault === void 0) {\n        allowDefault = true;\n      }\n\n      if (requireDefault === void 0) {\n        requireDefault = false;\n      }\n\n      if (!allowDefault && requireDefault) {\n        throw new Error(\"Cannot disallow a default value (`allowDefault`) while also requiring it (`requireDefault`).\");\n      }\n\n      var nodeStart = this.state.start;\n      var node = this.startNode();\n      var variance = this.flowParseVariance();\n      var ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(types.eq)) {\n        if (allowDefault) {\n          this.eat(types.eq);\n          node.default = this.flowParseType();\n        } else {\n          this.unexpected();\n        }\n      } else {\n        if (requireDefault) {\n          this.unexpected(nodeStart, \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\");\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    };\n\n    _proto.flowParseTypeParameterDeclaration = function flowParseTypeParameterDeclaration(allowDefault) {\n      if (allowDefault === void 0) {\n        allowDefault = true;\n      }\n\n      var oldInType = this.state.inType;\n      var node = this.startNode();\n      node.params = [];\n      this.state.inType = true;\n\n      if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      var defaultRequired = false;\n\n      do {\n        var typeParameter = this.flowParseTypeParameter(allowDefault, defaultRequired);\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      } while (!this.isRelational(\">\"));\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    };\n\n    _proto.flowParseTypeParameterInstantiation = function flowParseTypeParameterInstantiation() {\n      var node = this.startNode();\n      var oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    };\n\n    _proto.flowParseObjectPropertyKey = function flowParseObjectPropertyKey() {\n      return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    };\n\n    _proto.flowParseObjectTypeIndexer = function flowParseObjectTypeIndexer(node, isStatic, variance) {\n      node.static = isStatic;\n      this.expect(types.bracketL);\n\n      if (this.lookahead().type === types.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n\n      this.expect(types.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    };\n\n    _proto.flowParseObjectTypeMethodish = function flowParseObjectTypeMethodish(node) {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration(false);\n      }\n\n      this.expect(types.parenL);\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n\n      this.expect(types.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    };\n\n    _proto.flowParseObjectTypeCallProperty = function flowParseObjectTypeCallProperty(node, isStatic) {\n      var valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    };\n\n    _proto.flowParseObjectType = function flowParseObjectType(allowStatic, allowExact, allowSpread) {\n      var oldInType = this.state.inType;\n      this.state.inType = true;\n      var nodeStart = this.startNode();\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      var endDelim;\n      var exact;\n\n      if (allowExact && this.match(types.braceBarL)) {\n        this.expect(types.braceBarL);\n        endDelim = types.braceBarR;\n        exact = true;\n      } else {\n        this.expect(types.braceL);\n        endDelim = types.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        var isStatic = false;\n        var node = this.startNode();\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          var lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        var variance = this.flowParseVariance();\n\n        if (this.match(types.bracketL)) {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n        } else {\n          var kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            var _lookahead = this.lookahead();\n\n            if (_lookahead.type === types.name || _lookahead.type === types.string || _lookahead.type === types.num) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          nodeStart.properties.push(this.flowParseObjectTypeProperty(node, isStatic, variance, kind, allowSpread));\n        }\n\n        this.flowObjectTypeSemicolon();\n      }\n\n      this.expect(endDelim);\n      var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n      this.state.inType = oldInType;\n      return out;\n    };\n\n    _proto.flowParseObjectTypeProperty = function flowParseObjectTypeProperty(node, isStatic, variance, kind, allowSpread) {\n      if (this.match(types.ellipsis)) {\n        if (!allowSpread) {\n          this.unexpected(null, \"Spread operator cannot appear in class or interface definitions\");\n        }\n\n        if (variance) {\n          this.unexpected(variance.start, \"Spread properties cannot have variance\");\n        }\n\n        this.expect(types.ellipsis);\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.kind = kind;\n        var optional = false;\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    };\n\n    _proto.flowCheckGetterSetterParams = function flowCheckGetterSetterParams(property) {\n      var paramCount = property.kind === \"get\" ? 0 : 1;\n      var start = property.start;\n      var length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, \"getter must not have any formal parameters\");\n        } else {\n          this.raise(start, \"setter must have exactly one formal parameter\");\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, \"setter function argument must not be a rest parameter\");\n      }\n    };\n\n    _proto.flowObjectTypeSemicolon = function flowObjectTypeSemicolon() {\n      if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.unexpected();\n      }\n    };\n\n    _proto.flowParseQualifiedTypeIdentifier = function flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      var node = id || this.parseIdentifier();\n\n      while (this.eat(types.dot)) {\n        var node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.parseIdentifier();\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    };\n\n    _proto.flowParseGenericType = function flowParseGenericType(startPos, startLoc, id) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    };\n\n    _proto.flowParseTypeofType = function flowParseTypeofType() {\n      var node = this.startNode();\n      this.expect(types._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    };\n\n    _proto.flowParseTupleType = function flowParseTupleType() {\n      var node = this.startNode();\n      node.types = [];\n      this.expect(types.bracketL);\n\n      while (this.state.pos < this.input.length && !this.match(types.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(types.bracketR)) break;\n        this.expect(types.comma);\n      }\n\n      this.expect(types.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    };\n\n    _proto.flowParseFunctionTypeParam = function flowParseFunctionTypeParam() {\n      var name = null;\n      var optional = false;\n      var typeAnnotation = null;\n      var node = this.startNode();\n      var lh = this.lookahead();\n\n      if (lh.type === types.colon || lh.type === types.question) {\n        name = this.parseIdentifier();\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    };\n\n    _proto.reinterpretTypeAsFunctionTypeParam = function reinterpretTypeAsFunctionTypeParam(type) {\n      var node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    };\n\n    _proto.flowParseFunctionTypeParams = function flowParseFunctionTypeParams(params) {\n      if (params === void 0) {\n        params = [];\n      }\n\n      var rest = null;\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n\n      return {\n        params: params,\n        rest: rest };\n\n    };\n\n    _proto.flowIdentToTypeAnnotation = function flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"void\":\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        default:\n          return this.flowParseGenericType(startPos, startLoc, id);}\n\n    };\n\n    _proto.flowParsePrimaryType = function flowParsePrimaryType() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var node = this.startNode();\n      var tmp;\n      var type;\n      var isGroupedType = false;\n      var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case types.name:\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n        case types.braceL:\n          return this.flowParseObjectType(false, false, true);\n\n        case types.braceBarL:\n          return this.flowParseObjectType(false, true, true);\n\n        case types.bracketL:\n          return this.flowParseTupleType();\n\n        case types.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration(false);\n            this.expect(types.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n\n          break;\n\n        case types.parenL:\n          this.next();\n\n          if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            if (this.match(types.name)) {\n              var token = this.lookahead().type;\n              isGroupedType = token !== types.question && token !== types.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n              this.expect(types.parenR);\n              return type;\n            } else {\n              this.eat(types.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n        case types._true:\n        case types._false:\n          node.value = this.match(types._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case types.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n\n            if (!this.match(types.num)) {\n              this.unexpected(null, \"Unexpected token, expected \\\"number\\\"\");\n            }\n\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          this.unexpected();\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n        case types._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case types._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case types.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          }}\n\n\n\n      throw this.unexpected();\n    };\n\n    _proto.flowParsePostfixType = function flowParsePostfixType() {\n      var startPos = this.state.start,\n      startLoc = this.state.startLoc;\n      var type = this.flowParsePrimaryType();\n\n      while (!this.canInsertSemicolon() && this.match(types.bracketL)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(types.bracketL);\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n\n      return type;\n    };\n\n    _proto.flowParsePrefixType = function flowParsePrefixType() {\n      var node = this.startNode();\n\n      if (this.eat(types.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    };\n\n    _proto.flowParseAnonFunctionWithoutParens = function flowParseAnonFunctionWithoutParens() {\n      var param = this.flowParsePrefixType();\n\n      if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n        var node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n\n      return param;\n    };\n\n    _proto.flowParseIntersectionType = function flowParseIntersectionType() {\n      var node = this.startNode();\n      this.eat(types.bitwiseAND);\n      var type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    };\n\n    _proto.flowParseUnionType = function flowParseUnionType() {\n      var node = this.startNode();\n      this.eat(types.bitwiseOR);\n      var type = this.flowParseIntersectionType();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n    };\n\n    _proto.flowParseType = function flowParseType() {\n      var oldInType = this.state.inType;\n      this.state.inType = true;\n      var type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    };\n\n    _proto.flowParseTypeAnnotation = function flowParseTypeAnnotation() {\n      var node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    };\n\n    _proto.flowParseTypeAnnotatableIdentifier = function flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n      var ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n      if (this.match(types.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.finishNode(ident, ident.type);\n      }\n\n      return ident;\n    };\n\n    _proto.typeCastToParameter = function typeCastToParameter(node) {\n      node.expression.typeAnnotation = node.typeAnnotation;\n      return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    };\n\n    _proto.flowParseVariance = function flowParseVariance() {\n      var variance = null;\n\n      if (this.match(types.plusMin)) {\n        variance = this.startNode();\n\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n\n      return variance;\n    };\n\n    _proto.parseFunctionBody = function parseFunctionBody(node, allowExpressionBody) {\n      var _this2 = this;\n\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, function () {\n          return _superClass.prototype.parseFunctionBody.call(_this2, node, true);\n        });\n      }\n\n      return _superClass.prototype.parseFunctionBody.call(this, node, false);\n    };\n\n    _proto.parseFunctionBodyAndFinish = function parseFunctionBodyAndFinish(node, type, allowExpressionBody) {\n      if (!allowExpressionBody && this.match(types.colon)) {\n        var typeNode = this.startNode();\n\n        var _this$flowParseTypeAn2 = this.flowParseTypeAndPredicateInitialiser();\n\n        typeNode.typeAnnotation = _this$flowParseTypeAn2[0];\n        node.predicate = _this$flowParseTypeAn2[1];\n        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n      }\n\n      _superClass.prototype.parseFunctionBodyAndFinish.call(this, node, type, allowExpressionBody);\n    };\n\n    _proto.parseStatement = function parseStatement(declaration, topLevel) {\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        var node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else {\n        return _superClass.prototype.parseStatement.call(this, declaration, topLevel);\n      }\n    };\n\n    _proto.parseExpressionStatement = function parseExpressionStatement(node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return _superClass.prototype.parseExpressionStatement.call(this, node, expr);\n    };\n\n    _proto.shouldParseExportDeclaration = function shouldParseExportDeclaration() {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || _superClass.prototype.shouldParseExportDeclaration.call(this);\n    };\n\n    _proto.isExportDefaultSpecifier = function isExportDefaultSpecifier() {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value == \"opaque\")) {\n        return false;\n      }\n\n      return _superClass.prototype.isExportDefaultSpecifier.call(this);\n    };\n\n    _proto.parseConditional = function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n      var _this3 = this;\n\n      if (!this.match(types.question)) return expr;\n\n      if (refNeedsArrowPos) {\n        var _state = this.state.clone();\n\n        try {\n          return _superClass.prototype.parseConditional.call(this, expr, noIn, startPos, startLoc);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = _state;\n            refNeedsArrowPos.start = err.pos || this.state.start;\n            return expr;\n          } else {\n            throw err;\n          }\n        }\n      }\n\n      this.expect(types.question);\n      var state = this.state.clone();\n      var originalNoArrowAt = this.state.noArrowAt;\n      var node = this.startNodeAt(startPos, startLoc);\n\n      var _this$tryParseConditi = this.tryParseConditionalConsequent(),\n      consequent = _this$tryParseConditi.consequent,\n      failed = _this$tryParseConditi.failed;\n\n      var _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n      valid = _this$getArrowLikeExp[0],\n      invalid = _this$getArrowLikeExp[1];\n\n      if (failed || invalid.length > 0) {\n        var noArrowAt = originalNoArrowAt.concat();\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (var i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n\n          consequent = _this$tryParseConditi2.consequent;\n          failed = _this$tryParseConditi2.failed;\n\n          var _this$getArrowLikeExp2 = this.getArrowLikeExpressions(consequent);\n\n          valid = _this$getArrowLikeExp2[0];\n          invalid = _this$getArrowLikeExp2[1];\n        }\n\n        if (failed && valid.length > 1) {\n          this.raise(state.start, \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\");\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n\n          var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n\n          consequent = _this$tryParseConditi3.consequent;\n          failed = _this$tryParseConditi3.failed;\n        }\n\n        this.getArrowLikeExpressions(consequent, true);\n      }\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(types.colon);\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, function () {\n        return _this3.parseMaybeAssign(noIn, undefined, undefined, undefined);\n      });\n      return this.finishNode(node, \"ConditionalExpression\");\n    };\n\n    _proto.tryParseConditionalConsequent = function tryParseConditionalConsequent() {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      var consequent = this.parseMaybeAssign();\n      var failed = !this.match(types.colon);\n      this.state.noArrowParamsConversionAt.pop();\n      return {\n        consequent: consequent,\n        failed: failed };\n\n    };\n\n    _proto.getArrowLikeExpressions = function getArrowLikeExpressions(node, disallowInvalid) {\n      var _this4 = this;\n\n      var stack = [node];\n      var arrows = [];\n\n      while (stack.length !== 0) {\n        var _node = stack.pop();\n\n        if (_node.type === \"ArrowFunctionExpression\") {\n          if (_node.typeParameters || !_node.returnType) {\n            this.toAssignableList(_node.params, true, \"arrow function parameters\");\n\n            _superClass.prototype.checkFunctionNameAndParams.call(this, _node, true);\n          } else {\n            arrows.push(_node);\n          }\n\n          stack.push(_node.body);\n        } else if (_node.type === \"ConditionalExpression\") {\n          stack.push(_node.consequent);\n          stack.push(_node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        for (var i = 0; i < arrows.length; i++) {\n          this.toAssignableList(node.params, true, \"arrow function parameters\");\n        }\n\n        return [arrows, []];\n      }\n\n      return partition(arrows, function (node) {\n        try {\n          _this4.toAssignableList(node.params, true, \"arrow function parameters\");\n\n          return true;\n        } catch (err) {\n          return false;\n        }\n      });\n    };\n\n    _proto.forwardNoArrowParamsConversionAt = function forwardNoArrowParamsConversionAt(node, parse) {\n      var result;\n\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    };\n\n    _proto.parseParenItem = function parseParenItem(node, startPos, startLoc) {\n      node = _superClass.prototype.parseParenItem.call(this, node, startPos, startLoc);\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        var typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    };\n\n    _proto.assertModuleNodeAllowed = function assertModuleNodeAllowed(node) {\n      if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n        return;\n      }\n\n      _superClass.prototype.assertModuleNodeAllowed.call(this, node);\n    };\n\n    _proto.parseExport = function parseExport(node) {\n      node = _superClass.prototype.parseExport.call(this, node);\n\n      if (node.type === \"ExportNamedDeclaration\" || node.type === \"ExportAllDeclaration\") {\n        node.exportKind = node.exportKind || \"value\";\n      }\n\n      return node;\n    };\n\n    _proto.parseExportDeclaration = function parseExportDeclaration(node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n        var declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        var _declarationNode = this.startNode();\n\n        this.next();\n        return this.flowParseOpaqueType(_declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n\n        var _declarationNode2 = this.startNode();\n\n        this.next();\n        return this.flowParseInterface(_declarationNode2);\n      } else {\n        return _superClass.prototype.parseExportDeclaration.call(this, node);\n      }\n    };\n\n    _proto.shouldParseExportStar = function shouldParseExportStar() {\n      return _superClass.prototype.shouldParseExportStar.call(this) || this.isContextual(\"type\") && this.lookahead().type === types.star;\n    };\n\n    _proto.parseExportStar = function parseExportStar(node) {\n      if (this.eatContextual(\"type\")) {\n        node.exportKind = \"type\";\n      }\n\n      return _superClass.prototype.parseExportStar.call(this, node);\n    };\n\n    _proto.parseExportNamespace = function parseExportNamespace(node) {\n      if (node.exportKind === \"type\") {\n        this.unexpected();\n      }\n\n      return _superClass.prototype.parseExportNamespace.call(this, node);\n    };\n\n    _proto.parseClassId = function parseClassId(node, isStatement, optionalId) {\n      _superClass.prototype.parseClassId.call(this, node, isStatement, optionalId);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    };\n\n    _proto.isKeyword = function isKeyword$$1(name) {\n      if (this.state.inType && name === \"void\") {\n        return false;\n      } else {\n        return _superClass.prototype.isKeyword.call(this, name);\n      }\n    };\n\n    _proto.readToken = function readToken(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return _superClass.prototype.readWord.call(this);\n      } else {\n        return _superClass.prototype.readToken.call(this, code);\n      }\n    };\n\n    _proto.toAssignable = function toAssignable(node, isBinding, contextDescription) {\n      if (node.type === \"TypeCastExpression\") {\n        return _superClass.prototype.toAssignable.call(this, this.typeCastToParameter(node), isBinding, contextDescription);\n      } else {\n        return _superClass.prototype.toAssignable.call(this, node, isBinding, contextDescription);\n      }\n    };\n\n    _proto.toAssignableList = function toAssignableList(exprList, isBinding, contextDescription) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n\n      return _superClass.prototype.toAssignableList.call(this, exprList, isBinding, contextDescription);\n    };\n\n    _proto.toReferencedList = function toReferencedList(exprList) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n\n        if (expr && expr._exprListItem && expr.type === \"TypeCastExpression\") {\n          this.raise(expr.start, \"Unexpected type cast\");\n        }\n      }\n\n      return exprList;\n    };\n\n    _proto.parseExprListItem = function parseExprListItem(allowEmpty, refShorthandDefaultPos, refNeedsArrowPos) {\n      var container = this.startNode();\n\n      var node = _superClass.prototype.parseExprListItem.call(this, allowEmpty, refShorthandDefaultPos, refNeedsArrowPos);\n\n      if (this.match(types.colon)) {\n        container._exprListItem = true;\n        container.expression = node;\n        container.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(container, \"TypeCastExpression\");\n      } else {\n        return node;\n      }\n    };\n\n    _proto.checkLVal = function checkLVal(expr, isBinding, checkClashes, contextDescription) {\n      if (expr.type !== \"TypeCastExpression\") {\n        return _superClass.prototype.checkLVal.call(this, expr, isBinding, checkClashes, contextDescription);\n      }\n    };\n\n    _proto.parseClassProperty = function parseClassProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return _superClass.prototype.parseClassProperty.call(this, node);\n    };\n\n    _proto.isClassMethod = function isClassMethod() {\n      return this.isRelational(\"<\") || _superClass.prototype.isClassMethod.call(this);\n    };\n\n    _proto.isClassProperty = function isClassProperty() {\n      return this.match(types.colon) || _superClass.prototype.isClassProperty.call(this);\n    };\n\n    _proto.isNonstaticConstructor = function isNonstaticConstructor(method) {\n      return !this.match(types.colon) && _superClass.prototype.isNonstaticConstructor.call(this, method);\n    };\n\n    _proto.pushClassMethod = function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration(false);\n      }\n\n      _superClass.prototype.pushClassMethod.call(this, classBody, method, isGenerator, isAsync, isConstructor);\n    };\n\n    _proto.pushClassPrivateMethod = function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      _superClass.prototype.pushClassPrivateMethod.call(this, classBody, method, isGenerator, isAsync);\n    };\n\n    _proto.parseClassSuper = function parseClassSuper(node) {\n      _superClass.prototype.parseClassSuper.call(this, node);\n\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        var implemented = node.implements = [];\n\n        do {\n          var _node2 = this.startNode();\n\n          _node2.id = this.flowParseRestrictedIdentifier(true);\n\n          if (this.isRelational(\"<\")) {\n            _node2.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            _node2.typeParameters = null;\n          }\n\n          implemented.push(this.finishNode(_node2, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    };\n\n    _proto.parsePropertyName = function parsePropertyName(node) {\n      var variance = this.flowParseVariance();\n\n      var key = _superClass.prototype.parsePropertyName.call(this, node);\n\n      node.variance = variance;\n      return key;\n    };\n\n    _proto.parseObjPropValue = function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n      if (prop.variance) {\n        this.unexpected(prop.variance.start);\n      }\n\n      delete prop.variance;\n      var typeParameters;\n\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration(false);\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      _superClass.prototype.parseObjPropValue.call(this, prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    };\n\n    _proto.parseAssignableListItemTypes = function parseAssignableListItemTypes(param) {\n      if (this.eat(types.question)) {\n        if (param.type !== \"Identifier\") {\n          throw this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n        }\n\n        param.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      this.finishNode(param, param.type);\n      return param;\n    };\n\n    _proto.parseMaybeDefault = function parseMaybeDefault(startPos, startLoc, left) {\n      var node = _superClass.prototype.parseMaybeDefault.call(this, startPos, startLoc, left);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n      }\n\n      return node;\n    };\n\n    _proto.shouldParseDefaultImport = function shouldParseDefaultImport(node) {\n      if (!hasTypeImportKind(node)) {\n        return _superClass.prototype.shouldParseDefaultImport.call(this, node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    };\n\n    _proto.parseImportSpecifierLocal = function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true) : this.parseIdentifier();\n      this.checkLVal(specifier.local, true, undefined, contextDescription);\n      node.specifiers.push(this.finishNode(specifier, type));\n    };\n\n    _proto.parseImportSpecifiers = function parseImportSpecifiers(node) {\n      node.importKind = \"value\";\n      var kind = null;\n\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n\n      if (kind) {\n        var lh = this.lookahead();\n\n        if (kind === \"type\" && lh.type === types.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      _superClass.prototype.parseImportSpecifiers.call(this, node);\n    };\n\n    _proto.parseImportSpecifier = function parseImportSpecifier(node) {\n      var specifier = this.startNode();\n      var firstIdentLoc = this.state.start;\n      var firstIdent = this.parseIdentifier(true);\n      var specifierTypeKind = null;\n\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      var isBinding = false;\n\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        var as_ident = this.parseIdentifier(true);\n\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      var nodeIsTypeImport = hasTypeImportKind(node);\n      var specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(firstIdentLoc, \"The `type` and `typeof` keywords on named imports can only be used on regular \" + \"`import` statements. It cannot be used with `import type` or `import typeof` statements\");\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(specifier.local.name, specifier.local.start);\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n      }\n\n      this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    };\n\n    _proto.parseFunctionParams = function parseFunctionParams(node) {\n      var kind = node.kind;\n\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration(false);\n      }\n\n      _superClass.prototype.parseFunctionParams.call(this, node);\n    };\n\n    _proto.parseVarHead = function parseVarHead(decl) {\n      _superClass.prototype.parseVarHead.call(this, decl);\n\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.finishNode(decl.id, decl.id.type);\n      }\n    };\n\n    _proto.parseAsyncArrowFromCallExpression = function parseAsyncArrowFromCallExpression(node, call) {\n      if (this.match(types.colon)) {\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return _superClass.prototype.parseAsyncArrowFromCallExpression.call(this, node, call);\n    };\n\n    _proto.shouldParseAsyncArrow = function shouldParseAsyncArrow() {\n      return this.match(types.colon) || _superClass.prototype.shouldParseAsyncArrow.call(this);\n    };\n\n    _proto.parseMaybeAssign = function parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n      var _this5 = this;\n\n      var jsxError = null;\n\n      if (types.jsxTagStart && this.match(types.jsxTagStart)) {\n        var state = this.state.clone();\n\n        try {\n          return _superClass.prototype.parseMaybeAssign.call(this, noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n            this.state.context.length -= 2;\n            jsxError = err;\n          } else {\n            throw err;\n          }\n        }\n      }\n\n      if (jsxError != null || this.isRelational(\"<\")) {\n        var arrowExpression;\n        var typeParameters;\n\n        try {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, function () {\n            return _superClass.prototype.parseMaybeAssign.call(_this5, noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n          });\n          arrowExpression.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(arrowExpression, typeParameters);\n        } catch (err) {\n          throw jsxError || err;\n        }\n\n        if (arrowExpression.type === \"ArrowFunctionExpression\") {\n          return arrowExpression;\n        } else if (jsxError != null) {\n          throw jsxError;\n        } else {\n          this.raise(typeParameters.start, \"Expected an arrow function after this type parameter declaration\");\n        }\n      }\n\n      return _superClass.prototype.parseMaybeAssign.call(this, noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n    };\n\n    _proto.parseArrow = function parseArrow(node) {\n      if (this.match(types.colon)) {\n        var state = this.state.clone();\n\n        try {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          var typeNode = this.startNode();\n\n          var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n\n          typeNode.typeAnnotation = _this$flowParseTypeAn3[0];\n          node.predicate = _this$flowParseTypeAn3[1];\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            throw err;\n          }\n        }\n      }\n\n      return _superClass.prototype.parseArrow.call(this, node);\n    };\n\n    _proto.shouldParseArrow = function shouldParseArrow() {\n      return this.match(types.colon) || _superClass.prototype.shouldParseArrow.call(this);\n    };\n\n    _proto.setArrowFunctionParameters = function setArrowFunctionParameters(node, params) {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        _superClass.prototype.setArrowFunctionParameters.call(this, node, params);\n      }\n    };\n\n    _proto.checkFunctionNameAndParams = function checkFunctionNameAndParams(node, isArrowFunction) {\n      if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        return;\n      }\n\n      return _superClass.prototype.checkFunctionNameAndParams.call(this, node, isArrowFunction);\n    };\n\n    _proto.parseParenAndDistinguishExpression = function parseParenAndDistinguishExpression(canBeArrow) {\n      return _superClass.prototype.parseParenAndDistinguishExpression.call(this, canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n    };\n\n    _proto.parseSubscripts = function parseSubscripts(base, startPos, startLoc, noCalls) {\n      if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n        this.next();\n        var node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n        var state = this.state.clone();\n        var error;\n\n        try {\n          var _node3 = this.parseAsyncArrowWithTypeParameters(startPos, startLoc);\n\n          if (_node3) return _node3;\n        } catch (e) {\n          error = e;\n        }\n\n        this.state = state;\n\n        try {\n          return _superClass.prototype.parseSubscripts.call(this, base, startPos, startLoc, noCalls);\n        } catch (e) {\n          throw error || e;\n        }\n      }\n\n      return _superClass.prototype.parseSubscripts.call(this, base, startPos, startLoc, noCalls);\n    };\n\n    _proto.parseAsyncArrowWithTypeParameters = function parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(node, undefined, true);\n    };\n\n    _proto.readToken_mult_modulo = function readToken_mult_modulo(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 47 && this.state.hasFlowComment) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      _superClass.prototype.readToken_mult_modulo.call(this, code);\n    };\n\n    _proto.skipBlockComment = function skipBlockComment() {\n      if (this.hasPlugin(\"flow\") && this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      var end;\n\n      if (this.hasPlugin(\"flow\") && this.state.hasFlowComment) {\n        end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n        if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n        this.state.pos = end + 3;\n        return;\n      }\n\n      _superClass.prototype.skipBlockComment.call(this);\n    };\n\n    _proto.skipFlowComment = function skipFlowComment() {\n      var ch2 = this.input.charCodeAt(this.state.pos + 2);\n      var ch3 = this.input.charCodeAt(this.state.pos + 3);\n\n      if (ch2 === 58 && ch3 === 58) {\n        return 4;\n      }\n\n      if (this.input.slice(this.state.pos + 2, 14) === \"flow-include\") {\n        return 14;\n      }\n\n      if (ch2 === 58 && ch3 !== 58 && 2) {\n        return 2;\n      }\n\n      return false;\n    };\n\n    _proto.hasFlowCommentCompletion = function hasFlowCommentCompletion() {\n      var end = this.input.indexOf(\"*/\", this.state.pos);\n\n      if (end === -1) {\n        this.raise(this.state.pos, \"Unterminated comment\");\n      }\n    };\n\n    _inheritsLoose(_class, _superClass);\n\n    return _class;\n  }(superClass);\n};\n\nvar entities = {\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\" };\n\n\nvar HEX_NUMBER = /^[\\da-fA-F]+$/;\nvar DECIMAL_NUMBER = /^\\d+$/;\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true });\n\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true });\n\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  var out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsxPlugin = function (superClass) {\n  return function (_superClass) {\n    function _class() {\n      return _superClass.apply(this, arguments) || this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.jsxReadToken = function jsxReadToken() {\n      var out = \"\";\n      var chunkStart = this.state.pos;\n\n      for (;;) {\n        if (this.state.pos >= this.input.length) {\n          this.raise(this.state.start, \"Unterminated JSX contents\");\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case 60:\n          case 123:\n            if (this.state.pos === this.state.start) {\n              if (ch === 60 && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(types.jsxTagStart);\n              }\n\n              return this.getTokenFromCode(ch);\n            }\n\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(types.jsxText, out);\n\n          case 38:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }}\n\n\n      }\n    };\n\n    _proto.jsxReadNewLine = function jsxReadNewLine(normalizeCRLF) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      var out;\n      ++this.state.pos;\n\n      if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n      return out;\n    };\n\n    _proto.jsxReadString = function jsxReadString(quote) {\n      var out = \"\";\n      var chunkStart = ++this.state.pos;\n\n      for (;;) {\n        if (this.state.pos >= this.input.length) {\n          this.raise(this.state.start, \"Unterminated string constant\");\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n\n        if (ch === 38) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(types.string, out);\n    };\n\n    _proto.jsxReadEntity = function jsxReadEntity() {\n      var str = \"\";\n      var count = 0;\n      var entity;\n      var ch = this.input[this.state.pos];\n      var startPos = ++this.state.pos;\n\n      while (this.state.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = entities[str];\n          }\n\n          break;\n        }\n\n        str += ch;\n      }\n\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n\n      return entity;\n    };\n\n    _proto.jsxReadWord = function jsxReadWord() {\n      var ch;\n      var start = this.state.pos;\n\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === 45);\n\n      return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n    };\n\n    _proto.jsxParseIdentifier = function jsxParseIdentifier() {\n      var node = this.startNode();\n\n      if (this.match(types.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    };\n\n    _proto.jsxParseNamespacedName = function jsxParseNamespacedName() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var name = this.jsxParseIdentifier();\n      if (!this.eat(types.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    };\n\n    _proto.jsxParseElementName = function jsxParseElementName() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var node = this.jsxParseNamespacedName();\n\n      while (this.eat(types.dot)) {\n        var newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n\n      return node;\n    };\n\n    _proto.jsxParseAttributeValue = function jsxParseAttributeValue() {\n      var node;\n\n      switch (this.state.type) {\n        case types.braceL:\n          node = this.jsxParseExpressionContainer();\n\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            throw this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n          } else {\n            return node;\n          }\n\n        case types.jsxTagStart:\n        case types.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");}\n\n    };\n\n    _proto.jsxParseEmptyExpression = function jsxParseEmptyExpression() {\n      var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n    };\n\n    _proto.jsxParseSpreadChild = function jsxParseSpreadChild() {\n      var node = this.startNode();\n      this.expect(types.braceL);\n      this.expect(types.ellipsis);\n      node.expression = this.parseExpression();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadChild\");\n    };\n\n    _proto.jsxParseExpressionContainer = function jsxParseExpressionContainer() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(types.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    };\n\n    _proto.jsxParseAttribute = function jsxParseAttribute() {\n      var node = this.startNode();\n\n      if (this.eat(types.braceL)) {\n        this.expect(types.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(types.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    };\n\n    _proto.jsxParseOpeningElementAt = function jsxParseOpeningElementAt(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n\n      if (this.match(types.jsxTagEnd)) {\n        this.expect(types.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n\n      node.attributes = [];\n      node.name = this.jsxParseElementName();\n\n      while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n        node.attributes.push(this.jsxParseAttribute());\n      }\n\n      node.selfClosing = this.eat(types.slash);\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    };\n\n    _proto.jsxParseClosingElementAt = function jsxParseClosingElementAt(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n\n      if (this.match(types.jsxTagEnd)) {\n        this.expect(types.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n\n      node.name = this.jsxParseElementName();\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    };\n\n    _proto.jsxParseElementAt = function jsxParseElementAt(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n      var children = [];\n      var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      var closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case types.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n\n              if (this.eat(types.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n                break contents;\n              }\n\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case types.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case types.braceL:\n              if (this.lookahead().type === types.ellipsis) {\n                children.push(this.jsxParseSpreadChild());\n              } else {\n                children.push(this.jsxParseExpressionContainer());\n              }\n\n              break;\n\n            default:\n              throw this.unexpected();}\n\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <>\");\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n            this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n\n      node.children = children;\n\n      if (this.match(types.relational) && this.state.value === \"<\") {\n        this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag. \" + \"Did you want a JSX fragment <>...</>?\");\n      }\n\n      return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n    };\n\n    _proto.jsxParseElement = function jsxParseElement() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    };\n\n    _proto.parseExprAtom = function parseExprAtom(refShortHandDefaultPos) {\n      if (this.match(types.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(types.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else {\n        return _superClass.prototype.parseExprAtom.call(this, refShortHandDefaultPos);\n      }\n    };\n\n    _proto.readToken = function readToken(code) {\n      if (this.state.inPropertyName) return _superClass.prototype.readToken.call(this, code);\n      var context = this.curContext();\n\n      if (context === types$1.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === types$1.j_oTag || context === types$1.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === 62) {\n          ++this.state.pos;\n          return this.finishToken(types.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (code === 60 && this.state.exprAllowed) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagStart);\n      }\n\n      return _superClass.prototype.readToken.call(this, code);\n    };\n\n    _proto.updateContext = function updateContext(prevType) {\n      if (this.match(types.braceL)) {\n        var curContext = this.curContext();\n\n        if (curContext === types$1.j_oTag) {\n          this.state.context.push(types$1.braceExpression);\n        } else if (curContext === types$1.j_expr) {\n          this.state.context.push(types$1.templateQuasi);\n        } else {\n          _superClass.prototype.updateContext.call(this, prevType);\n        }\n\n        this.state.exprAllowed = true;\n      } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n        this.state.context.length -= 2;\n        this.state.context.push(types$1.j_cTag);\n        this.state.exprAllowed = false;\n      } else {\n        return _superClass.prototype.updateContext.call(this, prevType);\n      }\n    };\n\n    _inheritsLoose(_class, _superClass);\n\n    return _class;\n  }(superClass);\n};\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(\"Unexpected \" + x + \" value.\");\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    default:\n      return undefined;}\n\n}\n\nvar typescriptPlugin = function (superClass) {\n  return function (_superClass) {\n    function _class() {\n      return _superClass.apply(this, arguments) || this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.tsIsIdentifier = function tsIsIdentifier() {\n      return this.match(types.name);\n    };\n\n    _proto.tsNextTokenCanFollowModifier = function tsNextTokenCanFollowModifier() {\n      this.next();\n      return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question);\n    };\n\n    _proto.tsParseModifier = function tsParseModifier(allowedModifiers) {\n      if (!this.match(types.name)) {\n        return undefined;\n      }\n\n      var modifier = this.state.value;\n\n      if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n\n      return undefined;\n    };\n\n    _proto.tsIsListTerminator = function tsIsListTerminator(kind) {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(types.braceR);\n\n        case \"HeritageClauseElement\":\n          return this.match(types.braceL);\n\n        case \"TupleElementTypes\":\n          return this.match(types.bracketR);\n\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");}\n\n\n      throw new Error(\"Unreachable\");\n    };\n\n    _proto.tsParseList = function tsParseList(kind, parseElement) {\n      var result = [];\n\n      while (!this.tsIsListTerminator(kind)) {\n        result.push(parseElement());\n      }\n\n      return result;\n    };\n\n    _proto.tsParseDelimitedList = function tsParseDelimitedList(kind, parseElement) {\n      return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n    };\n\n    _proto.tsTryParseDelimitedList = function tsTryParseDelimitedList(kind, parseElement) {\n      return this.tsParseDelimitedListWorker(kind, parseElement, false);\n    };\n\n    _proto.tsParseDelimitedListWorker = function tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n      var result = [];\n\n      while (true) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        var element = parseElement();\n\n        if (element == null) {\n          return undefined;\n        }\n\n        result.push(element);\n\n        if (this.eat(types.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          this.expect(types.comma);\n        }\n\n        return undefined;\n      }\n\n      return result;\n    };\n\n    _proto.tsParseBracketedList = function tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(types.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      var result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(types.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    };\n\n    _proto.tsParseEntityName = function tsParseEntityName(allowReservedWords) {\n      var entity = this.parseIdentifier();\n\n      while (this.eat(types.dot)) {\n        var node = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n\n      return entity;\n    };\n\n    _proto.tsParseTypeReference = function tsParseTypeReference() {\n      var node = this.startNode();\n      node.typeName = this.tsParseEntityName(false);\n\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSTypeReference\");\n    };\n\n    _proto.tsParseThisTypePredicate = function tsParseThisTypePredicate(lhs) {\n      this.next();\n      var node = this.startNode();\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    };\n\n    _proto.tsParseThisTypeNode = function tsParseThisTypeNode() {\n      var node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    };\n\n    _proto.tsParseTypeQuery = function tsParseTypeQuery() {\n      var node = this.startNode();\n      this.expect(types._typeof);\n      node.exprName = this.tsParseEntityName(true);\n      return this.finishNode(node, \"TSTypeQuery\");\n    };\n\n    _proto.tsParseTypeParameter = function tsParseTypeParameter() {\n      var node = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(types._extends);\n      node.default = this.tsEatThenParseType(types.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    };\n\n    _proto.tsTryParseTypeParameters = function tsTryParseTypeParameters() {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    };\n\n    _proto.tsParseTypeParameters = function tsParseTypeParameters() {\n      var node = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    };\n\n    _proto.tsFillSignature = function tsFillSignature(returnToken, signature) {\n      var returnTokenRequired = returnToken === types.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(types.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    };\n\n    _proto.tsParseBindingListForSignature = function tsParseBindingListForSignature() {\n      var _this = this;\n\n      return this.parseBindingList(types.parenR).map(function (pattern) {\n        if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\") {\n          throw _this.unexpected(pattern.start, \"Name in a signature must be an Identifier.\");\n        }\n\n        return pattern;\n      });\n    };\n\n    _proto.tsParseTypeMemberSemicolon = function tsParseTypeMemberSemicolon() {\n      if (!this.eat(types.comma)) {\n        this.semicolon();\n      }\n    };\n\n    _proto.tsParseSignatureMember = function tsParseSignatureMember(kind) {\n      var node = this.startNode();\n\n      if (kind === \"TSConstructSignatureDeclaration\") {\n        this.expect(types._new);\n      }\n\n      this.tsFillSignature(types.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    };\n\n    _proto.tsIsUnambiguouslyIndexSignature = function tsIsUnambiguouslyIndexSignature() {\n      this.next();\n      return this.eat(types.name) && this.match(types.colon);\n    };\n\n    _proto.tsTryParseIndexSignature = function tsTryParseIndexSignature(node) {\n      if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n        return undefined;\n      }\n\n      this.expect(types.bracketL);\n      var id = this.parseIdentifier();\n      this.expect(types.colon);\n      id.typeAnnotation = this.tsParseTypeAnnotation(false);\n      this.expect(types.bracketR);\n      node.parameters = [id];\n      var type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    };\n\n    _proto.tsParsePropertyOrMethodSignature = function tsParsePropertyOrMethodSignature(node, readonly) {\n      this.parsePropertyName(node);\n      if (this.eat(types.question)) node.optional = true;\n      var nodeAny = node;\n\n      if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n        var method = nodeAny;\n        this.tsFillSignature(types.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        var property = nodeAny;\n        if (readonly) property.readonly = true;\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    };\n\n    _proto.tsParseTypeMember = function tsParseTypeMember() {\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\");\n      }\n\n      if (this.match(types._new) && this.tsLookAhead(this.tsIsStartOfConstructSignature.bind(this))) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\");\n      }\n\n      var node = this.startNode();\n      var readonly = !!this.tsParseModifier([\"readonly\"]);\n      var idx = this.tsTryParseIndexSignature(node);\n\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    };\n\n    _proto.tsIsStartOfConstructSignature = function tsIsStartOfConstructSignature() {\n      this.next();\n      return this.match(types.parenL) || this.isRelational(\"<\");\n    };\n\n    _proto.tsParseTypeLiteral = function tsParseTypeLiteral() {\n      var node = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    };\n\n    _proto.tsParseObjectTypeMembers = function tsParseObjectTypeMembers() {\n      this.expect(types.braceL);\n      var members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n      this.expect(types.braceR);\n      return members;\n    };\n\n    _proto.tsIsStartOfMappedType = function tsIsStartOfMappedType() {\n      this.next();\n\n      if (this.eat(types.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n\n      if (!this.match(types.bracketL)) {\n        return false;\n      }\n\n      this.next();\n\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n\n      this.next();\n      return this.match(types._in);\n    };\n\n    _proto.tsParseMappedTypeParameter = function tsParseMappedTypeParameter() {\n      var node = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(types._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    };\n\n    _proto.tsParseMappedType = function tsParseMappedType() {\n      var node = this.startNode();\n      this.expect(types.braceL);\n\n      if (this.match(types.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(types.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(types.bracketR);\n\n      if (this.match(types.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(types.question);\n      } else if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"TSMappedType\");\n    };\n\n    _proto.tsParseTupleType = function tsParseTupleType() {\n      var node = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseType.bind(this), true, false);\n      return this.finishNode(node, \"TSTupleType\");\n    };\n\n    _proto.tsParseParenthesizedType = function tsParseParenthesizedType() {\n      var node = this.startNode();\n      this.expect(types.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    };\n\n    _proto.tsParseFunctionOrConstructorType = function tsParseFunctionOrConstructorType(type) {\n      var node = this.startNode();\n\n      if (type === \"TSConstructorType\") {\n        this.expect(types._new);\n      }\n\n      this.tsFillSignature(types.arrow, node);\n      return this.finishNode(node, type);\n    };\n\n    _proto.tsParseLiteralTypeNode = function tsParseLiteralTypeNode() {\n      var _this2 = this;\n\n      var node = this.startNode();\n\n      node.literal = function () {\n        switch (_this2.state.type) {\n          case types.num:\n            return _this2.parseLiteral(_this2.state.value, \"NumericLiteral\");\n\n          case types.string:\n            return _this2.parseLiteral(_this2.state.value, \"StringLiteral\");\n\n          case types._true:\n          case types._false:\n            return _this2.parseBooleanLiteral();\n\n          default:\n            throw _this2.unexpected();}\n\n      }();\n\n      return this.finishNode(node, \"TSLiteralType\");\n    };\n\n    _proto.tsParseNonArrayType = function tsParseNonArrayType() {\n      switch (this.state.type) {\n        case types.name:\n        case types._void:\n        case types._null:\n          {\n            var type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (type !== undefined && this.lookahead().type !== types.dot) {\n              var node = this.startNode();\n              this.next();\n              return this.finishNode(node, type);\n            }\n\n            return this.tsParseTypeReference();\n          }\n\n        case types.string:\n        case types.num:\n        case types._true:\n        case types._false:\n          return this.tsParseLiteralTypeNode();\n\n        case types.plusMin:\n          if (this.state.value === \"-\") {\n            var _node = this.startNode();\n\n            this.next();\n\n            if (!this.match(types.num)) {\n              throw this.unexpected();\n            }\n\n            _node.literal = this.parseLiteral(-this.state.value, \"NumericLiteral\", _node.start, _node.loc.start);\n            return this.finishNode(_node, \"TSLiteralType\");\n          }\n\n          break;\n\n        case types._this:\n          {\n            var thisKeyword = this.tsParseThisTypeNode();\n\n            if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n              return this.tsParseThisTypePredicate(thisKeyword);\n            } else {\n              return thisKeyword;\n            }\n          }\n\n        case types._typeof:\n          return this.tsParseTypeQuery();\n\n        case types.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n        case types.bracketL:\n          return this.tsParseTupleType();\n\n        case types.parenL:\n          return this.tsParseParenthesizedType();}\n\n\n      throw this.unexpected();\n    };\n\n    _proto.tsParseArrayTypeOrHigher = function tsParseArrayTypeOrHigher() {\n      var type = this.tsParseNonArrayType();\n\n      while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n        if (this.match(types.bracketR)) {\n          var node = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(types.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          var _node2 = this.startNodeAtNode(type);\n\n          _node2.objectType = type;\n          _node2.indexType = this.tsParseType();\n          this.expect(types.bracketR);\n          type = this.finishNode(_node2, \"TSIndexedAccessType\");\n        }\n      }\n\n      return type;\n    };\n\n    _proto.tsParseTypeOperator = function tsParseTypeOperator(operator) {\n      var node = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n      return this.finishNode(node, \"TSTypeOperator\");\n    };\n\n    _proto.tsParseInferType = function tsParseInferType() {\n      var node = this.startNode();\n      this.expectContextual(\"infer\");\n      var typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    };\n\n    _proto.tsParseTypeOperatorOrHigher = function tsParseTypeOperatorOrHigher() {\n      var _this3 = this;\n\n      var operator = [\"keyof\", \"unique\"].find(function (kw) {\n        return _this3.isContextual(kw);\n      });\n      return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n    };\n\n    _proto.tsParseUnionOrIntersectionType = function tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n      this.eat(operator);\n      var type = parseConstituentType();\n\n      if (this.match(operator)) {\n        var types$$1 = [type];\n\n        while (this.eat(operator)) {\n          types$$1.push(parseConstituentType());\n        }\n\n        var node = this.startNodeAtNode(type);\n        node.types = types$$1;\n        type = this.finishNode(node, kind);\n      }\n\n      return type;\n    };\n\n    _proto.tsParseIntersectionTypeOrHigher = function tsParseIntersectionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n    };\n\n    _proto.tsParseUnionTypeOrHigher = function tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n    };\n\n    _proto.tsIsStartOfFunctionType = function tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n\n      return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n    };\n\n    _proto.tsSkipParameterStart = function tsSkipParameterStart() {\n      if (this.match(types.name) || this.match(types._this)) {\n        this.next();\n        return true;\n      }\n\n      return false;\n    };\n\n    _proto.tsIsUnambiguouslyStartOfFunctionType = function tsIsUnambiguouslyStartOfFunctionType() {\n      this.next();\n\n      if (this.match(types.parenR) || this.match(types.ellipsis)) {\n        return true;\n      }\n\n      if (this.tsSkipParameterStart()) {\n        if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n          return true;\n        }\n\n        if (this.match(types.parenR)) {\n          this.next();\n\n          if (this.match(types.arrow)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto.tsParseTypeOrTypePredicateAnnotation = function tsParseTypeOrTypePredicateAnnotation(returnToken) {\n      var _this4 = this;\n\n      return this.tsInType(function () {\n        var t = _this4.startNode();\n\n        _this4.expect(returnToken);\n\n        var typePredicateVariable = _this4.tsIsIdentifier() && _this4.tsTryParse(_this4.tsParseTypePredicatePrefix.bind(_this4));\n\n        if (!typePredicateVariable) {\n          return _this4.tsParseTypeAnnotation(false, t);\n        }\n\n        var type = _this4.tsParseTypeAnnotation(false);\n\n        var node = _this4.startNodeAtNode(typePredicateVariable);\n\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        t.typeAnnotation = _this4.finishNode(node, \"TSTypePredicate\");\n        return _this4.finishNode(t, \"TSTypeAnnotation\");\n      });\n    };\n\n    _proto.tsTryParseTypeOrTypePredicateAnnotation = function tsTryParseTypeOrTypePredicateAnnotation() {\n      return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n    };\n\n    _proto.tsTryParseTypeAnnotation = function tsTryParseTypeAnnotation() {\n      return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n    };\n\n    _proto.tsTryParseType = function tsTryParseType() {\n      return this.tsEatThenParseType(types.colon);\n    };\n\n    _proto.tsParseTypePredicatePrefix = function tsParseTypePredicatePrefix() {\n      var id = this.parseIdentifier();\n\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    };\n\n    _proto.tsParseTypeAnnotation = function tsParseTypeAnnotation(eatColon, t) {\n      var _this5 = this;\n\n      if (eatColon === void 0) {\n        eatColon = true;\n      }\n\n      if (t === void 0) {\n        t = this.startNode();\n      }\n\n      this.tsInType(function () {\n        if (eatColon) _this5.expect(types.colon);\n        t.typeAnnotation = _this5.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    };\n\n    _proto.tsParseType = function tsParseType() {\n      assert(this.state.inType);\n      var type = this.tsParseNonConditionalType();\n\n      if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n        return type;\n      }\n\n      var node = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(types.question);\n      node.trueType = this.tsParseType();\n      this.expect(types.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    };\n\n    _proto.tsParseNonConditionalType = function tsParseNonConditionalType() {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n\n      if (this.match(types._new)) {\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n\n      return this.tsParseUnionTypeOrHigher();\n    };\n\n    _proto.tsParseTypeAssertion = function tsParseTypeAssertion() {\n      var _this6 = this;\n\n      var node = this.startNode();\n      node.typeAnnotation = this.tsInType(function () {\n        return _this6.tsParseType();\n      });\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    };\n\n    _proto.tsTryParseTypeArgumentsInExpression = function tsTryParseTypeArgumentsInExpression() {\n      var _this7 = this;\n\n      return this.tsTryParseAndCatch(function () {\n        var res = _this7.tsParseTypeArguments();\n\n        _this7.expect(types.parenL);\n\n        return res;\n      });\n    };\n\n    _proto.tsParseHeritageClause = function tsParseHeritageClause() {\n      return this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n    };\n\n    _proto.tsParseExpressionWithTypeArguments = function tsParseExpressionWithTypeArguments() {\n      var node = this.startNode();\n      node.expression = this.tsParseEntityName(false);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    };\n\n    _proto.tsParseInterfaceDeclaration = function tsParseInterfaceDeclaration(node) {\n      node.id = this.parseIdentifier();\n      node.typeParameters = this.tsTryParseTypeParameters();\n\n      if (this.eat(types._extends)) {\n        node.extends = this.tsParseHeritageClause();\n      }\n\n      var body = this.startNode();\n      body.body = this.tsParseObjectTypeMembers();\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    };\n\n    _proto.tsParseTypeAliasDeclaration = function tsParseTypeAliasDeclaration(node) {\n      node.id = this.parseIdentifier();\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    };\n\n    _proto.tsInType = function tsInType(cb) {\n      var oldInType = this.state.inType;\n      this.state.inType = true;\n\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    };\n\n    _proto.tsEatThenParseType = function tsEatThenParseType(token) {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    };\n\n    _proto.tsExpectThenParseType = function tsExpectThenParseType(token) {\n      var _this8 = this;\n\n      return this.tsDoThenParseType(function () {\n        return _this8.expect(token);\n      });\n    };\n\n    _proto.tsNextThenParseType = function tsNextThenParseType() {\n      var _this9 = this;\n\n      return this.tsDoThenParseType(function () {\n        return _this9.next();\n      });\n    };\n\n    _proto.tsDoThenParseType = function tsDoThenParseType(cb) {\n      var _this10 = this;\n\n      return this.tsInType(function () {\n        cb();\n        return _this10.tsParseType();\n      });\n    };\n\n    _proto.tsParseEnumMember = function tsParseEnumMember() {\n      var node = this.startNode();\n      node.id = this.match(types.string) ? this.parseLiteral(this.state.value, \"StringLiteral\") : this.parseIdentifier(true);\n\n      if (this.eat(types.eq)) {\n        node.initializer = this.parseMaybeAssign();\n      }\n\n      return this.finishNode(node, \"TSEnumMember\");\n    };\n\n    _proto.tsParseEnumDeclaration = function tsParseEnumDeclaration(node, isConst) {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.expect(types.braceL);\n      node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n      this.expect(types.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    };\n\n    _proto.tsParseModuleBlock = function tsParseModuleBlock() {\n      var node = this.startNode();\n      this.expect(types.braceL);\n      this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n      return this.finishNode(node, \"TSModuleBlock\");\n    };\n\n    _proto.tsParseModuleOrNamespaceDeclaration = function tsParseModuleOrNamespaceDeclaration(node) {\n      node.id = this.parseIdentifier();\n\n      if (this.eat(types.dot)) {\n        var inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner);\n        node.body = inner;\n      } else {\n        node.body = this.tsParseModuleBlock();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    };\n\n    _proto.tsParseAmbientExternalModuleDeclaration = function tsParseAmbientExternalModuleDeclaration(node) {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(types.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n\n      if (this.match(types.braceL)) {\n        node.body = this.tsParseModuleBlock();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    };\n\n    _proto.tsParseImportEqualsDeclaration = function tsParseImportEqualsDeclaration(node, isExport) {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.expect(types.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    };\n\n    _proto.tsIsExternalModuleReference = function tsIsExternalModuleReference() {\n      return this.isContextual(\"require\") && this.lookahead().type === types.parenL;\n    };\n\n    _proto.tsParseModuleReference = function tsParseModuleReference() {\n      return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n    };\n\n    _proto.tsParseExternalModuleReference = function tsParseExternalModuleReference() {\n      var node = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(types.parenL);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected();\n      }\n\n      node.expression = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.expect(types.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    };\n\n    _proto.tsLookAhead = function tsLookAhead(f) {\n      var state = this.state.clone();\n      var res = f();\n      this.state = state;\n      return res;\n    };\n\n    _proto.tsTryParseAndCatch = function tsTryParseAndCatch(f) {\n      var state = this.state.clone();\n\n      try {\n        return f();\n      } catch (e) {\n        if (e instanceof SyntaxError) {\n          this.state = state;\n          return undefined;\n        }\n\n        throw e;\n      }\n    };\n\n    _proto.tsTryParse = function tsTryParse(f) {\n      var state = this.state.clone();\n      var result = f();\n\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    };\n\n    _proto.nodeWithSamePosition = function nodeWithSamePosition(original, type) {\n      var node = this.startNodeAtNode(original);\n      node.type = type;\n      node.end = original.end;\n      node.loc.end = original.loc.end;\n\n      if (original.leadingComments) {\n        node.leadingComments = original.leadingComments;\n      }\n\n      if (original.trailingComments) {\n        node.trailingComments = original.trailingComments;\n      }\n\n      if (original.innerComments) node.innerComments = original.innerComments;\n      return node;\n    };\n\n    _proto.tsTryParseDeclare = function tsTryParseDeclare(nany) {\n      switch (this.state.type) {\n        case types._function:\n          this.next();\n          return this.parseFunction(nany, true);\n\n        case types._class:\n          return this.parseClass(nany, true, false);\n\n        case types._const:\n          if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types._var:\n        case types._let:\n          return this.parseVarStatement(nany, this.state.type);\n\n        case types.name:\n          {\n            var value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }}\n\n    };\n\n    _proto.tsTryParseExportDeclaration = function tsTryParseExportDeclaration() {\n      return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n    };\n\n    _proto.tsParseExpressionStatement = function tsParseExpressionStatement(node, expr) {\n      switch (expr.name) {\n        case \"declare\":\n          {\n            var declaration = this.tsTryParseDeclare(node);\n\n            if (declaration) {\n              declaration.declare = true;\n              return declaration;\n            }\n\n            break;\n          }\n\n        case \"global\":\n          if (this.match(types.braceL)) {\n            var mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, false);}\n\n    };\n\n    _proto.tsParseDeclaration = function tsParseDeclaration(node, value, next) {\n      switch (value) {\n        case \"abstract\":\n          if (next || this.match(types._class)) {\n            var cls = node;\n            cls.abstract = true;\n            if (next) this.next();\n            return this.parseClass(cls, true, false);\n          }\n\n          break;\n\n        case \"enum\":\n          if (next || this.match(types.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, false);\n          }\n\n          break;\n\n        case \"interface\":\n          if (next || this.match(types.name)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n\n          break;\n\n        case \"module\":\n          if (next) this.next();\n\n          if (this.match(types.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (next || this.match(types.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n\n          break;\n\n        case \"namespace\":\n          if (next || this.match(types.name)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n\n          break;\n\n        case \"type\":\n          if (next || this.match(types.name)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n\n          break;}\n\n    };\n\n    _proto.tsTryParseGenericAsyncArrowFunction = function tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n      var _this11 = this;\n\n      var res = this.tsTryParseAndCatch(function () {\n        var node = _this11.startNodeAt(startPos, startLoc);\n\n        node.typeParameters = _this11.tsParseTypeParameters();\n\n        _superClass.prototype.parseFunctionParams.call(_this11, node);\n\n        node.returnType = _this11.tsTryParseTypeOrTypePredicateAnnotation();\n\n        _this11.expect(types.arrow);\n\n        return node;\n      });\n\n      if (!res) {\n        return undefined;\n      }\n\n      res.id = null;\n      res.generator = false;\n      res.expression = true;\n      res.async = true;\n      this.parseFunctionBody(res, true);\n      return this.finishNode(res, \"ArrowFunctionExpression\");\n    };\n\n    _proto.tsParseTypeArguments = function tsParseTypeArguments() {\n      var _this12 = this;\n\n      var node = this.startNode();\n      node.params = this.tsInType(function () {\n        _this12.expectRelational(\"<\");\n\n        return _this12.tsParseDelimitedList(\"TypeParametersOrArguments\", _this12.tsParseType.bind(_this12));\n      });\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    };\n\n    _proto.tsIsDeclarationStart = function tsIsDeclarationStart() {\n      if (this.match(types.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;}\n\n      }\n\n      return false;\n    };\n\n    _proto.isExportDefaultSpecifier = function isExportDefaultSpecifier() {\n      if (this.tsIsDeclarationStart()) return false;\n      return _superClass.prototype.isExportDefaultSpecifier.call(this);\n    };\n\n    _proto.parseAssignableListItem = function parseAssignableListItem(allowModifiers, decorators) {\n      var accessibility;\n      var readonly = false;\n\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      var left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n      if (accessibility || readonly) {\n        var pp = this.startNodeAtNode(elt);\n\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          throw this.raise(pp.start, \"A parameter property may not be declared using a binding pattern.\");\n        }\n\n        pp.parameter = elt;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      } else {\n        if (decorators.length) {\n          left.decorators = decorators;\n        }\n\n        return elt;\n      }\n    };\n\n    _proto.parseFunctionBodyAndFinish = function parseFunctionBodyAndFinish(node, type, allowExpressionBody) {\n      if (!allowExpressionBody && this.match(types.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n      }\n\n      var bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n      if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      _superClass.prototype.parseFunctionBodyAndFinish.call(this, node, type, allowExpressionBody);\n    };\n\n    _proto.parseSubscript = function parseSubscript(base, startPos, startLoc, noCalls, state) {\n      if (!this.hasPrecedingLineBreak() && this.eat(types.bang)) {\n        var nonNullExpression = this.startNodeAt(startPos, startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (!noCalls && this.isRelational(\"<\")) {\n        if (this.atPossibleAsync(base)) {\n          var asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        var node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        var typeArguments = this.tsTryParseTypeArgumentsInExpression();\n\n        if (typeArguments) {\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          node.typeParameters = typeArguments;\n          return this.finishCallExpression(node);\n        }\n      }\n\n      return _superClass.prototype.parseSubscript.call(this, base, startPos, startLoc, noCalls, state);\n    };\n\n    _proto.parseNewArguments = function parseNewArguments(node) {\n      var _this13 = this;\n\n      if (this.isRelational(\"<\")) {\n        var typeParameters = this.tsTryParseAndCatch(function () {\n          var args = _this13.tsParseTypeArguments();\n\n          if (!_this13.match(types.parenL)) _this13.unexpected();\n          return args;\n        });\n\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      _superClass.prototype.parseNewArguments.call(this, node);\n    };\n\n    _proto.parseExprOp = function parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n      if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n        var node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsNextThenParseType();\n        this.finishNode(node, \"TSAsExpression\");\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n\n      return _superClass.prototype.parseExprOp.call(this, left, leftStartPos, leftStartLoc, minPrec, noIn);\n    };\n\n    _proto.checkReservedWord = function checkReservedWord(word, startLoc, checkKeywords, isBinding) {};\n\n    _proto.checkDuplicateExports = function checkDuplicateExports() {};\n\n    _proto.parseImport = function parseImport(node) {\n      if (this.match(types.name) && this.lookahead().type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      return _superClass.prototype.parseImport.call(this, node);\n    };\n\n    _proto.parseExport = function parseExport(node) {\n      if (this.match(types._import)) {\n        this.expect(types._import);\n        return this.tsParseImportEqualsDeclaration(node, true);\n      } else if (this.eat(types.eq)) {\n        var assign = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        var decl = node;\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return _superClass.prototype.parseExport.call(this, node);\n      }\n    };\n\n    _proto.isAbstractClass = function isAbstractClass() {\n      return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n    };\n\n    _proto.parseExportDefaultExpression = function parseExportDefaultExpression() {\n      if (this.isAbstractClass()) {\n        var cls = this.startNode();\n        this.next();\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      return _superClass.prototype.parseExportDefaultExpression.call(this);\n    };\n\n    _proto.parseStatementContent = function parseStatementContent(declaration, topLevel) {\n      if (this.state.type === types._const) {\n        var ahead = this.lookahead();\n\n        if (ahead.type === types.name && ahead.value === \"enum\") {\n          var node = this.startNode();\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, true);\n        }\n      }\n\n      return _superClass.prototype.parseStatementContent.call(this, declaration, topLevel);\n    };\n\n    _proto.parseAccessModifier = function parseAccessModifier() {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    };\n\n    _proto.parseClassMember = function parseClassMember(classBody, member, state) {\n      var accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n\n      _superClass.prototype.parseClassMember.call(this, classBody, member, state);\n    };\n\n    _proto.parseClassMemberWithIsStatic = function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n      var methodOrProp = member;\n      var prop = member;\n      var propOrIdx = member;\n      var abstract = false,\n      readonly = false;\n      var mod = this.tsParseModifier([\"abstract\", \"readonly\"]);\n\n      switch (mod) {\n        case \"readonly\":\n          readonly = true;\n          abstract = !!this.tsParseModifier([\"abstract\"]);\n          break;\n\n        case \"abstract\":\n          abstract = true;\n          readonly = !!this.tsParseModifier([\"readonly\"]);\n          break;}\n\n\n      if (abstract) methodOrProp.abstract = true;\n      if (readonly) propOrIdx.readonly = true;\n\n      if (!abstract && !isStatic && !methodOrProp.accessibility) {\n        var idx = this.tsTryParseIndexSignature(member);\n\n        if (idx) {\n          classBody.body.push(idx);\n          return;\n        }\n      }\n\n      if (readonly) {\n        methodOrProp.static = isStatic;\n        this.parseClassPropertyName(prop);\n        this.parsePostMemberNameModifiers(methodOrProp);\n        this.pushClassProperty(classBody, prop);\n        return;\n      }\n\n      _superClass.prototype.parseClassMemberWithIsStatic.call(this, classBody, member, state, isStatic);\n    };\n\n    _proto.parsePostMemberNameModifiers = function parsePostMemberNameModifiers(methodOrProp) {\n      var optional = this.eat(types.question);\n      if (optional) methodOrProp.optional = true;\n    };\n\n    _proto.parseExpressionStatement = function parseExpressionStatement(node, expr) {\n      var decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n      return decl || _superClass.prototype.parseExpressionStatement.call(this, node, expr);\n    };\n\n    _proto.shouldParseExportDeclaration = function shouldParseExportDeclaration() {\n      if (this.tsIsDeclarationStart()) return true;\n      return _superClass.prototype.shouldParseExportDeclaration.call(this);\n    };\n\n    _proto.parseConditional = function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n      if (!refNeedsArrowPos || !this.match(types.question)) {\n        return _superClass.prototype.parseConditional.call(this, expr, noIn, startPos, startLoc, refNeedsArrowPos);\n      }\n\n      var state = this.state.clone();\n\n      try {\n        return _superClass.prototype.parseConditional.call(this, expr, noIn, startPos, startLoc);\n      } catch (err) {\n        if (!(err instanceof SyntaxError)) {\n          throw err;\n        }\n\n        this.state = state;\n        refNeedsArrowPos.start = err.pos || this.state.start;\n        return expr;\n      }\n    };\n\n    _proto.parseParenItem = function parseParenItem(node, startPos, startLoc) {\n      node = _superClass.prototype.parseParenItem.call(this, node, startPos, startLoc);\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        var typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    };\n\n    _proto.parseExportDeclaration = function parseExportDeclaration(node) {\n      var isDeclare = this.eatContextual(\"declare\");\n      var declaration;\n\n      if (this.match(types.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n\n      if (!declaration) {\n        declaration = _superClass.prototype.parseExportDeclaration.call(this, node);\n      }\n\n      if (declaration && isDeclare) {\n        declaration.declare = true;\n      }\n\n      return declaration;\n    };\n\n    _proto.parseClassId = function parseClassId(node, isStatement, optionalId) {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      _superClass.prototype.parseClassId.apply(this, arguments);\n\n      var typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    };\n\n    _proto.parseClassProperty = function parseClassProperty(node) {\n      if (!node.optional && this.eat(types.bang)) {\n        node.definite = true;\n      }\n\n      var type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      return _superClass.prototype.parseClassProperty.call(this, node);\n    };\n\n    _proto.pushClassMethod = function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor) {\n      var typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n\n      _superClass.prototype.pushClassMethod.call(this, classBody, method, isGenerator, isAsync, isConstructor);\n    };\n\n    _proto.pushClassPrivateMethod = function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      var typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n\n      _superClass.prototype.pushClassPrivateMethod.call(this, classBody, method, isGenerator, isAsync);\n    };\n\n    _proto.parseClassSuper = function parseClassSuper(node) {\n      _superClass.prototype.parseClassSuper.call(this, node);\n\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause();\n      }\n    };\n\n    _proto.parseObjPropValue = function parseObjPropValue(prop) {\n      var _superClass$prototype;\n\n      if (this.isRelational(\"<\")) {\n        throw new Error(\"TODO\");\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_superClass$prototype = _superClass.prototype.parseObjPropValue).call.apply(_superClass$prototype, [this, prop].concat(args));\n    };\n\n    _proto.parseFunctionParams = function parseFunctionParams(node, allowModifiers) {\n      var typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n\n      _superClass.prototype.parseFunctionParams.call(this, node, allowModifiers);\n    };\n\n    _proto.parseVarHead = function parseVarHead(decl) {\n      _superClass.prototype.parseVarHead.call(this, decl);\n\n      if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n        decl.definite = true;\n      }\n\n      var type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.finishNode(decl.id, decl.id.type);\n      }\n    };\n\n    _proto.parseAsyncArrowFromCallExpression = function parseAsyncArrowFromCallExpression(node, call) {\n      if (this.match(types.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n\n      return _superClass.prototype.parseAsyncArrowFromCallExpression.call(this, node, call);\n    };\n\n    _proto.parseMaybeAssign = function parseMaybeAssign() {\n      var jsxError;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (this.match(types.jsxTagStart)) {\n        var context = this.curContext();\n        assert(context === types$1.j_oTag);\n        assert(this.state.context[this.state.context.length - 2] === types$1.j_expr);\n\n        var _state = this.state.clone();\n\n        try {\n          var _superClass$prototype2;\n\n          return (_superClass$prototype2 = _superClass.prototype.parseMaybeAssign).call.apply(_superClass$prototype2, [this].concat(args));\n        } catch (err) {\n          if (!(err instanceof SyntaxError)) {\n            throw err;\n          }\n\n          this.state = _state;\n          assert(this.curContext() === types$1.j_oTag);\n          this.state.context.pop();\n          assert(this.curContext() === types$1.j_expr);\n          this.state.context.pop();\n          jsxError = err;\n        }\n      }\n\n      if (jsxError === undefined && !this.isRelational(\"<\")) {\n        var _superClass$prototype3;\n\n        return (_superClass$prototype3 = _superClass.prototype.parseMaybeAssign).call.apply(_superClass$prototype3, [this].concat(args));\n      }\n\n      var arrowExpression;\n      var typeParameters;\n      var state = this.state.clone();\n\n      try {\n        var _superClass$prototype4;\n\n        typeParameters = this.tsParseTypeParameters();\n        arrowExpression = (_superClass$prototype4 = _superClass.prototype.parseMaybeAssign).call.apply(_superClass$prototype4, [this].concat(args));\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\") {\n          this.unexpected();\n        }\n      } catch (err) {\n        var _superClass$prototype5;\n\n        if (!(err instanceof SyntaxError)) {\n          throw err;\n        }\n\n        if (jsxError) {\n          throw jsxError;\n        }\n\n        assert(!this.hasPlugin(\"jsx\"));\n        this.state = state;\n        return (_superClass$prototype5 = _superClass.prototype.parseMaybeAssign).call.apply(_superClass$prototype5, [this].concat(args));\n      }\n\n      if (typeParameters && typeParameters.params.length !== 0) {\n        this.resetStartLocationFromNode(arrowExpression, typeParameters.params[0]);\n      }\n\n      arrowExpression.typeParameters = typeParameters;\n      return arrowExpression;\n    };\n\n    _proto.parseMaybeUnary = function parseMaybeUnary(refShorthandDefaultPos) {\n      if (!this.hasPlugin(\"jsx\") && this.eatRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return _superClass.prototype.parseMaybeUnary.call(this, refShorthandDefaultPos);\n      }\n    };\n\n    _proto.parseArrow = function parseArrow(node) {\n      if (this.match(types.colon)) {\n        var state = this.state.clone();\n\n        try {\n          var returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          node.returnType = returnType;\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            throw err;\n          }\n        }\n      }\n\n      return _superClass.prototype.parseArrow.call(this, node);\n    };\n\n    _proto.parseAssignableListItemTypes = function parseAssignableListItemTypes(param) {\n      if (this.eat(types.question)) {\n        if (param.type !== \"Identifier\") {\n          throw this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n        }\n\n        param.optional = true;\n      }\n\n      var type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      return this.finishNode(param, param.type);\n    };\n\n    _proto.toAssignable = function toAssignable(node, isBinding, contextDescription) {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return _superClass.prototype.toAssignable.call(this, this.typeCastToParameter(node), isBinding, contextDescription);\n\n        case \"TSParameterProperty\":\n          return _superClass.prototype.toAssignable.call(this, node, isBinding, contextDescription);\n\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isBinding, contextDescription);\n          return node;\n\n        default:\n          return _superClass.prototype.toAssignable.call(this, node, isBinding, contextDescription);}\n\n    };\n\n    _proto.checkLVal = function checkLVal(expr, isBinding, checkClashes, contextDescription) {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          return;\n\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, isBinding, checkClashes, \"parameter property\");\n          return;\n\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(expr.expression, isBinding, checkClashes, contextDescription);\n          return;\n\n        default:\n          _superClass.prototype.checkLVal.call(this, expr, isBinding, checkClashes, contextDescription);\n\n          return;}\n\n    };\n\n    _proto.parseBindingAtom = function parseBindingAtom() {\n      switch (this.state.type) {\n        case types._this:\n          return this.parseIdentifier(true);\n\n        default:\n          return _superClass.prototype.parseBindingAtom.call(this);}\n\n    };\n\n    _proto.isClassMethod = function isClassMethod() {\n      return this.isRelational(\"<\") || _superClass.prototype.isClassMethod.call(this);\n    };\n\n    _proto.isClassProperty = function isClassProperty() {\n      return this.match(types.bang) || this.match(types.colon) || _superClass.prototype.isClassProperty.call(this);\n    };\n\n    _proto.parseMaybeDefault = function parseMaybeDefault() {\n      var _superClass$prototype6;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var node = (_superClass$prototype6 = _superClass.prototype.parseMaybeDefault).call.apply(_superClass$prototype6, [this].concat(args));\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n      }\n\n      return node;\n    };\n\n    _proto.readToken = function readToken(code) {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else {\n        return _superClass.prototype.readToken.call(this, code);\n      }\n    };\n\n    _proto.toAssignableList = function toAssignableList(exprList, isBinding, contextDescription) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n\n        if (expr && expr.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n\n      return _superClass.prototype.toAssignableList.call(this, exprList, isBinding, contextDescription);\n    };\n\n    _proto.typeCastToParameter = function typeCastToParameter(node) {\n      node.expression.typeAnnotation = node.typeAnnotation;\n      return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    };\n\n    _proto.toReferencedList = function toReferencedList(exprList) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n\n        if (expr && expr._exprListItem && expr.type === \"TsTypeCastExpression\") {\n          this.raise(expr.start, \"Did not expect a type annotation here.\");\n        }\n      }\n\n      return exprList;\n    };\n\n    _proto.shouldParseArrow = function shouldParseArrow() {\n      return this.match(types.colon) || _superClass.prototype.shouldParseArrow.call(this);\n    };\n\n    _proto.shouldParseAsyncArrow = function shouldParseAsyncArrow() {\n      return this.match(types.colon) || _superClass.prototype.shouldParseAsyncArrow.call(this);\n    };\n\n    _proto.canHaveLeadingDecorator = function canHaveLeadingDecorator() {\n      return _superClass.prototype.canHaveLeadingDecorator.call(this) || this.isAbstractClass();\n    };\n\n    _inheritsLoose(_class, _superClass);\n\n    return _class;\n  }(superClass);\n};\n\nplugins.estree = estreePlugin;\nplugins.flow = flowPlugin;\nplugins.jsx = jsxPlugin;\nplugins.typescript = typescriptPlugin;\nfunction parse(input, options) {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      var parser = getParser(options, input);\n      var ast = parser.parse();\n      if (!parser.sawUnambiguousESM) ast.program.sourceType = \"script\";\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (scriptError) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  var parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\nfunction getParser(options, input) {\n  var cls = options && options.plugins ? getParserClass(options.plugins) : Parser;\n  return new cls(options, input);\n}\n\nvar parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  if (pluginsFromOptions.indexOf(\"decorators-legacy\") >= 0 && pluginsFromOptions.indexOf(\"decorators\") >= 0) {\n    throw new Error(\"Cannot use decorators and decorators2 plugin together\");\n  }\n\n  var pluginList = pluginsFromOptions.filter(function (p) {\n    return p === \"estree\" || p === \"flow\" || p === \"jsx\" || p === \"typescript\";\n  });\n\n  if (pluginList.indexOf(\"flow\") >= 0) {\n    pluginList = pluginList.filter(function (plugin) {\n      return plugin !== \"flow\";\n    });\n    pluginList.push(\"flow\");\n  }\n\n  if (pluginList.indexOf(\"flow\") >= 0 && pluginList.indexOf(\"typescript\") >= 0) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginList.indexOf(\"typescript\") >= 0) {\n    pluginList = pluginList.filter(function (plugin) {\n      return plugin !== \"typescript\";\n    });\n    pluginList.push(\"typescript\");\n  }\n\n  if (pluginList.indexOf(\"estree\") >= 0) {\n    pluginList = pluginList.filter(function (plugin) {\n      return plugin !== \"estree\";\n    });\n    pluginList.unshift(\"estree\");\n  }\n\n  var key = pluginList.join(\"/\");\n  var cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (var _i2 = 0, _pluginList2 = pluginList; _i2 < _pluginList2.length; _i2++) {\n      var plugin = _pluginList2[_i2];\n      cls = plugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": null,
    "sourceType": "script",
    "mtime": 1546528222121
  }
}