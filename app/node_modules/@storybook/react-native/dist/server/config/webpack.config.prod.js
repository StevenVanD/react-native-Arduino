'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _universalDotenv = require('universal-dotenv');

var _dotenvWebpack = require('dotenv-webpack');

var _dotenvWebpack2 = _interopRequireDefault(_dotenvWebpack);

var _htmlWebpackPlugin = require('html-webpack-plugin');

var _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);

var _server = require('@storybook/core/server');

var _package = require('../../../package.json');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getConfig = function getConfig(options) {
  var config = {
    mode: 'production',
    bail: true,
    devtool: '#cheap-module-source-map',
    entry: {
      manager: [_path2.default.resolve(__dirname, '../../manager')]
    },
    output: {
      path: _path2.default.join(__dirname, 'dist'),
      filename: 'static/[name].bundle.js',
      // Here we set the publicPath to ''.
      // This allows us to deploy storybook into subpaths like GitHub pages.
      // This works with css and image loaders too.
      // This is working for storybook since, we don't use pushState urls and
      // relative URLs works always.
      publicPath: '/'
    },
    plugins: [new _htmlWebpackPlugin2.default({
      filename: 'index.html',
      data: {
        version: _package.version
      },
      template: _server.indexHtmlPath
    }), new _webpack2.default.DefinePlugin({
      'process.env.NODE_ENV': '"production"',
      storybookOptions: (0, _stringify2.default)(options)
    }), new _webpack2.default.optimize.DedupePlugin(), new _webpack2.default.DefinePlugin((0, _universalDotenv.getEnvironment)().webpack), new _dotenvWebpack2.default({ silent: true })],
    module: {
      rules: [{
        test: /\.jsx?$/,
        loader: require.resolve('babel-loader'),
        query: require('./babel.prod.js'), // eslint-disable-line
        include: _utils.includePaths,
        exclude: _utils.excludePaths
      }, {
        test: /\.md$/,
        loader: require.resolve('raw-loader')
      }]
    }
  };

  return config;
};

exports.default = getConfig;